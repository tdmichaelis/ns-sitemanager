(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["vendor"],{

/***/ "../node_modules/css-loader/index.js?!../node_modules/nativescript-theme-core/css/core.light.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/*!\r\n * NativeScript Theme v1.0.6 (https://nativescript.org)\r\n * Copyright 2016-2016 The Theme Authors\r\n * Copyright 2016-2016 Telerik\r\n * Licensed under MIT (https://github.com/NativeScript/theme/blob/master/LICENSE)\r\n */.c-white{color:#fff}.c-bg-white{background-color:#fff}.c-black{color:#000}.c-bg-black{background-color:#000}.c-aqua{color:#00caab}.c-bg-aqua{background-color:#00caab}.c-blue{color:#3d5afe}.c-bg-blue{background-color:#3d5afe}.c-charcoal{color:#303030}.c-bg-charcoal{background-color:#303030}.c-brown{color:#795548}.c-bg-brown{background-color:#795548}.c-forest{color:#006968}.c-bg-forest{background-color:#006968}.c-grey{color:#e0e0e0}.c-bg-grey{background-color:#e0e0e0}.c-grey-light{color:#bababa}.c-bg-grey-light{background-color:#bababa}.c-grey-dark{color:#5c687c}.c-bg-grey-dark{background-color:#5c687c}.c-purple{color:#8130ff}.c-bg-purple{background-color:#8130ff}.c-lemon{color:#ffea00}.c-bg-lemon{background-color:#ffea00}.c-lime{color:#aee406}.c-bg-lime{background-color:#aee406}.c-orange{color:#f57c00}.c-bg-orange{background-color:#f57c00}.c-ruby{color:#ff1744}.c-bg-ruby{background-color:#ff1744}.c-sky{color:#30bcff}.c-bg-sky{background-color:#30bcff}.w-full{width:100%}.w-100{width:100}.h-full{height:100%}.h-100{height:100}.m-0{margin:0}.m-t-0{margin-top:0}.m-r-0{margin-right:0}.m-b-0{margin-bottom:0}.m-l-0{margin-left:0}.m-x-0{margin-right:0;margin-left:0}.m-y-0{margin-top:0;margin-bottom:0}.m-2{margin:2}.m-t-2{margin-top:2}.m-r-2{margin-right:2}.m-b-2{margin-bottom:2}.m-l-2{margin-left:2}.m-x-2{margin-right:2;margin-left:2}.m-y-2{margin-top:2;margin-bottom:2}.m-4{margin:4}.m-t-4{margin-top:4}.m-r-4{margin-right:4}.m-b-4{margin-bottom:4}.m-l-4{margin-left:4}.m-x-4{margin-right:4;margin-left:4}.m-y-4{margin-top:4;margin-bottom:4}.m-5{margin:5}.m-t-5{margin-top:5}.m-r-5{margin-right:5}.m-b-5{margin-bottom:5}.m-l-5{margin-left:5}.m-x-5{margin-right:5;margin-left:5}.m-y-5{margin-top:5;margin-bottom:5}.m-8{margin:8}.m-t-8{margin-top:8}.m-r-8{margin-right:8}.m-b-8{margin-bottom:8}.m-l-8{margin-left:8}.m-x-8{margin-right:8;margin-left:8}.m-y-8{margin-top:8;margin-bottom:8}.m-10{margin:10}.m-t-10{margin-top:10}.m-r-10{margin-right:10}.m-b-10{margin-bottom:10}.m-l-10{margin-left:10}.m-x-10{margin-right:10;margin-left:10}.m-y-10{margin-top:10;margin-bottom:10}.m-12{margin:12}.m-t-12{margin-top:12}.m-r-12{margin-right:12}.m-b-12{margin-bottom:12}.m-l-12{margin-left:12}.m-x-12{margin-right:12;margin-left:12}.m-y-12{margin-top:12;margin-bottom:12}.m-15{margin:15}.m-t-15{margin-top:15}.m-r-15{margin-right:15}.m-b-15{margin-bottom:15}.m-l-15{margin-left:15}.m-x-15{margin-right:15;margin-left:15}.m-y-15{margin-top:15;margin-bottom:15}.m-16{margin:16}.m-t-16{margin-top:16}.m-r-16{margin-right:16}.m-b-16{margin-bottom:16}.m-l-16{margin-left:16}.m-x-16{margin-right:16;margin-left:16}.m-y-16{margin-top:16;margin-bottom:16}.m-20{margin:20}.m-t-20{margin-top:20}.m-r-20{margin-right:20}.m-b-20{margin-bottom:20}.m-l-20{margin-left:20}.m-x-20{margin-right:20;margin-left:20}.m-y-20{margin-top:20;margin-bottom:20}.m-24{margin:24}.m-t-24{margin-top:24}.m-r-24{margin-right:24}.m-b-24{margin-bottom:24}.m-l-24{margin-left:24}.m-x-24{margin-right:24;margin-left:24}.m-y-24{margin-top:24;margin-bottom:24}.m-25{margin:25}.m-t-25{margin-top:25}.m-r-25{margin-right:25}.m-b-25{margin-bottom:25}.m-l-25{margin-left:25}.m-x-25{margin-right:25;margin-left:25}.m-y-25{margin-top:25;margin-bottom:25}.m-28{margin:28}.m-t-28{margin-top:28}.m-r-28{margin-right:28}.m-b-28{margin-bottom:28}.m-l-28{margin-left:28}.m-x-28{margin-right:28;margin-left:28}.m-y-28{margin-top:28;margin-bottom:28}.m-30{margin:30}.m-t-30{margin-top:30}.m-r-30{margin-right:30}.m-b-30{margin-bottom:30}.m-l-30{margin-left:30}.m-x-30{margin-right:30;margin-left:30}.m-y-30{margin-top:30;margin-bottom:30}.p-0{padding:0}.p-t-0{padding-top:0}.p-r-0{padding-right:0}.p-b-0{padding-bottom:0}.p-l-0{padding-left:0}.p-x-0{padding-right:0;padding-left:0}.p-y-0{padding-top:0;padding-bottom:0}.p-2{padding:2}.p-t-2{padding-top:2}.p-r-2{padding-right:2}.p-b-2{padding-bottom:2}.p-l-2{padding-left:2}.p-x-2{padding-right:2;padding-left:2}.p-y-2{padding-top:2;padding-bottom:2}.p-4{padding:4}.p-t-4{padding-top:4}.p-r-4{padding-right:4}.p-b-4{padding-bottom:4}.p-l-4{padding-left:4}.p-x-4{padding-right:4;padding-left:4}.p-y-4{padding-top:4;padding-bottom:4}.p-5{padding:5}.p-t-5{padding-top:5}.p-r-5{padding-right:5}.p-b-5{padding-bottom:5}.p-l-5{padding-left:5}.p-x-5{padding-right:5;padding-left:5}.p-y-5{padding-top:5;padding-bottom:5}.p-8{padding:8}.p-t-8{padding-top:8}.p-r-8{padding-right:8}.p-b-8{padding-bottom:8}.p-l-8{padding-left:8}.p-x-8{padding-right:8;padding-left:8}.p-y-8{padding-top:8;padding-bottom:8}.p-10{padding:10}.p-t-10{padding-top:10}.p-r-10{padding-right:10}.p-b-10{padding-bottom:10}.p-l-10{padding-left:10}.p-x-10{padding-right:10;padding-left:10}.p-y-10{padding-top:10;padding-bottom:10}.p-12{padding:12}.p-t-12{padding-top:12}.p-r-12{padding-right:12}.p-b-12{padding-bottom:12}.p-l-12{padding-left:12}.p-x-12{padding-right:12;padding-left:12}.p-y-12{padding-top:12;padding-bottom:12}.p-15{padding:15}.p-t-15{padding-top:15}.p-r-15{padding-right:15}.p-b-15{padding-bottom:15}.p-l-15{padding-left:15}.p-x-15{padding-right:15;padding-left:15}.p-y-15{padding-top:15;padding-bottom:15}.p-16{padding:16}.p-t-16{padding-top:16}.p-r-16{padding-right:16}.p-b-16{padding-bottom:16}.p-l-16{padding-left:16}.p-x-16{padding-right:16;padding-left:16}.p-y-16{padding-top:16;padding-bottom:16}.p-20{padding:20}.p-t-20{padding-top:20}.p-r-20{padding-right:20}.p-b-20{padding-bottom:20}.p-l-20{padding-left:20}.p-x-20{padding-right:20;padding-left:20}.p-y-20{padding-top:20;padding-bottom:20}.p-24{padding:24}.p-t-24{padding-top:24}.p-r-24{padding-right:24}.p-b-24{padding-bottom:24}.p-l-24{padding-left:24}.p-x-24{padding-right:24;padding-left:24}.p-y-24{padding-top:24;padding-bottom:24}.p-25{padding:25}.p-t-25{padding-top:25}.p-r-25{padding-right:25}.p-b-25{padding-bottom:25}.p-l-25{padding-left:25}.p-x-25{padding-right:25;padding-left:25}.p-y-25{padding-top:25;padding-bottom:25}.p-28{padding:28}.p-t-28{padding-top:28}.p-r-28{padding-right:28}.p-b-28{padding-bottom:28}.p-l-28{padding-left:28}.p-x-28{padding-right:28;padding-left:28}.p-y-28{padding-top:28;padding-bottom:28}.p-30{padding:30}.p-t-30{padding-top:30}.p-r-30{padding-right:30}.p-b-30{padding-bottom:30}.p-l-30{padding-left:30}.p-x-30{padding-right:30;padding-left:30}.p-y-30{padding-top:30;padding-bottom:30}.hr-light{height:1;background-color:#e0e0e0;width:100%}.hr-dark{height:1;background-color:#303030;width:100%}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-lowercase{text-transform:lowercase}.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.font-weight-normal{font-weight:normal}.font-weight-bold{font-weight:bold}.font-italic{font-style:italic}.t-10{font-size:10}.t-12{font-size:12}.t-14{font-size:14}.t-15{font-size:15}.t-16{font-size:16}.t-17{font-size:17}.t-18{font-size:18}.t-19{font-size:19}.t-20{font-size:20}.t-25{font-size:25}.t-30{font-size:30}.img-rounded{border-radius:5}.img-circle{border-radius:20}.img-thumbnail{border-radius:0}.invisible{visibility:collapse}.pull-left{horizontal-align:left}.pull-right{horizontal-align:right}.m-x-auto{horizontal-align:center}.m-y-auto{vertical-align:center}.text-primary{color:#30bcff}.text-danger{color:#d50000}.text-muted{color:#9e9e9e}.bg-primary{background-color:#30bcff;color:#fff}.bg-danger{background-color:#d50000;color:#fff}.action-bar{background-color:#F8F8F8;color:#212121}.action-bar .action-bar-title{font-weight:bold;font-size:17;vertical-align:center}.action-bar .action-item{font-weight:normal}.activity-indicator{color:#30bcff;width:30;height:30}.btn{color:#30bcff;background-color:transparent;min-height:36;min-width:64;padding:10 10 10 10;font-size:18;margin:8 16 8 16}.btn.btn-active:highlighted{color:#fff;background-color:#c0ebff}.btn-primary{background-color:#30bcff;border-color:#30bcff;color:#fff}.btn-primary.btn-active:highlighted{background-color:#01a0ec;border-color:#01a0ec}.btn-primary.btn-aqua{background-color:#00caab}.btn-primary.btn-blue{background-color:#3d5afe}.btn-primary.btn-brown{background-color:#795548}.btn-primary.btn-forest{background-color:#006968}.btn-primary.btn-grey{background-color:#5c687c}.btn-primary.btn-lemon{background-color:#ffea00;color:#000}.btn-primary.btn-lime{background-color:#aee406;color:#000}.btn-primary.btn-orange{background-color:#f57c00}.btn-primary.btn-purple{background-color:#8130ff}.btn-primary.btn-ruby{background-color:#ff1744}.btn-primary.btn-sky{background-color:#30bcff}.btn-outline{background-color:transparent;border-color:#30bcff;color:#30bcff}.btn-outline.btn-active:highlighted{background-color:#c0ebff}.btn[isEnabled=false]{color:#a4a4a4;background-color:#e0e0e0;border-color:#e0e0e0}.fa{font-family:FontAwesome, fontawesome-webfont}.form .input{padding:16 8 16 8;background-color:transparent}.form .input.input-border{border-width:1;border-color:#e0e0e0;border-radius:2;padding:16}.form .input.input-rounded{border-width:1;border-color:#e0e0e0;border-radius:28;padding:16}.form .input[isEnabled='false']{background-color:#fafafa}.form .input-field{margin:8}.form .input-field .label{font-size:12;color:#bababa}.form .input-field .input{padding:0;margin:0 0 8 0}.form .input-field .hr-light.active,.form .input-field .hr-dark.active{background-color:#30bcff}.form .input-field.input-sides .label{font-size:18;margin:0 0 8 0}.h1,.h2,.h3,.h4,.h5,.h6{margin-bottom:4;font-weight:normal;color:#212121}.body,.body2,.footnote{font-weight:normal;color:#757575}.h1{font-size:32}.h2{font-size:22}.h3{font-size:15}.h4{font-size:12}.h5{font-size:11}.h6{font-size:10}.body{font-size:14}.body2{font-size:17}.footnote{font-size:13}.list-group .list-group-item{color:#212121;font-size:16;margin:0;padding:16}.list-group .list-group-item Label{vertical-align:center}.list-group .list-group-item .thumb{stretch:fill;width:40;height:40;margin-right:16}.list-group .list-group-item.active{background-color:#e0e0e0}.list-group .list-group-item .list-group-item-text{color:#757575;font-size:14}.page{background-color:#fff}.progress{color:#30bcff;background-color:#bababa}.segmented-bar{font-size:13;background-color:#fff;color:#212121;selected-background-color:#30bcff}.sidedrawer-left,.sidedrawer-center{background-color:#fafafa}.sidedrawer-header{background-color:#fafafa;height:148;width:100%}.sidedrawer-left .sidedrawer-header{padding:16 16 0 16}.sidedrawer-center .sidedrawer-header{padding:20 15 0 15}.sidedrawer-header-image{background-color:#e0e0e0}.sidedrawer-left .sidedrawer-header-image{height:64;width:64;border-radius:32;horizontal-align:left;margin-bottom:36}.sidedrawer-center .sidedrawer-header-image{height:74;width:74;border-radius:37;horizontal-align:center;margin-bottom:24}.sidedrawer-header-brand{color:#737373}.sidedrawer-left .sidedrawer-header-brand{horizontal-align:left;font-size:14}.sidedrawer-center .sidedrawer-header-brand{horizontal-align:center;font-size:15}.sidedrawer-list-item{height:48;horizontal-align:left;width:100%;orientation:horizontal}.sidedrawer-list-item .sidedrawer-list-item-icon{width:24;text-align:center;font-size:20;height:48;vertical-align:center}.sidedrawer-list-item.active{color:#fff;background-color:#30bcff}.sidedrawer-list-item.active .sidedrawer-list-item-icon{color:#fff}.sidedrawer-left .sidedrawer-list-item-icon{margin:0 16 0 16}.sidedrawer-center .sidedrawer-list-item-icon{margin:0 0 0 15}.sidedrawer-list-item-text{horizontal-align:left;text-align:left;font-size:15;background-color:transparent;border-width:0.1;width:80%;vertical-align:center}.sidedrawer-left .sidedrawer-list-item-text{padding-left:16}.sidedrawer-center .sidedrawer-list-item-text{padding-left:15}.slider{background-color:#30bcff}.slider[isEnabled=false]{background-color:#e0e0e0;color:#e0e0e0}.switch[checked=true]{background-color:#30bcff;color:#30bcff}.switch[checked=true][isEnabled=false]{background-color:#e0e0e0;color:#fff}.switch[isEnabled=false]{background-color:#e0e0e0;color:#e0e0e0}.tab-view{selected-color:#30bcff;tabs-background-color:#fff}.tab-view .tab-view-item{background-color:#fff;tabs-background-color:#fff}#login-background{margin-top:-20;background-size:cover;background-position:center}.login-wrap{padding:0 40}.logo-wrap{margin:60 0 10 0;padding:20 0}.logo-wrap .login-logo{text-align:center;font-size:30;font-weight:bold;margin-bottom:10;opacity:1;color:#212121;opacity:.9}.logo-wrap .login-logo-sub{color:#212121;opacity:.8;text-align:center}.login-wrapper{padding:20;background-color:#fff;border-radius:3}.login-wrapper TextField{padding:10 10;margin:10 0 0 0}.go-back{font-size:14;text-align:center;color:#212121;margin-top:10}.action-bar .action-bar-title{font-weight:500;font-size:20}.action-bar .action-item{android-elevation:0;background-color:rgba(255,0,0,0);border-color:rgba(255,0,0,0);border-width:1}.btn{font-family:'Roboto Medium';font-size:14}.btn-primary{border-color:rgba(255,0,0,0)}.btn-outline{android-elevation:0;background-color:rgba(255,0,0,0);border-width:1;border-color:#30bcff;height:36;padding:0}.btn-rounded-sm{border-radius:2;height:36;padding:0}.btn-rounded-lg{border-radius:40;height:36;padding:0}.form{font-family:'Roboto Regular'}.form .input{font-size:16}.h1{font-size:34}.h2{font-size:24}.h3{font-size:16}.h5{font-size:11;font-weight:bold}.body2{font-size:14;font-weight:500}.sidedrawer-list-item-icon{margin:0 16 0 16;padding-top:14}.sidedrawer-list-item-icon,.sidedrawer-list-item{color:#737373}.sidedrawer-list-item{font-family:'Roboto Medium';font-size:14}.slider{color:#30bcff;margin:20 16}.switch{margin:14 16;color:#e0e0e0;background-color:#e0e0e0}.switch[checked=true]{color:#30bcff}\n", ""]);

// exports


/***/ }),

/***/ "../node_modules/css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/hmr-update.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var hot = __webpack_require__("../node_modules/nativescript-dev-webpack/hot.js");

var file_system_1 = __webpack_require__("tns-core-modules/file-system");

function hmrUpdate() {
  var applicationFiles = file_system_1.knownFolders.currentApp();

  var latestHash = __webpack_require__["h"]();

  return hot(latestHash, filename => applicationFiles.getFile(filename));
}

exports.hmrUpdate = hmrUpdate;

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var hmr_update_1 = __webpack_require__("../node_modules/nativescript-dev-webpack/hmr/hmr-update.js");

exports.hmrUpdate = hmr_update_1.hmrUpdate;

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hot.js":
/***/ (function(module, exports, __webpack_require__) {

var hmrPrefix = 'HMR:';
var log = {
  info: message => console.info("".concat(hmrPrefix, " ").concat(message)),
  warn: message => console.warn("".concat(hmrPrefix, " ").concat(message)),
  error: message => console.error("".concat(hmrPrefix, " ").concat(message))
};
var refresh = 'Application needs to be restarted in order to apply the changes.';
var hotOptions = {
  ignoreUnaccepted: false,
  ignoreDeclined: false,
  ignoreErrored: false,

  onUnaccepted(data) {
    var chain = [].concat(data.chain);
    var last = chain[chain.length - 1];

    if (last === 0) {
      chain.pop();
    }

    log.warn("Ignored an update to unaccepted module: ");
    chain.forEach(mod => log.warn("         \u27AD ".concat(mod)));
  },

  onDeclined(data) {
    log.warn("Ignored an update to declined module:");
    data.chain.forEach(mod => log.warn("         \u27AD ".concat(mod)));
  },

  onErrored(data) {
    log.warn("Ignored an error while updating module ".concat(data.moduleId, " <").concat(data.type, ">"));
    log.warn(data.error);
  }

};
var nextHash;
var currentHash;

function upToDate() {
  return nextHash.indexOf(__webpack_require__.h()) >= 0;
}

function result(modules, appliedModules) {
  var unaccepted = modules.filter(moduleId => appliedModules && appliedModules.indexOf(moduleId) < 0);

  if (unaccepted.length > 0) {
    log.warn('The following modules could not be updated:');

    for (var moduleId of unaccepted) {
      log.warn("          \u29BB ".concat(moduleId));
    }
  }

  if (!(appliedModules || []).length) {
    log.info('No Modules Updated.');
  } else {
    log.info('The following modules were updated:');

    for (var _moduleId of appliedModules) {
      log.info("         \u21BB ".concat(_moduleId));
    }

    var numberIds = appliedModules.every(moduleId => typeof moduleId === 'number');

    if (numberIds) {
      log.info('Please consider using the NamedModulesPlugin for module names.');
    }
  }
}

function check(options) {
  return module.hot.check().then(modules => {
    if (!modules) {
      log.warn("Cannot find update. ".concat(refresh));
      return null;
    }

    return module.hot.apply(hotOptions).then(appliedModules => {
      var nextCheck;

      if (!upToDate()) {
        nextCheck = check(options);
      }

      result(modules, appliedModules);

      if (upToDate()) {
        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
        log.info("Successfully applied update with hmr hash ".concat(currentHash, ". App is up to date."));
      }

      return nextCheck || null;
    }).catch(err => {
      var status = module.hot.status();

      if (['abort', 'fail'].indexOf(status) >= 0) {
        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
        log.error("Cannot apply update with hmr hash ".concat(currentHash, "."));
        log.error(err.message || err.stack);
      } else {
        log.error("Update failed: ".concat(err.message || err.stack));
      }
    });
  }).catch(err => {
    var status = module.hot.status();

    if (['abort', 'fail'].indexOf(status) >= 0) {
      log.error("Cannot check for update. ".concat(refresh));
      log.error(err.message || err.stack);
    } else {
      log.error("Update check failed: ".concat(err.message || err.stack));
    }
  });
}

if (true) {
  log.info('Hot Module Replacement Enabled. Waiting for signal.');
} else {}

function update(latestHash, options) {
  nextHash = latestHash;

  if (!upToDate()) {
    var status = module.hot.status();

    if (status === 'idle') {
      //Do not modify message - CLI depends on this exact content to determine hmr operation status.
      log.info("Checking for updates to the bundle with hmr hash ".concat(currentHash, "."));
      return check(options);
    } else if (['abort', 'fail'].indexOf(status) >= 0) {
      log.warn("Cannot apply update. A previous update ".concat(status, "ed. ").concat(refresh));
    }
  }
}

;

function getNextHash(hash, getFileContent) {
  var file = getFileContent("".concat(hash, ".hot-update.json"));
  return file.readText().then(hotUpdateContent => {
    if (hotUpdateContent) {
      var manifest = JSON.parse(hotUpdateContent);
      var newHash = manifest.h;
      return getNextHash(newHash, getFileContent);
    } else {
      return Promise.resolve(hash);
    }
  }).catch(error => Promise.reject(error));
}

module.exports = function checkState(initialHash, getFileContent) {
  currentHash = initialHash;
  return getNextHash(initialHash, getFileContent).then(nextHash => {
    if (nextHash != initialHash) {
      return update(nextHash, {});
    }
  });
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css-regular.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var loadCss = __webpack_require__("../node_modules/nativescript-dev-webpack/load-application-css.js");

module.exports = function () {
  loadCss(function () {
    var appCssContext = __webpack_require__("./ sync ^\\.\\/app\\.(css|scss|less|sass)$");

    global.registerWebpackModules(appCssContext);
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function (loadModuleFn) {
  var application = __webpack_require__("tns-core-modules/application");

  __webpack_require__("tns-core-modules/ui/styling/style-scope");

  loadModuleFn();
  application.loadAppCss();
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "../node_modules/nativescript-vue/dist/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * NativeScript-Vue v2.3.0
 * (Using Vue v2.6.10)
 * (c) 2017-2019 rigor789
 * Released under the MIT license.
 */


global.process = global.process || {};
global.process.env = global.process.env || {};

var application = __webpack_require__("tns-core-modules/application");

__webpack_require__("tns-core-modules/ui/frame");

var arrayMap = function arrayMap(xs, f) {
  if (xs.map) {
    return xs.map(f);
  }

  var res = [];

  for (var i = 0; i < xs.length; i++) {
    var x = xs[i];

    if (hasOwn.call(xs, i)) {
      res.push(f(x, i, xs));
    }
  }

  return res;
};

var hasOwn = Object.prototype.hasOwnProperty;
var indexOf = [].indexOf;

var indexof = function indexof(arr, obj) {
  if (indexOf) {
    return arr.indexOf(obj);
  }

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) {
      return i;
    }
  }

  return -1;
};

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

var hasOwn$1 = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var foreach = function forEach(obj, fn, ctx) {
  if (toString.call(fn) !== '[object Function]') {
    throw new TypeError('iterator must be a function');
  }

  var l = obj.length;

  if (l === +l) {
    for (var i = 0; i < l; i++) {
      fn.call(ctx, obj[i], i, obj);
    }
  } else {
    for (var k in obj) {
      if (hasOwn$1.call(obj, k)) {
        fn.call(ctx, obj[k], k, obj);
      }
    }
  }
};

var hasOwn$2 = Object.prototype.hasOwnProperty;

var arrayReduce = function arrayReduce(xs, f, acc) {
  var hasAcc = arguments.length >= 3;

  if (hasAcc && xs.reduce) {
    return xs.reduce(f, acc);
  }

  if (xs.reduce) {
    return xs.reduce(f);
  }

  for (var i = 0; i < xs.length; i++) {
    if (!hasOwn$2.call(xs, i)) {
      continue;
    }

    if (!hasAcc) {
      acc = xs[i];
      hasAcc = true;
      continue;
    }

    acc = f(acc, xs[i], i);
  }

  return acc;
};

var hasOwn$3 = Object.prototype.hasOwnProperty;
var toString$1 = Object.prototype.toString;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && !(fn instanceof RegExp) || toString$1.call(fn) === '[object Function]';
};

var foreach$1 = function forEach(obj, fn) {
  if (!isFunction(fn)) {
    throw new TypeError('iterator must be a function');
  }

  var i,
      k,
      isString = typeof obj === 'string',
      l = obj.length,
      context = arguments.length > 2 ? arguments[2] : null;

  if (l === +l) {
    for (i = 0; i < l; i++) {
      if (context === null) {
        fn(isString ? obj.charAt(i) : obj[i], i, obj);
      } else {
        fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
      }
    }
  } else {
    for (k in obj) {
      if (hasOwn$3.call(obj, k)) {
        if (context === null) {
          fn(obj[k], k, obj);
        } else {
          fn.call(context, obj[k], k, obj);
        }
      }
    }
  }
};

var toString$2 = Object.prototype.toString;

var isArguments = function isArguments(value) {
  var str = toString$2.call(value);
  var isArguments = str === '[object Arguments]';

  if (!isArguments) {
    isArguments = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toString$2.call(value.callee) === '[object Function]';
  }

  return isArguments;
}; // modified from https://github.com/es-shims/es5-shim


var has = Object.prototype.hasOwnProperty,
    toString$3 = Object.prototype.toString,
    hasDontEnumBug = !{
  'toString': null
}.propertyIsEnumerable('toString'),
    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),
    dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];

var keysShim = function keys(object) {
  var isObject = object !== null && typeof object === 'object',
      isFunction = toString$3.call(object) === '[object Function]',
      isArguments$1 = isArguments(object),
      theKeys = [];

  if (!isObject && !isFunction && !isArguments$1) {
    throw new TypeError("Object.keys called on a non-object");
  }

  if (isArguments$1) {
    foreach$1(object, function (value, index) {
      theKeys.push(index);
    });
  } else {
    var name,
        skipProto = hasProtoEnumBug && isFunction;

    for (name in object) {
      if (!(skipProto && name === 'prototype') && has.call(object, name)) {
        theKeys.push(name);
      }
    }
  }

  if (hasDontEnumBug) {
    var ctor = object.constructor,
        skipConstructor = ctor && ctor.prototype === object;
    foreach$1(dontEnums, function (dontEnum) {
      if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
        theKeys.push(dontEnum);
      }
    });
  }

  return theKeys;
};

keysShim.shim = function shimObjectKeys() {
  if (!Object.keys) {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

var objectKeys = keysShim;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var json3 = createCommonjsModule(function (module, exports) {
  (function (root) {
    // Detect the `define` function exposed by asynchronous module loaders. The
    // strict `define` check is necessary for compatibility with `r.js`.
    var isLoader =  false && false; // Use the `global` object exposed by Node (including Browserify via
    // `insert-module-globals`), Narwhal, and Ringo as the default context.
    // Rhino exports a `global` function instead.

    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;

    if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal)) {
      root = freeGlobal;
    } // Public: Initializes JSON 3 using the given `context` object, attaching the
    // `stringify` and `parse` functions to the specified `exports` object.


    function runInContext(context, exports) {
      context || (context = root["Object"]());
      exports || (exports = root["Object"]()); // Native constructor aliases.

      var Number = context["Number"] || root["Number"],
          String = context["String"] || root["String"],
          Object = context["Object"] || root["Object"],
          Date = context["Date"] || root["Date"],
          SyntaxError = context["SyntaxError"] || root["SyntaxError"],
          TypeError = context["TypeError"] || root["TypeError"],
          Math = context["Math"] || root["Math"],
          nativeJSON = context["JSON"] || root["JSON"]; // Delegate to the native `stringify` and `parse` implementations.

      if (typeof nativeJSON == "object" && nativeJSON) {
        exports.stringify = nativeJSON.stringify;
        exports.parse = nativeJSON.parse;
      } // Convenience aliases.


      var objectProto = Object.prototype,
          getClass = objectProto.toString,
          _isProperty,
          _forEach,
          undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.


      var isExtended = new Date(-3509827334573292);

      try {
        // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
        // results for certain dates in Opera >= 10.53.
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
      } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`
      // implementations are spec-compliant. Based on work by Ken Snyder.


      function has(name) {
        if (has[name] !== undef) {
          // Return cached feature test result.
          return has[name];
        }

        var isSupported;

        if (name == "bug-string-char-index") {
          // IE <= 7 doesn't support accessing string characters using square
          // bracket notation. IE 8 only supports this for primitives.
          isSupported = "a"[0] != "a";
        } else if (name == "json") {
          // Indicates whether both `JSON.stringify` and `JSON.parse` are
          // supported.
          isSupported = has("json-stringify") && has("json-parse");
        } else {
          var value,
              serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

          if (name == "json-stringify") {
            var stringify = exports.stringify,
                stringifySupported = typeof stringify == "function" && isExtended;

            if (stringifySupported) {
              // A test function object with a custom `toJSON` method.
              (value = function value() {
                return 1;
              }).toJSON = value;

              try {
                stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({
                  "a": [value, true, false, null, "\x00\b\n\f\r\t"]
                }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
              } catch (exception) {
                stringifySupported = false;
              }
            }

            isSupported = stringifySupported;
          } // Test `JSON.parse`.


          if (name == "json-parse") {
            var parse = exports.parse;

            if (typeof parse == "function") {
              try {
                // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                // Conforming implementations should also coerce the initial argument to
                // a string prior to parsing.
                if (parse("0") === 0 && !parse(false)) {
                  // Simple parsing test.
                  value = parse(serialized);
                  var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                  if (parseSupported) {
                    try {
                      // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                      parseSupported = !parse('"\t"');
                    } catch (exception) {}

                    if (parseSupported) {
                      try {
                        // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                        // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                        // certain octal literals.
                        parseSupported = parse("01") !== 1;
                      } catch (exception) {}
                    }

                    if (parseSupported) {
                      try {
                        // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                        // points. These environments, along with FF 3.1b1 and 2,
                        // also allow trailing commas in JSON objects and arrays.
                        parseSupported = parse("1.") !== 1;
                      } catch (exception) {}
                    }
                  }
                }
              } catch (exception) {
                parseSupported = false;
              }
            }

            isSupported = parseSupported;
          }
        }

        return has[name] = !!isSupported;
      }

      if (!has("json")) {
        // Common `[[Class]]` name aliases.
        var functionClass = "[object Function]",
            dateClass = "[object Date]",
            numberClass = "[object Number]",
            stringClass = "[object String]",
            arrayClass = "[object Array]",
            booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

        var charIndexBuggy = has("bug-string-char-index"); // Define additional utility methods if the `Date` methods are buggy.

        if (!isExtended) {
          var floor = Math.floor; // A mapping between the months of the year and the number of days between
          // January 1st and the first of the respective month.

          var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
          // first day of the given month.

          var getDay = function getDay(year, month) {
            return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
          };
        } // Internal: Determines if a property is a direct property of the given
        // object. Delegates to the native `Object#hasOwnProperty` method.


        if (!(_isProperty = objectProto.hasOwnProperty)) {
          _isProperty = function isProperty(property) {
            var members = {},
                constructor;

            if ((members.__proto__ = null, members.__proto__ = {
              // The *proto* property cannot be set multiple times in recent
              // versions of Firefox and SeaMonkey.
              "toString": 1
            }, members).toString != getClass) {
              // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
              // supports the mutable *proto* property.
              _isProperty = function isProperty(property) {
                // Capture and break the objectgs prototype chain (see section 8.6.2
                // of the ES 5.1 spec). The parenthesized expression prevents an
                // unsafe transformation by the Closure Compiler.
                var original = this.__proto__,
                    result = property in (this.__proto__ = null, this); // Restore the original prototype chain.

                this.__proto__ = original;
                return result;
              };
            } else {
              // Capture a reference to the top-level `Object` constructor.
              constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in
              // other environments.

              _isProperty = function isProperty(property) {
                var parent = (this.constructor || constructor).prototype;
                return property in this && !(property in parent && this[property] === parent[property]);
              };
            }

            members = null;
            return _isProperty.call(this, property);
          };
        } // Internal: A set of primitive types used by `isHostType`.


        var PrimitiveTypes = {
          "boolean": 1,
          "number": 1,
          "string": 1,
          "undefined": 1
        }; // Internal: Determines if the given object `property` value is a
        // non-primitive.

        var isHostType = function isHostType(object, property) {
          var type = typeof object[property];
          return type == "object" ? !!object[property] : !PrimitiveTypes[type];
        }; // Internal: Normalizes the `for...in` iteration algorithm across
        // environments. Each enumerated key is yielded to a `callback` function.


        _forEach = function forEach(object, callback) {
          var size = 0,
              Properties,
              members,
              property; // Tests for bugs in the current environment's `for...in` algorithm. The
          // `valueOf` property inherits the non-enumerable flag from
          // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

          (Properties = function Properties() {
            this.valueOf = 0;
          }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

          members = new Properties();

          for (property in members) {
            // Ignore all properties inherited from `Object.prototype`.
            if (_isProperty.call(members, property)) {
              size++;
            }
          }

          Properties = members = null; // Normalize the iteration algorithm.

          if (!size) {
            // A list of non-enumerable properties inherited from `Object.prototype`.
            members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
            // properties.

            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  length;
              var hasProperty = !isFunction && typeof object.constructor != "function" && isHostType(object, "hasOwnProperty") ? object.hasOwnProperty : _isProperty;

              for (property in object) {
                // Gecko <= 1.0 enumerates the `prototype` property of functions under
                // certain conditions; IE does not.
                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                  callback(property);
                }
              } // Manually invoke the callback for each non-enumerable property.


              for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}
            };
          } else if (size == 2) {
            // Safari <= 2.0.4 enumerates shadowed properties twice.
            _forEach = function forEach(object, callback) {
              // Create a set of iterated properties.
              var members = {},
                  isFunction = getClass.call(object) == functionClass,
                  property;

              for (property in object) {
                // Store each property name to prevent double enumeration. The
                // `prototype` property of functions is not enumerated due to cross-
                // environment inconsistencies.
                if (!(isFunction && property == "prototype") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {
                  callback(property);
                }
              }
            };
          } else {
            // No bugs detected; use the standard `for...in` algorithm.
            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  isConstructor;

              for (property in object) {
                if (!(isFunction && property == "prototype") && _isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                  callback(property);
                }
              } // Manually invoke the callback for the `constructor` property due to
              // cross-environment inconsistencies.


              if (isConstructor || _isProperty.call(object, property = "constructor")) {
                callback(property);
              }
            };
          }

          return _forEach(object, callback);
        }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
        // `filter` argument may specify either a function that alters how object and
        // array members are serialized, or an array of strings and numbers that
        // indicates which properties should be serialized. The optional `width`
        // argument may be either a string or number that specifies the indentation
        // level of the output.


        if (!has("json-stringify")) {
          // Internal: A map of control characters and their escaped equivalents.
          var Escapes = {
            92: "\\\\",
            34: '\\"',
            8: "\\b",
            12: "\\f",
            10: "\\n",
            13: "\\r",
            9: "\\t"
          }; // Internal: Converts `value` into a zero-padded string such that its
          // length is at least equal to `width`. The `width` must be <= 6.

          var leadingZeroes = "000000";

          var toPaddedString = function toPaddedString(width, value) {
            // The `|| 0` expression is necessary to work around a bug in
            // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
            return (leadingZeroes + (value || 0)).slice(-width);
          }; // Internal: Double-quotes a string `value`, replacing all ASCII control
          // characters (characters with code unit values between 0 and 31) with
          // their escaped equivalents. This is an implementation of the
          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.


          var unicodePrefix = "\\u00";

          var quote = function quote(value) {
            var result = '"',
                index = 0,
                length = value.length,
                useCharIndex = !charIndexBuggy || length > 10;
            var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

            for (; index < length; index++) {
              var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or
              // shorthand escape sequence; otherwise, append the character as-is.

              switch (charCode) {
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                case 34:
                case 92:
                  result += Escapes[charCode];
                  break;

                default:
                  if (charCode < 32) {
                    result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                    break;
                  }

                  result += useCharIndex ? symbols[index] : value.charAt(index);
              }
            }

            return result + '"';
          }; // Internal: Recursively serializes an object. Implements the
          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


          var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
            var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

            try {
              // Necessary for host object support.
              value = object[property];
            } catch (exception) {}

            if (typeof value == "object" && value) {
              className = getClass.call(value);

              if (className == dateClass && !_isProperty.call(value, "toJSON")) {
                if (value > -1 / 0 && value < 1 / 0) {
                  // Dates are serialized according to the `Date#toJSON` method
                  // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                  // for the ISO 8601 date time string format.
                  if (getDay) {
                    // Manually compute the year, month, date, hours, minutes,
                    // seconds, and milliseconds if the `getUTC*` methods are
                    // buggy. Adapted from @Yaffle's `date-shim` project.
                    date = floor(value / 864e5);

                    for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}

                    for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}

                    date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
                    // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                    // to compute `A modulo B`, as the `%` operator does not
                    // correspond to the `modulo` operation for negative numbers.

                    time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
                    // decomposing the time within the day. See section 15.9.1.10.

                    hours = floor(time / 36e5) % 24;
                    minutes = floor(time / 6e4) % 60;
                    seconds = floor(time / 1e3) % 60;
                    milliseconds = time % 1e3;
                  } else {
                    year = value.getUTCFullYear();
                    month = value.getUTCMonth();
                    date = value.getUTCDate();
                    hours = value.getUTCHours();
                    minutes = value.getUTCMinutes();
                    seconds = value.getUTCSeconds();
                    milliseconds = value.getUTCMilliseconds();
                  } // Serialize extended years correctly.


                  value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
                } else {
                  value = null;
                }
              } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, "toJSON"))) {
                // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
                // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
                // ignores all `toJSON` methods on these objects unless they are
                // defined directly on an instance.
                value = value.toJSON(property);
              }
            }

            if (callback) {
              // If a replacement function was provided, call it to obtain the value
              // for serialization.
              value = callback.call(object, property, value);
            }

            if (value === null) {
              return "null";
            }

            className = getClass.call(value);

            if (className == booleanClass) {
              // Booleans are represented literally.
              return "" + value;
            } else if (className == numberClass) {
              // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
              // `"null"`.
              return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
            } else if (className == stringClass) {
              // Strings are double-quoted and escaped.
              return quote("" + value);
            } // Recursively serialize objects and arrays.


            if (typeof value == "object") {
              // Check for cyclic structures. This is a linear search; performance
              // is inversely proportional to the number of unique nested objects.
              for (length = stack.length; length--;) {
                if (stack[length] === value) {
                  // Cyclic structures cannot be serialized by `JSON.stringify`.
                  throw TypeError();
                }
              } // Add the object to the stack of traversed objects.


              stack.push(value);
              results = []; // Save the current indentation level and indent one additional level.

              prefix = indentation;
              indentation += whitespace;

              if (className == arrayClass) {
                // Recursively serialize array elements.
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undef ? "null" : element);
                }

                result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
              } else {
                // Recursively serialize object members. Members are selected from
                // either a user-specified list of property names, or the object
                // itself.
                _forEach(properties || value, function (property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                  if (element !== undef) {
                    // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                    // is not the empty string, let `member` {quote(property) + ":"}
                    // be the concatenation of `member` and the `space` character."
                    // The "`space` character" refers to the literal space
                    // character, not the `space` {width} argument provided to
                    // `JSON.stringify`.
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });

                result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
              } // Remove the object from the traversed object stack.


              stack.pop();
              return result;
            }
          }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


          exports.stringify = function (source, filter, width) {
            var whitespace, callback, properties, className;

            if (typeof filter == "function" || typeof filter == "object" && filter) {
              if ((className = getClass.call(filter)) == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                // Convert the property names array into a makeshift set.
                properties = {};

                for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}
              }
            }

            if (width) {
              if ((className = getClass.call(width)) == numberClass) {
                // Convert the `width` to an integer and create a string containing
                // `width` number of space characters.
                if ((width -= width % 1) > 0) {
                  for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {}
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            } // Opera <= 7.54u2 discards the values associated with empty string keys
            // (`""`) only if they are used directly within an object member list
            // (e.g., `!("" in { "": 1})`).


            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        } // Public: Parses a JSON source string.


        if (!has("json-parse")) {
          var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
          // equivalents.

          var Unescapes = {
            92: "\\",
            34: '"',
            47: "/",
            98: "\b",
            116: "\t",
            110: "\n",
            102: "\f",
            114: "\r"
          }; // Internal: Stores the parser state.

          var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

          var abort = function abort() {
            Index = Source = null;
            throw SyntaxError();
          }; // Internal: Returns the next token, or `"$"` if the parser has reached
          // the end of the source string. A token may be a string, number, `null`
          // literal, or Boolean literal.


          var lex = function lex() {
            var source = Source,
                length = source.length,
                value,
                begin,
                position,
                isSigned,
                charCode;

            while (Index < length) {
              charCode = source.charCodeAt(Index);

              switch (charCode) {
                case 9:
                case 10:
                case 13:
                case 32:
                  // Skip whitespace tokens, including tabs, carriage returns, line
                  // feeds, and space characters.
                  Index++;
                  break;

                case 123:
                case 125:
                case 91:
                case 93:
                case 58:
                case 44:
                  // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                  // the current position.
                  value = charIndexBuggy ? source.charAt(Index) : source[Index];
                  Index++;
                  return value;

                case 34:
                  // `"` delimits a JSON string; advance to the next character and
                  // begin parsing the string. String tokens are prefixed with the
                  // sentinel `@` character to distinguish them from punctuators and
                  // end-of-string tokens.
                  for (value = "@", Index++; Index < length;) {
                    charCode = source.charCodeAt(Index);

                    if (charCode < 32) {
                      // Unescaped ASCII control characters (those with a code unit
                      // less than the space character) are not permitted.
                      abort();
                    } else if (charCode == 92) {
                      // A reverse solidus (`\`) marks the beginning of an escaped
                      // control character (including `"`, `\`, and `/`) or Unicode
                      // escape sequence.
                      charCode = source.charCodeAt(++Index);

                      switch (charCode) {
                        case 92:
                        case 34:
                        case 47:
                        case 98:
                        case 116:
                        case 110:
                        case 102:
                        case 114:
                          // Revive escaped control characters.
                          value += Unescapes[charCode];
                          Index++;
                          break;

                        case 117:
                          // `\u` marks the beginning of a Unicode escape sequence.
                          // Advance to the first character and validate the
                          // four-digit code point.
                          begin = ++Index;

                          for (position = Index + 4; Index < position; Index++) {
                            charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                            // insensitive) that form a single hexadecimal value.

                            if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                              // Invalid Unicode escape sequence.
                              abort();
                            }
                          } // Revive the escaped character.


                          value += fromCharCode("0x" + source.slice(begin, Index));
                          break;

                        default:
                          // Invalid escape sequence.
                          abort();
                      }
                    } else {
                      if (charCode == 34) {
                        // An unescaped double-quote character marks the end of the
                        // string.
                        break;
                      }

                      charCode = source.charCodeAt(Index);
                      begin = Index; // Optimize for the common case where a string is valid.

                      while (charCode >= 32 && charCode != 92 && charCode != 34) {
                        charCode = source.charCodeAt(++Index);
                      } // Append the string as-is.


                      value += source.slice(begin, Index);
                    }
                  }

                  if (source.charCodeAt(Index) == 34) {
                    // Advance to the next character and return the revived string.
                    Index++;
                    return value;
                  } // Unterminated string.


                  abort();

                default:
                  // Parse numbers and literals.
                  begin = Index; // Advance past the negative sign, if one is specified.

                  if (charCode == 45) {
                    isSigned = true;
                    charCode = source.charCodeAt(++Index);
                  } // Parse an integer or floating-point value.


                  if (charCode >= 48 && charCode <= 57) {
                    // Leading zeroes are interpreted as octal literals.
                    if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                      // Illegal octal literal.
                      abort();
                    }

                    isSigned = false; // Parse the integer component.

                    for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {} // Floats cannot contain a leading decimal point; however, this
                    // case is already accounted for by the parser.


                    if (source.charCodeAt(Index) == 46) {
                      position = ++Index; // Parse the decimal component.

                      for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal trailing decimal.
                        abort();
                      }

                      Index = position;
                    } // Parse exponents. The `e` denoting the exponent is
                    // case-insensitive.


                    charCode = source.charCodeAt(Index);

                    if (charCode == 101 || charCode == 69) {
                      charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                      // specified.

                      if (charCode == 43 || charCode == 45) {
                        Index++;
                      } // Parse the exponential component.


                      for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal empty exponent.
                        abort();
                      }

                      Index = position;
                    } // Coerce the parsed value to a JavaScript number.


                    return +source.slice(begin, Index);
                  } // A negative sign may only precede numbers.


                  if (isSigned) {
                    abort();
                  } // `true`, `false`, and `null` literals.


                  if (source.slice(Index, Index + 4) == "true") {
                    Index += 4;
                    return true;
                  } else if (source.slice(Index, Index + 5) == "false") {
                    Index += 5;
                    return false;
                  } else if (source.slice(Index, Index + 4) == "null") {
                    Index += 4;
                    return null;
                  } // Unrecognized token.


                  abort();
              }
            } // Return the sentinel `$` character if the parser has reached the end
            // of the source string.


            return "$";
          }; // Internal: Parses a JSON `value` token.


          var get = function get(value) {
            var results, hasMembers;

            if (value == "$") {
              // Unexpected end of input.
              abort();
            }

            if (typeof value == "string") {
              if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                // Remove the sentinel `@` character.
                return value.slice(1);
              } // Parse object and array literals.


              if (value == "[") {
                // Parses a JSON array, returning a new JavaScript array.
                results = [];

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing square bracket marks the end of the array literal.

                  if (value == "]") {
                    break;
                  } // If the array literal contains elements, the current token
                  // should be a comma separating the previous element from the
                  // next.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "]") {
                        // Unexpected trailing `,` in array literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each array element.
                      abort();
                    }
                  } // Elisions and leading commas are not permitted.


                  if (value == ",") {
                    abort();
                  }

                  results.push(get(value));
                }

                return results;
              } else if (value == "{") {
                // Parses a JSON object, returning a new JavaScript object.
                results = {};

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing curly brace marks the end of the object literal.

                  if (value == "}") {
                    break;
                  } // If the object literal contains members, the current token
                  // should be a comma separator.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "}") {
                        // Unexpected trailing `,` in object literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each object member.
                      abort();
                    }
                  } // Leading commas are not permitted, object property names must be
                  // double-quoted strings, and a `:` must separate each property
                  // name and value.


                  if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                    abort();
                  }

                  results[value.slice(1)] = get(lex());
                }

                return results;
              } // Unexpected token encountered.


              abort();
            }

            return value;
          }; // Internal: Updates a traversed object member.


          var update = function update(source, property, callback) {
            var element = walk(source, property, callback);

            if (element === undef) {
              delete source[property];
            } else {
              source[property] = element;
            }
          }; // Internal: Recursively traverses a parsed JSON object, invoking the
          // `callback` function for each value. This is an implementation of the
          // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


          var walk = function walk(source, property, callback) {
            var value = source[property],
                length;

            if (typeof value == "object" && value) {
              // `forEach` can't be used to traverse an array in Opera <= 8.54
              // because its `Object#hasOwnProperty` implementation returns `false`
              // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
              if (getClass.call(value) == arrayClass) {
                for (length = value.length; length--;) {
                  update(value, length, callback);
                }
              } else {
                _forEach(value, function (property) {
                  update(value, property, callback);
                });
              }
            }

            return callback.call(source, property, value);
          }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


          exports.parse = function (source, callback) {
            var result, value;
            Index = 0;
            Source = "" + source;
            result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

            if (lex() != "$") {
              abort();
            } // Reset the parser state.


            Index = Source = null;
            return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
          };
        }
      }

      exports["runInContext"] = runInContext;
      return exports;
    }

    if (exports && !exports.nodeType && !isLoader) {
      // Export for CommonJS environments.
      runInContext(root, exports);
    } else {
      // Export for web browsers and JavaScript engines.
      var nativeJSON = root.JSON;
      var JSON3 = runInContext(root, root["JSON3"] = {
        // Public: Restores the original value of the global `JSON` object and
        // returns a reference to the `JSON3` object.
        "noConflict": function noConflict() {
          root.JSON = nativeJSON;
          return JSON3;
        }
      });
      root.JSON = {
        "parse": JSON3.parse,
        "stringify": JSON3.stringify
      };
    }
  })(commonjsGlobal);
});
/**
 * Module dependencies.
 */

/**
 * Make sure `Object.keys` work for `undefined`
 * values that are still there, like `document.all`.
 * http://lists.w3.org/Archives/Public/public-html/2009Jun/0546.html
 *
 * @api private
 */

function objectKeys$1(val) {
  if (Object.keys) {
    return Object.keys(val);
  }

  return objectKeys(val);
}
/**
 * Module exports.
 */


var utilInspect = inspect;
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 * @license MIT (© Joyent)
 */

/* legacy: obj, showHidden, depth, colors*/

function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) {
    ctx.depth = arguments[2];
  }

  if (arguments.length >= 4) {
    ctx.colors = arguments[3];
  }

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) {
    ctx.showHidden = false;
  }

  if (isUndefined(ctx.depth)) {
    ctx.depth = 2;
  }

  if (isUndefined(ctx.colors)) {
    ctx.colors = false;
  }

  if (isUndefined(ctx.customInspect)) {
    ctx.customInspect = true;
  }

  if (ctx.colors) {
    ctx.stylize = stylizeWithColor;
  }

  return formatValue(ctx, obj, ctx.depth);
} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics


inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeNoColor(str, styleType) {
  return str;
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isUndefined(arg) {
  return arg === void 0;
}

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function isFunction$1(arg) {
  return typeof arg === 'function';
}

function isString(arg) {
  return typeof arg === 'string';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isNull(arg) {
  return arg === null;
}

function hasOwn$4(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function arrayToHash(array) {
  var hash = {};
  foreach(array, function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwn$4(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  foreach(keys, function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction$1(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = objectKeys$1(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden && Object.getOwnPropertyNames) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (indexof(keys, 'message') >= 0 || indexof(keys, 'description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction$1(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isarray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction$1(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = arrayMap(keys, function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = {
    value: value[key]
  };

  if (Object.getOwnPropertyDescriptor) {
    desc = Object.getOwnPropertyDescriptor(value, key) || desc;
  }

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwn$4(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (indexof(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = arrayMap(str.split('\n'), function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + arrayMap(str.split('\n'), function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = json3.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) {
    return ctx.stylize('undefined', 'undefined');
  }

  if (isString(value)) {
    var simple = '\'' + json3.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) {
    return ctx.stylize('' + value, 'number');
  }

  if (isBoolean(value)) {
    return ctx.stylize('' + value, 'boolean');
  } // For some reason typeof null is "object", so special case here.


  if (isNull(value)) {
    return ctx.stylize('null', 'null');
  }
}

function reduceToSingleString(output, base, braces) {
  var length = arrayReduce(output, function (prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) {
    return origin;
  }

  var keys = objectKeys$1(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
}
/*  */


var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject$1(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp$1(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString$4(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn$5(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function identity(_) {
  return _;
};
/**
 * Generate a string containing static keys from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject$1(a);
  var isObjectB = isObject$1(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */


var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {}
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer = false;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject$1(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn$5(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn$5(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn$5(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];

      if (typeof def === 'function') {
        dirs[key] = {
          bind: def,
          update: def
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn$5(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn$5(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn$5(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn$5(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn$5(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn$5(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn$5(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ( true && isObject$1(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean$1(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean$1() {
  var args = [],
      len = arguments.length;

  while (len--) {
    args[len] = arguments[len];
  }

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function timerFunc() {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function timerFunc() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function timerFunc() {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function timerFunc() {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/*  */


var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject$1(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has$1 = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has$1 = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function getNow() {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has$1[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has$1[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has$1[id] == null) {
    has$1[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$1; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject$1(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove, createOnceHandler, vm) {
  var name, def, cur, old, event;

  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn$5(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn$5(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn$5(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function warnReservedPrefix(target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn$5(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn$5(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn$5(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn$5(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */


var uid$2 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$2++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function normalized() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject$1(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject$1(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject$1(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString$4;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn$5(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject$1(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function merged(a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject$1(data.style)) {
    traverse(data.style);
  }

  if (isObject$1(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject$1(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function forceRender(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject$1(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);
var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove() {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove.listeners = listeners;
    return remove;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp$1(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref) {
    if (isDef(parent)) {
      if (isDef(ref)) {
        if (nodeOps.parentNode(ref) === parent) {
          nodeOps.insertBefore(parent, elm, ref);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

function updateAttrs(oldVnode, vnode) {
  if (!oldVnode.data.attrs && !vnode.data.attrs) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (attrs.__ob__) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      elm.setAttribute(key, cur);
    }
  }

  for (key in oldAttrs) {
    if (attrs[key] == null) {
      elm.setAttribute(key);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');
var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject$1(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (!data.staticClass && !data.class && (!oldData || !oldData.staticClass && !oldData.class)) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (transitionClass) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var class_ = {
  create: updateClass,
  update: updateClass
};
var target$1;

function add$1(event, handler, once, capture) {
  if (capture) {
    console.log('bubble phase not supported');
    return;
  }

  if (once) {
    var oldHandler = handler;

    handler = function handler() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      var res = oldHandler.call.apply(oldHandler, [null].concat(args));

      if (res !== null) {
        remove$2(event, null, null, target$1);
      }
    };
  }

  target$1.addEventListener(event, handler);
}

function remove$2(event, handler, capture, _target) {
  if (_target === void 0) _target = target$1;

  _target.removeEventListener(event);
}

function updateDOMListeners(oldVnode, vnode) {
  if (!oldVnode.data.on && !vnode.data.on) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
var normalize = cached(camelize);

function createStyle(oldVnode, vnode) {
  // console.log(`\t\t ===> createStyle(${oldVnode}, ${vnode})`)
  if (!vnode.data.staticStyle) {
    updateStyle(oldVnode, vnode);
    return;
  }

  var elm = vnode.elm;
  var staticStyle = vnode.data.staticStyle;

  for (var name in staticStyle) {
    if (staticStyle[name]) {
      elm.setStyle(normalize(name), staticStyle[name]);
    }
  }

  updateStyle(oldVnode, vnode);
}

function updateStyle(oldVnode, vnode) {
  if (!oldVnode.data.style && !vnode.data.style) {
    return;
  }

  var cur, name;
  var elm = vnode.elm;
  var oldStyle = oldVnode.data.style || {};
  var style = vnode.data.style || {};
  var needClone = style.__ob__; // handle array syntax

  if (Array.isArray(style)) {
    style = vnode.data.style = toObject$1(style);
  } // clone the style for future updates,
  // in case the user mutates the style object in-place.


  if (needClone) {
    style = vnode.data.style = extend({}, style);
  }

  for (name in oldStyle) {
    if (!style[name]) {
      elm.setStyle(normalize(name), '');
    }
  }

  for (name in style) {
    cur = style[name];
    elm.setStyle(normalize(name), cur);
  }
}

function toObject$1(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}

var style = {
  create: createStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def) {
  if (!def) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def === 'object') {
    var res = {};

    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }

    extend(res, def);
    return res;
  } else if (typeof def === 'string') {
    return autoCssTransition(def);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) ;
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) ;
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject$1(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject$1(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = {
  create: _enter,
  activate: _enter,
  remove: function remove(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
};
var platformModules = [attrs, class_, events, style, transition];
var actionBar = {
  template: "\n    <NativeActionBar ~actionBar v-bind=\"$attrs\" v-on=\"$listeners\">\n      <slot />\n    </NativeActionBar>\n  "
};
var android = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (__webpack_require__("tns-core-modules/platform").isAndroid) {
      return children;
    }
  }
};
var frames = new Map();

function setFrame(id, frame) {
  return frames.set(id, frame);
}

function getFrame(id) {
  return frames.get(id);
}

function deleteFrame(id) {
  return frames.delete(id);
}

var hmrChecking = false;

var isHMRChecking = function isHMRChecking() {
  return hmrChecking;
};

var resetHMRChecking = function resetHMRChecking() {
  hmrChecking = false;
};

if (true) {
  module.hot.addStatusHandler(function (status) {
    if (status === 'check') {
      hmrChecking = true;
    }
  });
}

var idCounter = 1;
var frame = {
  props: {
    id: {
      default: 'default'
    },
    transition: {
      type: [String, Object],
      required: false,
      default: null
    },
    'ios:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    'android:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    // injected by the template compiler
    hasRouterView: {
      default: false
    }
  },
  data: function data() {
    return {
      properties: {}
    };
  },
  created: function created() {
    var properties = {};

    if (getFrame(this.$props.id)) {
      properties.id = this.$props.id + idCounter++;
    }

    this.properties = Object.assign({}, this.$attrs, this.$props, properties);
    setFrame(this.properties.id, this);
  },
  destroyed: function destroyed() {
    deleteFrame(this.properties.id);
  },
  render: function render(h) {
    return h('NativeFrame', {
      attrs: this.properties,
      on: this.$listeners
    }, this.$slots.default);
  },
  methods: {
    _getFrame: function _getFrame() {
      return this.$el.nativeView;
    },
    _ensureTransitionObject: function _ensureTransitionObject(transition) {
      if (typeof transition === 'string') {
        return {
          name: transition
        };
      }

      return transition;
    },
    _composeTransition: function _composeTransition(entry) {
      var isAndroid = __webpack_require__("tns-core-modules/platform").isAndroid;

      var platformEntryProp = "transition" + (isAndroid ? 'Android' : 'iOS');
      var entryProp = entry[platformEntryProp] ? platformEntryProp : 'transition';
      var platformProp = (isAndroid ? 'android' : 'ios') + ":transition";
      var prop = this[platformProp] ? platformProp : 'transition';

      if (entry[entryProp]) {
        entry[entryProp] = this._ensureTransitionObject(entry[entryProp]);
      } else if (this[prop]) {
        entry[entryProp] = this._ensureTransitionObject(this[prop]);
      }

      return entry;
    },
    notifyPageMounted: function notifyPageMounted(pageVm) {
      var this$1 = this;
      var options = {
        create: function create() {
          return pageVm.$el.nativeView;
        }
      };
      this.$nextTick(function () {
        if (isHMRChecking()) {
          this$1.replace(options);
        } else {
          this$1.navigate(options);
        }
      });
    },
    replace: function replace(entry) {
      var frame = this._getFrame();

      var page = entry.create();

      entry.create = function () {
        return page;
      };

      var backstackEntry = {
        entry: entry,
        resolvedPage: page,
        navDepth: undefined,
        fragmentTag: undefined
      }; // TODO: this should be in a specific NS Frame method

      if (__webpack_require__("tns-core-modules/platform").isIOS) {
        var viewController = backstackEntry.resolvedPage.ios;

        if (!viewController) {
          throw new Error('Required page does not have a viewController created.');
        }

        viewController['_transition'] = {
          name: 'non-animated'
        };
        viewController['_delegate'] = null;
        frame._ios.controller.delegate = null;
        viewController['_entry'] = backstackEntry;

        if (__webpack_require__("tns-core-modules/utils/utils").ios.MajorVersion > 10) {
          // Reset back button title before pushing view controller to prevent
          // displaying default 'back' title (when NavigationButton custom title is set).
          var barButtonItem = UIBarButtonItem.alloc().initWithTitleStyleTargetAction('', UIBarButtonItemStyle.Plain, null, null);
          viewController.navigationItem.backBarButtonItem = barButtonItem;
        }

        var newControllers = NSMutableArray.alloc().initWithArray(frame._ios.controller.viewControllers);

        if (newControllers.count === 0) {
          throw new Error('Wrong controllers count.');
        } // the code below fixes a phantom animation that appears on the Back button in this case


        viewController.navigationItem.hidesBackButton = frame.backStack.length === 0; // swap the top entry with the new one

        var skippedNavController = newControllers.lastObject;
        skippedNavController.isBackstackSkipped = true;
        newControllers.removeLastObject();
        newControllers.addObject(viewController); // replace the controllers instead of pushing directly

        frame._ios.controller.setViewControllersAnimated(newControllers, false);
      } else {
        var frameId = frame._android.frameId;
        frame._isBack = false;
        backstackEntry.frameId = frameId;

        var manager = frame._getFragmentManager();

        var currentEntry = frame._currentEntry;
        var newFragmentTag = "fragment" + frameId + "[-1]";
        var newFragment = frame.createFragment(backstackEntry, newFragmentTag);
        var animated = false;
        var navigationTransition = null;
        var transaction = manager.beginTransaction();

        __webpack_require__("tns-core-modules/ui/frame/fragment.transitions")._setAndroidFragmentTransitions(animated, navigationTransition, currentEntry, backstackEntry, transaction, frameId);

        transaction.remove(currentEntry.fragment);
        transaction.replace(frame.containerViewId, newFragment, newFragmentTag);
        transaction.commitAllowingStateLoss();
      }

      resetHMRChecking();
    },
    navigate: function navigate(entry, back) {
      var this$1 = this;
      if (back === void 0) back = false;

      var frame = this._getFrame();

      if (back) {
        return frame.goBack(entry);
      } // resolve the page from the entry and attach a navigatedTo listener
      // to fire the frame events


      var page = entry.create();
      page.once('navigatedTo', function () {
        this$1.$emit('navigated', entry);
      });

      var handler = function handler(args) {
        if (args.isBackNavigation) {
          page.off('navigatedFrom', handler);
          this$1.$emit('navigatedBack', entry);
        }
      };

      page.on('navigatedFrom', handler);

      entry.create = function () {
        return page;
      };

      this._composeTransition(entry);

      frame.navigate(entry);
    },
    back: function back(backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      this.navigate(backstackEntry, true);
    }
  }
};
var ios = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (__webpack_require__("tns-core-modules/platform").isIOS) {
      return children;
    }
  }
};
var VUE_VIEW = '__vueVNodeRef__';
var tid = 0;
var vTemplate = {
  props: {
    name: {
      type: String
    },
    if: {
      type: String
    }
  },
  mounted: function mounted() {
    if (!this.$scopedSlots.default) {
      return;
    }

    this.$templates = this.$el.parentNode.$templates = this.$parent.$templates = this.$parent.$templates || new TemplateBag();
    this.$templates.registerTemplate(this.$props.name || (this.$props.if ? "v-template-" + tid++ : 'default'), this.$props.if, this.$scopedSlots.default);
  },
  render: function render(h) {}
};

var TemplateBag = function TemplateBag() {
  this._templateMap = new Map();
};

var prototypeAccessors$1 = {
  selectorFn: {
    configurable: true
  }
};

TemplateBag.prototype.registerTemplate = function registerTemplate(name, condition, scopedFn) {
  this._templateMap.set(name, {
    scopedFn: scopedFn,
    conditionFn: this.getConditionFn(condition),
    keyedTemplate: new VueKeyedTemplate(name, scopedFn)
  });
};

prototypeAccessors$1.selectorFn.get = function () {
  var self = this;
  return function templateSelectorFn(item) {
    var iterator = self._templateMap.entries();

    var curr;

    while (curr = iterator.next().value) {
      var name = curr[0];
      var conditionFn = curr[1].conditionFn;

      try {
        if (conditionFn(item)) {
          return name;
        }
      } catch (err) {}
    }

    return 'default';
  };
};

TemplateBag.prototype.getConditionFn = function getConditionFn(condition) {
  return new Function('ctx', "with(ctx) { return !!(" + condition + ") }");
};

TemplateBag.prototype.getKeyedTemplate = function getKeyedTemplate(name) {
  return this._templateMap.get(name).keyedTemplate;
};

TemplateBag.prototype.patchTemplate = function patchTemplate(name, context, oldVnode) {
  var vnode = this._templateMap.get(name).scopedFn(context); // in 2.6 scopedFn returns an array!


  if (Array.isArray(vnode)) {
    vnode = vnode[0];
  }

  var nativeView = patch(oldVnode, vnode).nativeView;
  nativeView[VUE_VIEW] = vnode;
  return nativeView;
};

TemplateBag.prototype.getAvailable = function getAvailable() {
  return Array.from(this._templateMap.keys());
};

TemplateBag.prototype.getKeyedTemplates = function getKeyedTemplates() {
  return Array.from(this._templateMap.values()).map(function (ref) {
    var keyedTemplate = ref.keyedTemplate;
    return keyedTemplate;
  });
};

Object.defineProperties(TemplateBag.prototype, prototypeAccessors$1);

var VueKeyedTemplate = function VueKeyedTemplate(key, scopedFn) {
  this._key = key;
  this._scopedFn = scopedFn;
};

var prototypeAccessors$1$1 = {
  key: {
    configurable: true
  }
};

prototypeAccessors$1$1.key.get = function () {
  return this._key;
};

VueKeyedTemplate.prototype.createView = function createView() {
  // we are returning null because we don't have the data here
  // the view will be created in the `patchTemplate` method above.
  // see https://github.com/nativescript-vue/nativescript-vue/issues/229#issuecomment-390330474
  return null;
};

Object.defineProperties(VueKeyedTemplate.prototype, prototypeAccessors$1$1);
var listView = {
  props: {
    items: {
      type: [Array, Object],
      validator: function validator(val) {
        var ObservableArray = __webpack_require__("tns-core-modules/data/observable-array").ObservableArray;

        return Array.isArray(val) || val instanceof ObservableArray;
      },
      required: true
    },
    '+alias': {
      type: String,
      default: 'item'
    },
    '+index': {
      type: String
    }
  },
  template: "\n    <NativeListView\n      ref=\"listView\"\n      :items=\"items\"\n      v-bind=\"$attrs\"\n      v-on=\"listeners\"\n      @itemTap=\"onItemTap\"\n      @itemLoading=\"onItemLoading\"\n    >\n      <slot />\n    </NativeListView>\n  ",
  watch: {
    items: {
      handler: function handler(newVal) {
        this.$refs.listView.setAttribute('items', newVal);
        this.refresh();
      },
      deep: true
    }
  },
  created: function created() {
    // we need to remove the itemTap handler from a clone of the $listeners
    // object because we are emitting the event ourselves with added data.
    var listeners = extend({}, this.$listeners);
    delete listeners.itemTap;
    this.listeners = listeners;
    this.getItemContext = getItemContext.bind(this);
  },
  mounted: function mounted() {
    var this$1 = this;

    if (!this.$templates) {
      return;
    }

    this.$refs.listView.setAttribute('_itemTemplatesInternal', this.$templates.getKeyedTemplates());
    this.$refs.listView.setAttribute('_itemTemplateSelector', function (item, index) {
      return this$1.$templates.selectorFn(this$1.getItemContext(item, index));
    });
  },
  methods: {
    onItemTap: function onItemTap(args) {
      this.$emit('itemTap', extend({
        item: this.getItem(args.index)
      }, args));
    },
    onItemLoading: function onItemLoading(args) {
      if (!this.$templates) {
        return;
      }

      var index = args.index;
      var items = args.object.items;
      var currentItem = this.getItem(index);

      var name = args.object._itemTemplateSelector(currentItem, index, items);

      var context = this.getItemContext(currentItem, index);
      var oldVnode = args.view && args.view[VUE_VIEW];
      args.view = this.$templates.patchTemplate(name, context, oldVnode);
    },
    refresh: function refresh() {
      this.$refs.listView.nativeView.refresh();
    },
    getItem: function getItem(idx) {
      return typeof this.items.getItem === 'function' ? this.items.getItem(idx) : this.items[idx];
    }
  }
};

function getItemContext(item, index, alias, index_alias) {
  var obj;
  if (alias === void 0) alias = this.$props['+alias'];
  if (index_alias === void 0) index_alias = this.$props['+index'];
  return obj = {}, obj[alias] = item, obj[index_alias || '$index'] = index, obj.$even = index % 2 === 0, obj.$odd = index % 2 !== 0, obj;
}

function getFrameInstance(frame) {
  // get the frame that we need to navigate
  // this can be a frame id (String)
  // a Vue ref to a frame
  // a Frame ViewNode
  // or a Frame instance
  if (isObject$1(frame) && isDef(frame.$el)) {
    frame = frame.$el.nativeView;
  } else if (isPrimitive(frame)) {
    frame = __webpack_require__("tns-core-modules/ui/frame").getFrameById(frame);
  } else if (isDef(frame.nativeView)) {
    frame = frame.nativeView;
  } // finally get the component instance for this frame


  return getFrame(frame.id);
}

function findParentNavigationEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'NavigationEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var NavigatorPlugin = {
  install: function install(Vue) {
    Vue.prototype.$navigateBack = function (options, backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      var navEntry = findParentNavigationEntry(this);
      var defaultOptions = {
        frame: navEntry ? navEntry.$options.frame : 'default'
      };
      options = Object.assign({}, defaultOptions, options);
      var frame = getFrameInstance(options.frame);
      frame.back(backstackEntry);
    };

    Vue.prototype.$navigateTo = function (component, options) {
      var this$1 = this;
      var defaultOptions = {
        frame: 'default'
      }; // build options object with defaults

      options = Object.assign({}, defaultOptions, options);
      return new Promise(function (resolve) {
        var frame = getFrameInstance(options.frame);
        var navEntryInstance = new Vue({
          name: 'NavigationEntry',
          parent: this$1.$root,
          frame: frame,
          props: {
            frame: {
              default: frame.id
            }
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var page = navEntryInstance.$mount().$el.nativeView;

        var handler = function handler(args) {
          if (args.isBackNavigation) {
            page.off('navigatedFrom', handler);
            navEntryInstance.$destroy();
          }
        };

        page.on('navigatedFrom', handler); // ensure that the navEntryInstance vue instance is destroyed when the
        // page is disposed (clearHistory: true for example)

        var dispose = page.disposeNativeView;

        page.disposeNativeView = function () {
          var args = [],
              len = arguments.length;

          while (len--) {
            args[len] = arguments[len];
          }

          navEntryInstance.$destroy();
          dispose.call(page, args);
        };

        frame.navigate(Object.assign({}, options, {
          create: function create() {
            return page;
          }
        }));
        resolve(page);
      });
    };
  }
};
var PAGE_REF = '__vuePageRef__';
var page = {
  render: function render(h) {
    return h('NativePage', {
      attrs: this.$attrs,
      on: this.$listeners
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$el.nativeView[PAGE_REF] = this;
    var frame = null;

    if (isHMRChecking() && !__webpack_require__("tns-core-modules/platform").isAndroid) {
      var navEntry = findParentNavigationEntry(this);
      var options = {
        frame: navEntry ? navEntry.$options.frame : 'default'
      };
      frame = getFrameInstance(options.frame);
    } else {
      frame = this._findParentFrame();
    }

    if (frame) {
      frame.notifyPageMounted(this);
    }

    var handler = function handler(e) {
      if (e.isBackNavigation) {
        this$1.$el.nativeView.off('navigatedFrom', handler);
        this$1.$parent.$destroy();
      }
    };

    this.$el.nativeView.on('navigatedFrom', handler); // ensure that the parent vue instance is destroyed when the
    // page is disposed (clearHistory: true for example)

    var dispose = this.$el.nativeView.disposeNativeView;

    this.$el.nativeView.disposeNativeView = function () {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      this$1.$parent.$destroy();
      dispose.call(this$1.$el.nativeView, args);
    };
  },
  methods: {
    _findParentFrame: function _findParentFrame() {
      var frame = this.$parent;

      while (frame && frame.$options.name !== 'Frame') {
        frame = frame.$parent;
      }

      return frame;
    }
  }
};
var tabView = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeTabView', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTab: function registerTab(tabView) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabView]));
    }
  }
};
var tabViewItem = {
  template: "<NativeTabViewItem><slot /></NativeTabViewItem>",
  mounted: function mounted() {
    if (this.$el.childNodes.length > 1) {
      warn('TabViewItem should contain only 1 root element', this);
    }

    var _nativeView = this.$el.nativeView;
    _nativeView.view = this.$el.childNodes[0].nativeView;
    this.$parent.registerTab(_nativeView);
  }
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function isNotTextNode(c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function isVShowDirective(d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
var elementMap = {};
var nativeRegExp = /Native/gi;
var dashRegExp = /-/g;
var defaultViewMeta = {
  skipAddToDom: false,
  isUnaryTag: false,
  tagNamespace: '',
  canBeLeftOpenTag: false,
  model: null,
  component: null
};

function normalizeElementName(elementName) {
  return "native" + elementName.replace(nativeRegExp, '').replace(dashRegExp, '').toLowerCase();
}

function registerElement(elementName, resolver, meta) {
  var normalizedName = normalizeElementName(elementName);
  meta = Object.assign({}, defaultViewMeta, meta);

  if (elementMap[normalizedName]) {
    throw new Error("Element for " + elementName + " already registered.");
  }

  if (!meta.component) {
    // if no Vue component is passed, wrap the simpler vue component
    // which bind the events and attributes to the NS one
    meta.component = {
      functional: true,
      model: meta.model,
      render: function render(h, ref) {
        var data = ref.data;
        var children = ref.children;
        return h(normalizedName, data, children);
      }
    };
  }

  meta.component.name = elementName;
  var entry = {
    resolver: resolver,
    meta: meta
  };
  elementMap[normalizedName] = entry;
}

function getElementMap() {
  return elementMap;
}

function getViewClass(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var entry = elementMap[normalizedName];

  if (!entry) {
    throw new TypeError("No known component for element " + elementName + ".");
  }

  try {
    return entry.resolver();
  } catch (e) {
    throw new TypeError("Could not load view for: " + elementName + ". " + e);
  }
}

function getViewMeta(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var meta = defaultViewMeta;
  var entry = elementMap[normalizedName];

  if (entry && entry.meta) {
    meta = entry.meta;
  }

  return meta;
}

function isKnownView(elementName) {
  return elementMap[normalizeElementName(elementName)];
}

registerElement('ActionBar', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").ActionBar;
}, {
  removeChild: function removeChild(parent, child) {
    try {
      parent.nativeView._removeView(child.nativeView);
    } catch (e) {// ignore exception - child is likely already removed/replaced
      // fixes #76
    }
  },
  component: actionBar
});
registerElement('ActionItem', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").ActionItem;
});
registerElement('android', null, {
  component: android
});
registerElement('ios', null, {
  component: ios
});
registerElement('ListView', function () {
  return __webpack_require__("tns-core-modules/ui/list-view").ListView;
}, {
  component: listView
});
registerElement('NavigationButton', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").NavigationButton;
});
registerElement('TabView', function () {
  return __webpack_require__("tns-core-modules/ui/tab-view").TabView;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: tabView
});
registerElement('TabViewItem', function () {
  return __webpack_require__("tns-core-modules/ui/tab-view").TabViewItem;
}, {
  skipAddToDom: true,
  component: tabViewItem
});
registerElement('transition', null, {
  component: Transition
});
registerElement('v-template', null, {
  component: vTemplate
}); // NS components which uses the automatic registerElement Vue wrapper
// as they do not need any special logic

registerElement('Label', function () {
  return __webpack_require__("tns-core-modules/ui/label").Label;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('DatePicker', function () {
  return __webpack_require__("tns-core-modules/ui/date-picker").DatePicker;
}, {
  model: {
    prop: 'date',
    event: 'dateChange'
  }
});
registerElement('AbsoluteLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/absolute-layout").AbsoluteLayout;
});
registerElement('ActivityIndicator', function () {
  return __webpack_require__("tns-core-modules/ui/activity-indicator").ActivityIndicator;
});
registerElement('Border', function () {
  return __webpack_require__("tns-core-modules/ui/border").Border;
});
registerElement('Button', function () {
  return __webpack_require__("tns-core-modules/ui/button").Button;
});
registerElement('ContentView', function () {
  return __webpack_require__("tns-core-modules/ui/content-view").ContentView;
});
registerElement('DockLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/dock-layout").DockLayout;
});
registerElement('GridLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/grid-layout").GridLayout;
});
registerElement('HtmlView', function () {
  return __webpack_require__("tns-core-modules/ui/html-view").HtmlView;
});
registerElement('Image', function () {
  return __webpack_require__("tns-core-modules/ui/image").Image;
});
registerElement('img', function () {
  return __webpack_require__("tns-core-modules/ui/image").Image;
});
registerElement('ListPicker', function () {
  return __webpack_require__("tns-core-modules/ui/list-picker").ListPicker;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('Page', function () {
  return __webpack_require__("tns-core-modules/ui/page").Page;
}, {
  skipAddToDom: true,
  component: page
});
registerElement('Placeholder', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
});
registerElement('Progress', function () {
  return __webpack_require__("tns-core-modules/ui/progress").Progress;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('ProxyViewContainer', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}); // registerElement(
//   'Repeater',
//   () => require('tns-core-modules/ui/repeater').Repeater
// )

registerElement('ScrollView', function () {
  return __webpack_require__("tns-core-modules/ui/scroll-view").ScrollView;
});
registerElement('SearchBar', function () {
  return __webpack_require__("tns-core-modules/ui/search-bar").SearchBar;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('SegmentedBar', function () {
  return __webpack_require__("tns-core-modules/ui/segmented-bar").SegmentedBar;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('SegmentedBarItem', function () {
  return __webpack_require__("tns-core-modules/ui/segmented-bar").SegmentedBarItem;
});
registerElement('Slider', function () {
  return __webpack_require__("tns-core-modules/ui/slider").Slider;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('StackLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/stack-layout").StackLayout;
});
registerElement('FlexboxLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/flexbox-layout").FlexboxLayout;
});
registerElement('Switch', function () {
  return __webpack_require__("tns-core-modules/ui/switch").Switch;
}, {
  model: {
    prop: 'checked',
    event: 'checkedChange'
  }
});
registerElement('TextField', function () {
  return __webpack_require__("tns-core-modules/ui/text-field").TextField;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TextView', function () {
  return __webpack_require__("tns-core-modules/ui/text-view").TextView;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TimePicker', function () {
  return __webpack_require__("tns-core-modules/ui/time-picker").TimePicker;
}, {
  model: {
    prop: 'time',
    event: 'timeChange'
  }
});
registerElement('WebView', function () {
  return __webpack_require__("tns-core-modules/ui/web-view").WebView;
});
registerElement('WrapLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/wrap-layout").WrapLayout;
});
registerElement('FormattedString', function () {
  return __webpack_require__("tns-core-modules/text/formatted-string").FormattedString;
});
registerElement('Span', function () {
  return __webpack_require__("tns-core-modules/text/span").Span;
});
registerElement('DetachedContainer', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('DetachedText', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
}, {
  skipAddToDom: true
});
registerElement('Comment', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
});
registerElement('Document', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('Frame', function () {
  return __webpack_require__("tns-core-modules/ui/frame").Frame;
}, {
  insertChild: function insertChild(parentNode, childNode, atIndex) {// if (normalizeElementName(childNode.tagName) === 'nativepage') {
    // parentNode.nativeView.navigate({ create: () => childNode.nativeView })
    // }
  },
  component: frame
});
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};

function isObjectObject(o) {
  return isobject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
}

var isPlainObject$1 = function isPlainObject(o) {
  var ctor, prot;

  if (isObjectObject(o) === false) {
    return false;
  } // If has modified constructor


  ctor = o.constructor;

  if (typeof ctor !== 'function') {
    return false;
  } // If has modified prototype


  prot = ctor.prototype;

  if (isObjectObject(prot) === false) {
    return false;
  } // If constructor does not have an Object-specific method


  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  } // Most likely a plain Object


  return true;
};

function set$1(target, path, value, options) {
  if (!isObject$2(target)) {
    return target;
  }

  var opts = options || {};
  var isArray = Array.isArray(path);

  if (!isArray && typeof path !== 'string') {
    return target;
  }

  var merge = opts.merge;

  if (merge && typeof merge !== 'function') {
    merge = Object.assign;
  }

  var keys = isArray ? path : split(path, opts);
  var len = keys.length;
  var orig = target;

  if (!options && keys.length === 1) {
    result(target, keys[0], value, merge);
    return target;
  }

  for (var i = 0; i < len; i++) {
    var prop = keys[i];

    if (!isObject$2(target[prop])) {
      target[prop] = {};
    }

    if (i === len - 1) {
      result(target, prop, value, merge);
      break;
    }

    target = target[prop];
  }

  return orig;
}

function result(target, path, value, merge) {
  if (merge && isPlainObject$1(target[path]) && isPlainObject$1(value)) {
    target[path] = merge({}, target[path], value);
  } else {
    target[path] = value;
  }
}

function split(path, options) {
  var id = createKey(path, options);

  if (set$1.memo[id]) {
    return set$1.memo[id];
  }

  var char = options && options.separator ? options.separator : '.';
  var keys = [];
  var res = [];

  if (options && typeof options.split === 'function') {
    keys = options.split(path);
  } else {
    keys = path.split(char);
  }

  for (var i = 0; i < keys.length; i++) {
    var prop = keys[i];

    while (prop && prop.slice(-1) === '\\' && keys[i + 1]) {
      prop = prop.slice(0, -1) + char + keys[++i];
    }

    res.push(prop);
  }

  set$1.memo[id] = res;
  return res;
}

function createKey(pattern, options) {
  var id = pattern;

  if (typeof options === 'undefined') {
    return id + '';
  }

  var keys = Object.keys(options);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    id += ';' + key + '=' + String(options[key]);
  }

  return id;
}

function isObject$2(val) {
  switch (typeof val) {
    case 'null':
      return false;

    case 'object':
      return true;

    case 'function':
      return true;

    default:
      {
        return false;
      }
  }
}

set$1.memo = {};
var setValue = set$1;

function isView(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/core/view").View;
}

function isLayout(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/layouts/layout-base").LayoutBase;
}

function isContentView(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/content-view").ContentView;
}

function insertChild(parentNode, childNode, atIndex) {
  if (atIndex === void 0) atIndex = -1;

  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.insertChild === 'function') {
    return parentNode.meta.insertChild(parentNode, childNode, atIndex);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    if (childView.parent === parentView) {
      var index = parentView.getChildIndex(childView);

      if (index !== -1) {
        parentView.removeChild(childView);
      }
    }

    if (atIndex !== -1) {
      parentView.insertChild(childView, atIndex);
    } else {
      parentView.addChild(childView);
    }
  } else if (isContentView(parentView)) {
    if (childNode.nodeType === 8) {
      parentView._addView(childView, atIndex);
    } else {
      parentView.content = childView;
    }
  } else if (parentView && parentView._addChildFromBuilder) {
    parentView._addChildFromBuilder(childNode._nativeView.constructor.name, childView);
  }
}

function removeChild(parentNode, childNode) {
  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.removeChild === 'function') {
    return parentNode.meta.removeChild(parentNode, childNode);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    parentView.removeChild(childView);
  } else if (isContentView(parentView)) {
    if (parentView.content === childView) {
      parentView.content = null;
    }

    if (childNode.nodeType === 8) {
      parentView._removeView(childView);
    }
  } else if (isView(parentView)) {
    parentView._removeView(childView);
  }
}

var XML_ATTRIBUTES = Object.freeze(['style', 'rows', 'columns', 'fontAttributes']);

var ViewNode = function ViewNode() {
  this.nodeType = null;
  this._tagName = null;
  this.parentNode = null;
  this.childNodes = [];
  this.prevSibling = null;
  this.nextSibling = null;
  this._ownerDocument = null;
  this._nativeView = null;
  this._meta = null;
  /* istanbul ignore next
   * make vue happy :)
   */

  this.hasAttribute = this.removeAttribute = function () {
    return false;
  };
};

var prototypeAccessors$2 = {
  tagName: {
    configurable: true
  },
  firstChild: {
    configurable: true
  },
  lastChild: {
    configurable: true
  },
  nativeView: {
    configurable: true
  },
  meta: {
    configurable: true
  },
  ownerDocument: {
    configurable: true
  }
};
/* istanbul ignore next */

ViewNode.prototype.toString = function toString() {
  return this.constructor.name + "(" + this.tagName + ")";
};

prototypeAccessors$2.tagName.set = function (name) {
  this._tagName = normalizeElementName(name);
};

prototypeAccessors$2.tagName.get = function () {
  return this._tagName;
};

prototypeAccessors$2.firstChild.get = function () {
  return this.childNodes.length ? this.childNodes[0] : null;
};

prototypeAccessors$2.lastChild.get = function () {
  return this.childNodes.length ? this.childNodes[this.childNodes.length - 1] : null;
};

prototypeAccessors$2.nativeView.get = function () {
  return this._nativeView;
};

prototypeAccessors$2.nativeView.set = function (view) {
  if (this._nativeView) {
    throw new Error("Can't override native view.");
  }

  this._nativeView = view;
};

prototypeAccessors$2.meta.get = function () {
  if (this._meta) {
    return this._meta;
  }

  return this._meta = getViewMeta(this.tagName);
};
/* istanbul ignore next */


prototypeAccessors$2.ownerDocument.get = function () {
  if (this._ownerDocument) {
    return this._ownerDocument;
  }

  var el = this;

  while ((el = el.parentNode).nodeType !== 9) {// do nothing
  }

  return this._ownerDocument = el;
};

ViewNode.prototype.getAttribute = function getAttribute(key) {
  return this.nativeView[key];
};
/* istanbul ignore next */


ViewNode.prototype.setAttribute = function setAttribute(key, value) {
  var ref = __webpack_require__("tns-core-modules/platform");

  var isAndroid = ref.isAndroid;
  var isIOS = ref.isIOS;
  var nv = this.nativeView;

  try {
    if (XML_ATTRIBUTES.indexOf(key) !== -1) {
      nv[key] = value;
    } else {
      // detect expandable attrs for boolean values
      // See https://vuejs.org/v2/guide/components-props.html#Passing-a-Boolean
      if (__webpack_require__("tns-core-modules/utils/types").isBoolean(nv[key]) && value === '') {
        value = true;
      }

      if (isAndroid && key.startsWith('android:')) {
        setValue(nv, key.substr(8), value);
      } else if (isIOS && key.startsWith('ios:')) {
        setValue(nv, key.substr(4), value);
      } else if (key.endsWith('.decode')) {
        setValue(nv, key.slice(0, -7), __webpack_require__("tns-core-modules/xml").XmlParser._dereferenceEntities(value));
      } else {
        setValue(nv, key, value);
      }
    }
  } catch (e) {// ignore
  }
};
/* istanbul ignore next */


ViewNode.prototype.setStyle = function setStyle(property, value) {
  if (!(value = value.trim()).length) {
    return;
  }

  if (property.endsWith('Align')) {
    // NativeScript uses Alignment instead of Align, this ensures that text-align works
    property += 'ment';
  }

  this.nativeView.style[property] = value;
};
/* istanbul ignore next */


ViewNode.prototype.setText = function setText(text) {
  if (this.nodeType === 3) {
    this.parentNode.setText(text);
  } else {
    this.setAttribute('text', text);
  }
};
/* istanbul ignore next */


ViewNode.prototype.addEventListener = function addEventListener(event, handler) {
  this.nativeView.on(event, handler);
};
/* istanbul ignore next */


ViewNode.prototype.removeEventListener = function removeEventListener(event) {
  this.nativeView.off(event);
};

ViewNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
  if (!childNode) {
    throw new Error("Can't insert child.");
  } // in some rare cases insertBefore is called with a null referenceNode
  // this makes sure that it get's appended as the last child


  if (!referenceNode) {
    return this.appendChild(childNode);
  }

  if (referenceNode.parentNode !== this) {
    throw new Error("Can't insert child, because the reference node has a different parent.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't insert child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  var index = this.childNodes.indexOf(referenceNode);
  childNode.parentNode = this;
  childNode.nextSibling = referenceNode;
  childNode.prevSibling = this.childNodes[index - 1];
  referenceNode.prevSibling = childNode;
  this.childNodes.splice(index, 0, childNode);
  insertChild(this, childNode, index);
};

ViewNode.prototype.appendChild = function appendChild(childNode) {
  if (!childNode) {
    throw new Error("Can't append child.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't append child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  childNode.parentNode = this;

  if (this.lastChild) {
    childNode.prevSibling = this.lastChild;
    this.lastChild.nextSibling = childNode;
  }

  this.childNodes.push(childNode);
  insertChild(this, childNode, this.childNodes.length - 1);
};

ViewNode.prototype.removeChild = function removeChild$1(childNode) {
  if (!childNode) {
    throw new Error("Can't remove child.");
  }

  if (!childNode.parentNode) {
    throw new Error("Can't remove child, because it has no parent.");
  }

  if (childNode.parentNode !== this) {
    throw new Error("Can't remove child, because it has a different parent.");
  }

  childNode.parentNode = null;

  if (childNode.prevSibling) {
    childNode.prevSibling.nextSibling = childNode.nextSibling;
  }

  if (childNode.nextSibling) {
    childNode.nextSibling.prevSibling = childNode.prevSibling;
  } // reset the prevSibling and nextSibling. If not, a keep-alived component will
  // still have a filled nextSibling attribute so vue will not
  // insert the node again to the parent. See #220


  childNode.prevSibling = null;
  childNode.nextSibling = null;
  this.childNodes = this.childNodes.filter(function (node) {
    return node !== childNode;
  });
  removeChild(this, childNode);
};

Object.defineProperties(ViewNode.prototype, prototypeAccessors$2);
var VUE_ELEMENT_REF = '__vue_element_ref__';

var ElementNode =
/*@__PURE__*/
function (ViewNode) {
  function ElementNode(tagName) {
    ViewNode.call(this);
    this.nodeType = 1;
    this.tagName = tagName;
    var viewClass = getViewClass(tagName);
    this._nativeView = new viewClass();
    this._nativeView[VUE_ELEMENT_REF] = this;
  }

  if (ViewNode) ElementNode.__proto__ = ViewNode;
  ElementNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  ElementNode.prototype.constructor = ElementNode;

  ElementNode.prototype.appendChild = function appendChild(childNode) {
    ViewNode.prototype.appendChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
    ViewNode.prototype.insertBefore.call(this, childNode, referenceNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.removeChild = function removeChild(childNode) {
    ViewNode.prototype.removeChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText('');
    }
  };

  return ElementNode;
}(ViewNode);

var CommentNode =
/*@__PURE__*/
function (ElementNode) {
  function CommentNode(text) {
    ElementNode.call(this, 'comment');
    this.nodeType = 8;
    this.text = text;
  }

  if (ElementNode) CommentNode.__proto__ = ElementNode;
  CommentNode.prototype = Object.create(ElementNode && ElementNode.prototype);
  CommentNode.prototype.constructor = CommentNode;
  return CommentNode;
}(ElementNode);

var TextNode =
/*@__PURE__*/
function (ViewNode) {
  function TextNode(text) {
    ViewNode.call(this);
    this.nodeType = 3;
    this.text = text;
    this._meta = {
      skipAddToDom: true
    };
  }

  if (ViewNode) TextNode.__proto__ = ViewNode;
  TextNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  TextNode.prototype.constructor = TextNode;

  TextNode.prototype.setText = function setText(text) {
    this.text = text;
    this.parentNode.setText(text);
  };

  return TextNode;
}(ViewNode);

var DocumentNode =
/*@__PURE__*/
function (ViewNode) {
  function DocumentNode() {
    ViewNode.call(this);
    this.nodeType = 9;
    this.documentElement = new ElementNode('document'); // make static methods accessible via this

    this.createComment = this.constructor.createComment;
    this.createElement = this.constructor.createElement;
    this.createElementNS = this.constructor.createElementNS;
    this.createTextNode = this.constructor.createTextNode;
  }

  if (ViewNode) DocumentNode.__proto__ = ViewNode;
  DocumentNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  DocumentNode.prototype.constructor = DocumentNode;

  DocumentNode.createComment = function createComment(text) {
    return new CommentNode(text);
  };

  DocumentNode.createElement = function createElement(tagName) {
    return new ElementNode(tagName);
  };

  DocumentNode.createElementNS = function createElementNS(namespace, tagName) {
    return new ElementNode(namespace + ':' + tagName);
  };

  DocumentNode.createTextNode = function createTextNode(text) {
    return new TextNode(text);
  };

  return DocumentNode;
}(ViewNode);

var isReservedTag = makeMap('template', true);

var _Vue;

function setVue(Vue) {
  _Vue = Vue;
}

var canBeLeftOpenTag = function canBeLeftOpenTag(el) {
  return getViewMeta(el).canBeLeftOpenTag;
};

var isUnaryTag = function isUnaryTag(el) {
  return getViewMeta(el).isUnaryTag;
};

function mustUseProp() {// console.log('mustUseProp')
}

function getTagNamespace(el) {
  return getViewMeta(el).tagNamespace;
}

function isUnknownElement(el) {
  return !isKnownView(el);
}

var VUE_VERSION = global.process.env.VUE_VERSION || '2.6.10';
var NS_VUE_VERSION = global.process.env.NS_VUE_VERSION || '2.3.0';
var infoTrace = once(function () {
  console.log("NativeScript-Vue has \"Vue.config.silent\" set to true, to see output logs set it to false.");
});

function trace(message) {
  if (_Vue && _Vue.config.silent) {
    return infoTrace();
  }

  console.log("{NSVue (Vue: " + VUE_VERSION + " | NSVue: " + NS_VUE_VERSION + ")} -> " + message);
}

var namespaceMap = {};

function createElement$1(tagName, vnode) {
  trace("CreateElement(" + tagName + ")");
  return DocumentNode.createElement(tagName);
}

function createElementNS(namespace, tagName) {
  trace("CreateElementNS(" + namespace + "#" + tagName + ")");
  return DocumentNode.createElementNS(namespace, tagName);
}

function createTextNode(text) {
  trace("CreateTextNode(" + text + ")");
  return DocumentNode.createTextNode(text);
}

function createComment(text) {
  trace("CreateComment(" + text + ")");
  return DocumentNode.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  trace("InsertBefore(" + parentNode + ", " + newNode + ", " + referenceNode + ")");
  return parentNode.insertBefore(newNode, referenceNode);
}

function removeChild$1(node, child) {
  trace("RemoveChild(" + node + ", " + child + ")");
  return node.removeChild(child);
}

function appendChild(node, child) {
  trace("AppendChild(" + node + ", " + child + ")");
  return node.appendChild(child);
}

function parentNode(node) {
  trace("ParentNode(" + node + ") -> " + node.parentNode);
  return node.parentNode;
}

function nextSibling(node) {
  trace("NextSibling(" + node + ") -> " + node.nextSibling);
  return node.nextSibling;
}

function tagName(elementNode) {
  trace("TagName(" + elementNode + ") -> " + elementNode.tagName);
  return elementNode.tagName;
}

function setTextContent(node, text) {
  trace("SetTextContent(" + node + ", " + text + ")");
  node.setText(text);
}

function setAttribute(node, key, val) {
  trace("SetAttribute(" + node + ", " + key + ", " + val + ")");
  node.setAttribute(key, val);
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  namespaceMap: namespaceMap,
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild$1,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setAttribute: setAttribute,
  setStyleScope: setStyleScope
});
var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
var he = {
  decode: decode
};

function decode(html) {
  // todo?
  return html;
}
/*  */


var isUnaryTag$1 = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag$1 = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + unicodeRegExp.source + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being pased as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/; // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag = options.isUnaryTag || no;
  var canBeLeftOpenTag = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if ( true && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"", {
          start: index + html.length
        });
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };

      if ( true && options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs,
        start: match.start,
        end: match.end
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    } // Find the closest opened tag of the same type


    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();

      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ( true && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.", {
            start: stack[i].start,
            end: stack[i].end
          });
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */


var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: JSON.stringify(value),
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */

/* eslint-disable no-unused-vars */


function baseWarn(msg, range) {
  console.error("[Vue compiler]: " + msg);
}
/* eslint-enable no-unused-vars */


function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
}

function addAttr(el, name, value, range, dynamic) {
  var attrs = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
  attrs.push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({
    name: name,
    value: value
  }, range));
}

function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker(symbol, name, dynamic) {
  return dynamic ? "_p(" + name + ",\"" + symbol + "\")" : symbol + name; // mark the event as captured
}

function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if ( true && warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.', range);
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;

  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({
    value: value.trim(),
    dynamic: dynamic
  }, range);

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr(el, name) {
  return el.rawAttrsMap[':' + name] || el.rawAttrsMap['v-bind:' + name] || el.rawAttrsMap[name];
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}

function getAndRemoveAttrByRegex(el, name) {
  var list = el.attrsList;

  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];

    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr;
    }
  }
}

function rangeSetItem(item, range) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }

    if (range.end != null) {
      item.end = range.end;
    }
  }

  return item;
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;
var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
var slotRE = /^v-slot(:|$)|^#/;
var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;
var invalidAttributeRE = /[\s"'<>\/=]/;
var decodeHTMLCached = cached(he.decode);
var emptySlotScopeToken = "_empty_"; // configurable state

var warn$1;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$1 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;

  maybeComponent = function maybeComponent(el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg, range) {
    if (!warned) {
      warned = true;
      warn$1(msg, range);
    }
  }

  function closeElement(element) {
    trimEndingWhitespace(element);

    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    } // tree management


    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        if (true) {
          checkRootConstraints(element);
        }

        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (true) {
        warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.", {
          start: element.start
        });
      }
    }

    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }

        currentParent.children.push(element);
        element.parent = currentParent;
      }
    } // final children cleanup
    // filter out scoped slots


    element.children = element.children.filter(function (c) {
      return !c.slotScope;
    }); // remove trailing whitespace node again

    trimEndingWhitespace(element); // check pre state

    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace(el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;

      while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === ' ') {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints(el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.', {
        start: el.start
      });
    }

    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.', el.rawAttrsMap['v-for']);
    }
  }

  parseHTML(template, {
    warn: warn$1,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start(tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (true) {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated;
          }, {});
        }

        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$1("Invalid dynamic argument expression: attribute names cannot contain " + "spaces, quotes, <, >, / or =.", {
              start: attr.start + attr.name.indexOf("["),
              end: attr.start + attr.name.length
            });
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         true && warn$1('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.', {
          start: element.start
        });
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;

        if (true) {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end(tag, start, end$1) {
      var element = stack[stack.length - 1]; // pop stack

      stack.length -= 1;
      currentParent = stack[stack.length - 1];

      if ( true && options.outputSourceRange) {
        element.end = end$1;
      }

      closeElement(element);
    },
    chars: function chars(text, start, end) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.', {
              start: start
            });
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.", {
              start: start
            });
          }
        }

        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;

      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }

      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }

        var res;
        var child;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }

        if (child) {
          if ( true && options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }

          children.push(child);
        }
      }
    },
    comment: function comment(text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };

        if ( true && options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }

        currentParent.children.push(child);
      }
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var list = el.attrsList;
  var len = list.length;

  if (len) {
    var attrs = el.attrs = new Array(len);

    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };

      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
  return element;
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    if (true) {
      if (el.tag === 'template') {
        warn$1("<template> cannot be keyed. Place the key on real elements instead.", getRawBindingAttr(el, 'key'));
      }

      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;

        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$1("Do not use v-for index as key on <transition-group> children, " + "this is the same as not using keys.", getRawBindingAttr(el, 'key'), true
          /* tip */
          );
        }
      }
    }

    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else if (true) {
      warn$1("Invalid v-for expression: " + exp, el.rawAttrsMap['v-for']);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$1("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.", el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if ( true && children[i].text !== ' ') {
        warn$1("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.", children[i]);
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once = getAndRemoveAttr(el, 'v-once');

  if (once != null) {
    el.once = true;
  }
} // handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">


function processSlotContent(el) {
  var slotScope;

  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */

    if ( true && slotScope) {
      warn$1("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", el.rawAttrsMap['scope'], true);
    }

    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
    /* istanbul ignore if */
    if ( true && el.attrsMap['v-for']) {
      warn$1("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", el.rawAttrsMap['slot-scope'], true);
    }

    el.slotScope = slotScope;
  } // slot="xxx"


  var slotTarget = getBindingAttr(el, 'slot');

  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']); // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.

    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  } // 2.6 v-slot syntax


  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding) {
        if (true) {
          if (el.slotTarget || el.slotScope) {
            warn$1("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.parent && !maybeComponent(el.parent)) {
            warn$1("<template v-slot> can only appear at the root level inside " + "the receiving the component", el);
          }
        }

        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding$1) {
        if (true) {
          if (!maybeComponent(el)) {
            warn$1("v-slot can only be used on components or <template>.", slotBinding$1);
          }

          if (el.slotScope || el.slotTarget) {
            warn$1("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.scopedSlots) {
            warn$1("To avoid scope ambiguity, the default slot should also use " + "<template> syntax when there are other named slots.", slotBinding$1);
          }
        } // add the component's children to its default slot


        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true;
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken; // remove children as they are returned from scopedSlots now

        el.children = []; // mark el non-plain so data gets generated

        el.plain = false;
      }
    }
  }
}

function getSlotName(binding) {
  var name = binding.name.replace(slotRE, '');

  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (true) {
      warn$1("v-slot shorthand syntax requires a slot name.", binding);
    }
  }

  return dynamicArgRE.test(name) // dynamic [name]
  ? {
    name: name.slice(1, -1),
    dynamic: true // static name

  } : {
    name: "\"" + name + "\"",
    dynamic: false
  };
} // handle <slot/> outlets


function processSlotOutlet(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if ( true && el.key) {
      warn$1("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.", getRawBindingAttr(el, 'key'));
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name.replace(dirRE, '')); // support .foo shorthand syntax for the .prop modifier

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        if ( true && value.trim().length === 0) {
          warn$1("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"");
        }

        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");

            if (!isDynamic) {
              addHandler(el, "update:" + camelize(name), syncGen, null, false, warn$1, list[i]);

              if (hyphenate(name) !== camelize(name)) {
                addHandler(el, "update:" + hyphenate(name), syncGen, null, false, warn$1, list[i]);
              }
            } else {
              // handler w/ dynamic event name
              addHandler(el, "\"update:\"+(" + name + ")", syncGen, null, false, warn$1, list[i], true // dynamic
              );
            }
          }
        }

        if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        addHandler(el, name, value, modifiers, false, warn$1, list[i], isDynamic);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;

        if (arg) {
          name = name.slice(0, -(arg.length + 1));

          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }

        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);

        if ( true && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var res = parseText(value, delimiters);

        if (res) {
          warn$1(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.', list[i]);
        }
      }

      addAttr(el, name, JSON.stringify(value), list[i]); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if ( true && map[attrs[i].name] && !isIE && !isEdge) {
      warn$1('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.", el.rawAttrsMap['v-model']);
    }

    _el = _el.parent;
  }
}
/*  */


var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic$1(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node.static = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);

      if (!child.static) {
        node.static = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);

        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node.for) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function genGuard(condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";

  for (var name in events) {
    var handlerCode = genHandler(events[name]);

    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }

  staticHandlers = "{" + staticHandlers.slice(0, -1) + "}";

  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + dynamicHandlers.slice(0, -1) + "])";
  } else {
    return prefix + staticHandlers;
  }
}

function genHandler(handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + (isFunctionInvocation ? "return " + handler.value : handler.value) + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : isFunctionInvocation ? "return " + handler.value : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return (// make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" + keys.map(genFilterCode).join('&&') + ")return null;"
  );
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if ( true && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;

      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true; // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.

  var originalPreState = state.pre;

  if (el.pre) {
    state.pre = el.pre;
  }

  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  state.pre = originalPreState;
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
       true && state.warn("v-once can only be used inside v-for that is keyed. ", el.rawAttrsMap['v-once']);
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if ( true && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", el.rawAttrsMap['v-for'], true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:" + genProps(el.attrs) + ",";
  } // DOM props


  if (el.props) {
    data += "domProps:" + genProps(el.props) + ",";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el, el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.

  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + el.tag + "\"," + genProps(el.dynamicAttrs) + ")";
  } // v-bind data wrap


  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:" + (dir.isDynamicArg ? dir.arg : "\"" + dir.arg + "\"") : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if ( true && (el.children.length !== 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.', {
      start: el.start
    });
  }

  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(el, slots, state) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    ;
  }); // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.

  var needsKey = !!el.if; // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.

  if (!needsForceUpdate) {
    var parent = el.parent;

    while (parent) {
      if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent.for) {
        needsForceUpdate = true;
        break;
      }

      if (parent.if) {
        needsKey = true;
      }

      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots).map(function (key) {
    return genScopedSlot(slots[key], state);
  }).join(',');
  return "scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? ",null,false," + hash(generatedSlots) : "") + ")";
}

function hash(str) {
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  return hash >>> 0;
}

function containsSlotChild(el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true;
    }

    return el.children.some(containsSlotChild);
  }

  return false;
}

function genScopedSlot(el, state) {
  var isLegacySyntax = el.attrsMap['slot-scope'];

  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null");
  }

  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot);
  }

  var slotScope = el.slotScope === emptySlotScopeToken ? "" : String(el.slotScope);
  var fn = "function(" + slotScope + "){" + "return " + (el.tag === 'template' ? el.if && isLegacySyntax ? "(" + el.if + ")?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}"; // reverse proxy v-slot without scope on this.$slots

  var reverseProxy = slotScope ? "" : ",proxy:true";
  return "{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}";
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      var normalizationType = checkSkip ? state.maybeComponent(el$1) ? ",1" : ",0" : "";
      return "" + (altGenElement || genElement)(el$1, state) + normalizationType;
    }

    var normalizationType$1 = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType$1 ? "," + normalizationType$1 : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {
    return {
      // slot props are camelized
      name: camelize(attr.name),
      value: attr.value,
      dynamic: attr.dynamic
    };
  })) : null;
  var bind = el.attrsMap['v-bind'];

  if ((attrs || bind) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind) {
    res += (attrs ? '' : ',null') + "," + bind;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var staticProps = "";
  var dynamicProps = "";

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);

    if (prop.dynamic) {
      dynamicProps += prop.name + "," + value + ",";
    } else {
      staticProps += "\"" + prop.name + "\":" + value + ",";
    }
  }

  staticProps = "{" + staticProps.slice(0, -1) + "}";

  if (dynamicProps) {
    return "_d(" + staticProps + ",[" + dynamicProps.slice(0, -1) + "])";
  } else {
    return staticProps;
  }
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode(node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          var range = node.rawAttrsMap[name];

          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", warn, range);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", warn, range);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent(exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);

  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim(), range);
  }

  checkExpression(exp, text, warn, range);
}

function checkFor(node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier(ident, type, text, warn, range) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      warn("invalid " + type + " \"" + ident + "\" in expression: " + text.trim(), range);
    }
  }
}

function checkExpression(exp, text, warn, range) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      warn("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim(), range);
    } else {
      warn("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n", range);
    }
  }
}
/*  */


var range = 2;

function generateCodeFrame(source, start, end) {
  if (start === void 0) start = 0;
  if (end === void 0) end = source.length;
  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];

  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;

    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) {
          continue;
        }

        res.push("" + (j + 1) + repeat$1(" ", 3 - String(j + 1).length) + "|  " + lines[j]);
        var lineLength = lines[j].length;

        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }

          count += lineLength + 1;
        }
      }

      break;
    }
  }

  return res.join('\n');
}

function repeat$1(str, n) {
  var result = '';

  if (n > 0) {
    while (true) {
      // eslint-disable-line
      if (n & 1) {
        result += str;
      }

      n >>>= 1;

      if (n <= 0) {
        break;
      }

      str += str;
    }
  }

  return result;
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache


    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    if (true) {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$1("Error compiling template:\n\n" + e.msg + "\n\n" + generateCodeFrame(template, e.start, e.end), vm);
          });
        } else {
          warn$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
      }

      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) {
            return tip(e.msg, vm);
          });
        } else {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }
    } // turn code into functions


    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function warn(msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if ( true && options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function warn(msg, range, tip) {
            var data = {
              msg: msg
            };

            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }

              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }

            (tip ? tips : errors).push(data);
          };
        } // merge custom modules


        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;
      var compiled = baseCompile(template.trim(), finalOptions);

      if (true) {
        detectErrors(compiled.ast, warn);
      }

      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});

function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if ( true && staticClass) {
    var expression = parseText(staticClass, options.delimiters);

    if (expression) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var class_$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData$1
};
var normalize$1 = cached(camelize);

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  var ref = parseStaticStyle(staticStyle, options);
  var dynamic = ref.dynamic;
  var styleResult = ref.styleResult;

  if ( true && dynamic) {
    warn("style=\"" + String(staticStyle) + "\": " + 'Interpolation inside attributes has been deprecated. ' + 'Use v-bind or the colon shorthand instead.');
  }

  if (!dynamic && styleResult) {
    el.staticStyle = styleResult;
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  } else if (dynamic) {
    el.styleBinding = styleResult;
  }
}

function genData$2(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:" + el.styleBinding + ",";
  }

  return data;
}

function parseStaticStyle(staticStyle, options) {
  // "width: 200px; height: 200px;" -> {width: 200, height: 200}
  // "width: 200px; height: {{y}}" -> {width: 200, height: y}
  var dynamic = false;
  var styleResult = '';

  if (staticStyle) {
    var styleList = staticStyle.trim().split(';').map(function (style) {
      var result = style.trim().split(':');

      if (result.length !== 2) {
        return;
      }

      var key = normalize$1(result[0].trim());
      var value = result[1].trim();
      var dynamicValue = parseText(value, options.delimiters);

      if (dynamicValue) {
        dynamic = true;
        return key + ':' + dynamicValue;
      }

      return key + ':' + JSON.stringify(value);
    }).filter(function (result) {
      return result;
    });

    if (styleList.length) {
      styleResult = '{' + styleList.join(',') + '}';
    }
  }

  return {
    dynamic: dynamic,
    styleResult: styleResult
  };
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$2
};

function preTransformNode(el) {
  var vfor;

  if (normalizeElementName(el.tag) === 'nativelistview') {
    vfor = getAndRemoveAttr(el, 'v-for');
    delete el.attrsMap['v-for'];

    if ( true && vfor) {
      warn("The v-for directive is not supported on a " + el.tag + ", " + 'Use the "for" attribute instead. For example, instead of ' + "<" + el.tag + " v-for=\"" + vfor + "\"> use <" + el.tag + " for=\"" + vfor + "\">.");
    }
  }

  var exp = getAndRemoveAttr(el, 'for') || vfor;

  if (!exp) {
    return;
  }

  var res = parseFor(exp);

  if (!res) {
    if (true) {
      warn("Invalid for expression: " + exp);
    }

    return;
  }

  addRawAttr(el, ':items', res.for);
  addRawAttr(el, '+alias', res.alias);

  if (res.iterator1) {
    addRawAttr(el, '+index', res.iterator1);
  }
}

var for_ = {
  preTransformNode: preTransformNode
};

function preTransformNode$1(el) {
  if (el.tag !== 'router-view') {
    return;
  }

  if (normalizeElementName(el.parent.tag) === 'nativeframe') {
    addAttr(el.parent, 'hasRouterView', 'true');
  }
}

var router = {
  preTransformNode: preTransformNode$1
};

function preTransformNode$2(el) {
  if (el.parent && el.parent.tag === 'v-template') {
    var alias = el.parent.parent.attrsMap['+alias'] || 'item';
    var index = el.parent.parent.attrsMap['+index'] || '$index';
    el.slotScope = buildScopeString(alias, index);
  }
}

var vTemplate$1 = {
  preTransformNode: preTransformNode$2
};

function buildScopeString(alias, index) {
  return "{ " + alias + ", " + index + ", $even, $odd }";
} // transforms ~test -> v-view:test


function transformNode$2(el) {
  var attr = Object.keys(el.attrsMap).find(function (attr) {
    return attr.startsWith('~');
  });

  if (attr) {
    var attrName = attr.substr(1);
    var ref = attrName.split('.');
    var arg = ref[0];
    var modifiers = ref.slice(1);
    modifiers = modifiers.reduce(function (mods, mod) {
      mods[mod] = true;
      return mods;
    }, {});
    getAndRemoveAttr(el, attr, true);
    addDirective(el, 'view', "v-view:" + attrName, '', arg, false, modifiers);
  }
}

var view = {
  transformNode: transformNode$2
};
var modules$1 = [class_$1, style$1, vTemplate$1, for_, router, view];

function model(el, dir) {
  if (el.type === 1 && isKnownView(el.tag)) {
    genDefaultModel(el, dir.value, dir.modifiers);
  } else {
    genComponentModel(el, dir.value, dir.modifiers);
  }
}

function genDefaultModel(el, value, modifiers) {
  var ref = modifiers || {};
  var trim = ref.trim;
  var number = ref.number;
  var ref$1 = getViewMeta(el.tag).model;
  var prop = ref$1.prop;
  var event = ref$1.event;
  var valueExpression = "$event.value" + (trim ? '.trim()' : '');

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  addAttr(el, prop, "(" + value + ")");
  addHandler(el, event, code, null, true);
}

var directives$1 = {
  model: model
};
var baseOptions = {
  modules: modules$1,
  directives: directives$1,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  preserveWhitespace: false,
  staticKeys: genStaticKeys(modules$1)
};
var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp$1(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached = cache[key];

  if (cached && (!current || cached.tag !== current.tag)) {
    cached.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.10'; // recursively search for possible transition defined inside the component root

function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;
    var originalVisibility = el.__vOriginalVisibility = el.getAttribute('visibility') === 'none' ? '' : el.getAttribute('visibility');

    if (value && transition) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.setAttribute('visibility', originalVisibility);
      });
    } else {
      el.setAttribute('visibility', value ? originalVisibility : 'collapsed');
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;

    if (transition) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.setAttribute('visibility', el.__vOriginalVisibility);
        });
      } else {
        leave(vnode, function () {
          el.setAttribute('visibility', 'collapsed');
        });
      }
    } else {
      el.setAttribute('visibility', value ? el.__vOriginalVisibility : 'collapsed');
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.setAttribute('visibility', el.__vOriginalVisibility);
    }
  }
};
var view$1 = {
  inserted: function inserted(el, ref) {
    var arg = ref.arg;
    var modifiers = ref.modifiers;
    var parent = el.parentNode.nativeView;

    if (parent) {
      if (modifiers.array) {
        parent[arg] = (parent[arg] || []).push(el.nativeView);
      } else {
        parent[arg] = el.nativeView;
      }
    }
  }
};
var platformDirectives = {
  show: show,
  view: view$1
}; // Ensure `application` and `frame` modules are loaded

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isUnknownElement = isUnknownElement;
Vue.$document = Vue.prototype.$document = new DocumentNode();
Vue.compile = compileToFunctions;
Vue.registerElement = registerElement;
Object.assign(Vue.options.directives, platformDirectives);
Vue.prototype.__patch__ = patch;

Vue.prototype.$mount = function (el, hydrating) {
  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template && typeof template !== 'string') {
      warn('invalid template option: ' + template, this);
      return this;
    }

    if (template) {
      var ref = compileToFunctions(template, {
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
    }
  }

  return mountComponent(this, el, hydrating);
};

Vue.prototype.$start = function () {
  var self = this;
  var AppConstructor = Vue.extend(this.$options); // register NS components into Vue

  Object.values(getElementMap()).forEach(function (entry) {
    Vue.component(entry.meta.component.name, entry.meta.component);
  });
  application.on(application.launchEvent, function (args) {
    if (self.$el) {
      self.$destroy();
      self = new AppConstructor();
    }

    self.$mount();
    args.root = self.$el.nativeView;
  });
  application.run();
}; // Define a `nativeView` getter in every NS vue instance


Object.defineProperty(Vue.prototype, 'nativeView', {
  get: function get() {
    return this.$el.nativeView;
  }
});

function _findParentModalEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'ModalEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var ModalPlugin = {
  install: function install(Vue) {
    Vue.mixin({
      created: function created() {
        var self = this;
        this.$modal = {
          close: function close(data) {
            var entry = _findParentModalEntry(self);

            if (entry) {
              entry.closeCb(data);
            }
          }
        };
      }
    });

    Vue.prototype.$showModal = function (component, options) {
      var this$1 = this;
      return new Promise(function (resolve) {
        var resolved = false;

        var closeCb = function closeCb(data) {
          if (resolved) {
            return;
          }

          resolved = true;
          resolve(data);
          modalPage.closeModal(); // emitted to show up in devtools
          // for debugging purposes

          navEntryInstance.$emit('modal:close', data);
          navEntryInstance.$destroy();
        }; // build options object with defaults


        options = Object.assign({}, options, {
          context: null,
          closeCallback: closeCb
        });
        var navEntryInstance = new Vue({
          name: 'ModalEntry',
          parent: this$1.$root,
          methods: {
            closeCb: closeCb
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var modalPage = navEntryInstance.$mount().$el.nativeView;
        this$1.$el.nativeView.showModal(modalPage, options);
      });
    };
  }
};
Vue.config.silent = true;
setVue(Vue);
Vue.use(ModalPlugin);
Vue.use(NavigatorPlugin);
var newLineRegExp = /\\n/g;

console.log = function (log, inspect, Vue) {
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    return log.call.apply(log, [this].concat(Array.prototype.map.call(args, function (arg) {
      return inspect(arg, {
        depth: 2,
        colors: Vue.config.debug,
        showHidden: true
      }).replace(newLineRegExp, '\n');
    })));
  };
}(console.log, utilInspect, Vue);

global.__onLiveSyncCore = function () {
  var frame = __webpack_require__("tns-core-modules/ui/frame").topmost();

  if (frame) {
    if (frame.currentPage && frame.currentPage.modal) {
      frame.currentPage.modal.closeModal();
    }

    if (frame.currentPage) {
      frame.currentPage.addCssFile(__webpack_require__("tns-core-modules/application").getCssFileName());
    }
  }
}; // Fix a rollup problem which does not define
// module.export.default = Vue
// so a `import Vue from 'nativescript-vue'` will
// fail from a Typescript file


Vue.default = Vue;
module.exports = Vue;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/vue-hot-reload-api/dist/index.js":
/***/ (function(module, exports) {

var Vue; // late bind

var version;
var map = Object.create(null);

if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map;
}

var installed = false;
var isBrowserify = false;
var initHookName = 'beforeCreate';

exports.install = function (vue, browserify) {
  if (installed) {
    return;
  }

  installed = true;
  Vue = vue.__esModule ? vue.default : vue;
  version = Vue.version.split('.').map(Number);
  isBrowserify = browserify; // compat with < 2.0.0-alpha.7

  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init';
  }

  exports.compatible = version[0] >= 2;

  if (!exports.compatible) {
    console.warn('[HMR] You are using a version of vue-hot-reload-api that is ' + 'only compatible with Vue.js core ^2.0.0.');
    return;
  }
};
/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */


exports.createRecord = function (id, options) {
  if (map[id]) {
    return;
  }

  var Ctor = null;

  if (typeof options === 'function') {
    Ctor = options;
    options = Ctor.options;
  }

  makeOptionsHot(id, options);
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  };
};
/**
 * Check if module is recorded
 *
 * @param {String} id
 */


exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined';
};
/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */


function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render;

    options.render = function (h, ctx) {
      var instances = map[id].instances;

      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent);
      }

      return render(h, ctx);
    };
  } else {
    injectHook(options, initHookName, function () {
      var record = map[id];

      if (!record.Ctor) {
        record.Ctor = this.constructor;
      }

      record.instances.push(this);
    });
    injectHook(options, 'beforeDestroy', function () {
      var instances = map[id].instances;
      instances.splice(instances.indexOf(this), 1);
    });
  }
}
/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */


function injectHook(options, name, hook) {
  var existing = options[name];
  options[name] = existing ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook] : [hook];
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.');
    }
  };
}

function updateOptions(oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key];
    }
  }

  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1];
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id];

  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate();
    });
    return;
  }

  if (typeof options === 'function') {
    options = options.options;
  }

  if (record.Ctor) {
    record.Ctor.options.render = options.render;
    record.Ctor.options.staticRenderFns = options.staticRenderFns;
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render;
      instance.$options.staticRenderFns = options.staticRenderFns; // reset static trees
      // pre 2.5, all static trees are cached together on the instance

      if (instance._staticTrees) {
        instance._staticTrees = [];
      } // 2.5.0


      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = [];
      } // 2.5.3


      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = [];
      } // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)
      // 2.6: temporarily mark rendered scoped slots as unstable so that
      // child components can be forced to update


      var restore = patchScopedSlots(instance);
      instance.$forceUpdate();
      instance.$nextTick(restore);
    });
  } else {
    // functional or no instance created yet
    record.options.render = options.render;
    record.options.staticRenderFns = options.staticRenderFns; // handle functional component re-render

    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options);
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles;

        if (injectStyles) {
          var render = options.render;

          record.options.render = function (h, ctx) {
            injectStyles.call(ctx);
            return render(h, ctx);
          };
        }
      }

      record.options._Ctor = null; // 2.5.3

      if (Array.isArray(record.options.cached)) {
        record.options.cached = [];
      }

      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate();
      });
    }
  }
});
exports.reload = tryWrap(function (id, options) {
  var record = map[id];

  if (options) {
    if (typeof options === 'function') {
      options = options.options;
    }

    makeOptionsHot(id, options);

    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options;
      }

      var newCtor = record.Ctor.super.extend(options);
      record.Ctor.options = newCtor.options;
      record.Ctor.cid = newCtor.cid;
      record.Ctor.prototype = newCtor.prototype;

      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release();
      }
    } else {
      updateOptions(record.options, options);
    }
  }

  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate();
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.');
    }
  });
}); // 2.6 optimizes template-compiled scoped slots and skips updates if child
// only uses scoped slots. We need to patch the scoped slots resolving helper
// to temporarily mark all scoped slots as unstable in order to force child
// updates.

function patchScopedSlots(instance) {
  if (!instance._u) {
    return;
  } // https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js


  var original = instance._u;

  instance._u = function (slots) {
    try {
      // 2.6.4 ~ 2.6.6
      return original(slots, true);
    } catch (e) {
      // 2.5 / >= 2.6.7
      return original(slots, null, true);
    }
  };

  return function () {
    instance._u = original;
  };
}

/***/ }),

/***/ "../node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC10aGVtZS1jb3JlL2Nzcy9jb3JlLmxpZ2h0LmNzcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy9obXItdXBkYXRlLnRzIiwid2VicGFjazovLy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9ob3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9uYXRpdmVzY3JpcHQtZGV2LXdlYnBhY2svbG9hZC1hcHBsaWNhdGlvbi1jc3MtcmVndWxhci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9sb2FkLWFwcGxpY2F0aW9uLWNzcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC12dWUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwicHVzaCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJobXJQcmVmaXgiLCJsb2ciLCJpbmZvIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3IiLCJyZWZyZXNoIiwiaG90T3B0aW9ucyIsImlnbm9yZVVuYWNjZXB0ZWQiLCJpZ25vcmVEZWNsaW5lZCIsImlnbm9yZUVycm9yZWQiLCJvblVuYWNjZXB0ZWQiLCJjaGFpbiIsImxhc3QiLCJwb3AiLCJmb3JFYWNoIiwibW9kIiwib25EZWNsaW5lZCIsIm9uRXJyb3JlZCIsIm1vZHVsZUlkIiwidHlwZSIsIm5leHRIYXNoIiwiY3VycmVudEhhc2giLCJ1cFRvRGF0ZSIsImluZGV4T2YiLCJfX3dlYnBhY2tfaGFzaF9fIiwicmVzdWx0IiwiYXBwbGllZE1vZHVsZXMiLCJ1bmFjY2VwdGVkIiwiZmlsdGVyIiwibnVtYmVySWRzIiwiZXZlcnkiLCJjaGVjayIsIm9wdGlvbnMiLCJob3QiLCJ0aGVuIiwiYXBwbHkiLCJuZXh0Q2hlY2siLCJjYXRjaCIsImVyciIsInN0YXR1cyIsInN0YWNrIiwidXBkYXRlIiwibGF0ZXN0SGFzaCIsImdldE5leHRIYXNoIiwiaGFzaCIsImdldEZpbGVDb250ZW50IiwiZmlsZSIsInJlYWRUZXh0IiwiaG90VXBkYXRlQ29udGVudCIsIm1hbmlmZXN0IiwicGFyc2UiLCJuZXdIYXNoIiwiaCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2hlY2tTdGF0ZSIsImluaXRpYWxIYXNoIiwibG9hZENzcyIsInJlcXVpcmUiLCJhcHBDc3NDb250ZXh0IiwiZ2xvYmFsIiwicmVnaXN0ZXJXZWJwYWNrTW9kdWxlcyIsImxvYWRNb2R1bGVGbiIsImFwcGxpY2F0aW9uIiwibG9hZEFwcENzcyIsImciLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJwcm9jZXNzIiwiZW52IiwiYXJyYXlNYXAiLCJ4cyIsImYiLCJyZXMiLCJ4IiwiaGFzT3duIiwiY2FsbCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaW5kZXhvZiIsImFyciIsIm9iaiIsImlzYXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJoYXNPd24kMSIsImZvcmVhY2giLCJmbiIsImN0eCIsIlR5cGVFcnJvciIsImwiLCJrIiwiaGFzT3duJDIiLCJhcnJheVJlZHVjZSIsImFjYyIsImhhc0FjYyIsImFyZ3VtZW50cyIsInJlZHVjZSIsImhhc093biQzIiwidG9TdHJpbmckMSIsImlzRnVuY3Rpb24iLCJSZWdFeHAiLCJmb3JlYWNoJDEiLCJpc1N0cmluZyIsImNvbnRleHQiLCJjaGFyQXQiLCJ0b1N0cmluZyQyIiwiaXNBcmd1bWVudHMiLCJ2YWx1ZSIsInN0ciIsImNhbGxlZSIsImhhcyIsInRvU3RyaW5nJDMiLCJoYXNEb250RW51bUJ1ZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwia2V5c1NoaW0iLCJrZXlzIiwib2JqZWN0IiwiaXNPYmplY3QiLCJpc0FyZ3VtZW50cyQxIiwidGhlS2V5cyIsImluZGV4IiwibmFtZSIsInNraXBQcm90byIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInNraXBDb25zdHJ1Y3RvciIsImRvbnRFbnVtIiwic2hpbSIsInNoaW1PYmplY3RLZXlzIiwib2JqZWN0S2V5cyIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImpzb24zIiwicm9vdCIsImlzTG9hZGVyIiwidW5kZWZpbmVkIiwiZnJlZUdsb2JhbCIsInJ1bkluQ29udGV4dCIsIk51bWJlciIsIlN0cmluZyIsIkRhdGUiLCJTeW50YXhFcnJvciIsIk1hdGgiLCJuYXRpdmVKU09OIiwib2JqZWN0UHJvdG8iLCJnZXRDbGFzcyIsImlzUHJvcGVydHkiLCJ1bmRlZiIsImlzRXh0ZW5kZWQiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJleGNlcHRpb24iLCJpc1N1cHBvcnRlZCIsInNlcmlhbGl6ZWQiLCJzdHJpbmdpZnlTdXBwb3J0ZWQiLCJ0b0pTT04iLCJwYXJzZVN1cHBvcnRlZCIsImZ1bmN0aW9uQ2xhc3MiLCJkYXRlQ2xhc3MiLCJudW1iZXJDbGFzcyIsInN0cmluZ0NsYXNzIiwiYXJyYXlDbGFzcyIsImJvb2xlYW5DbGFzcyIsImNoYXJJbmRleEJ1Z2d5IiwiZmxvb3IiLCJNb250aHMiLCJnZXREYXkiLCJ5ZWFyIiwibW9udGgiLCJwcm9wZXJ0eSIsIm1lbWJlcnMiLCJfX3Byb3RvX18iLCJvcmlnaW5hbCIsInBhcmVudCIsIlByaW1pdGl2ZVR5cGVzIiwiaXNIb3N0VHlwZSIsImNhbGxiYWNrIiwic2l6ZSIsIlByb3BlcnRpZXMiLCJ2YWx1ZU9mIiwiaGFzUHJvcGVydHkiLCJpc0NvbnN0cnVjdG9yIiwiRXNjYXBlcyIsImxlYWRpbmdaZXJvZXMiLCJ0b1BhZGRlZFN0cmluZyIsIndpZHRoIiwic2xpY2UiLCJ1bmljb2RlUHJlZml4IiwicXVvdGUiLCJ1c2VDaGFySW5kZXgiLCJzeW1ib2xzIiwic3BsaXQiLCJjaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJzZXJpYWxpemUiLCJwcm9wZXJ0aWVzIiwid2hpdGVzcGFjZSIsImluZGVudGF0aW9uIiwiY2xhc3NOYW1lIiwiZGF0ZSIsInRpbWUiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwicmVzdWx0cyIsImVsZW1lbnQiLCJwcmVmaXgiLCJmcm9tQ2hhckNvZGUiLCJVbmVzY2FwZXMiLCJJbmRleCIsIlNvdXJjZSIsImFib3J0IiwibGV4IiwiYmVnaW4iLCJwb3NpdGlvbiIsImlzU2lnbmVkIiwiZ2V0IiwiaGFzTWVtYmVycyIsIndhbGsiLCJub2RlVHlwZSIsIkpTT04zIiwib2JqZWN0S2V5cyQxIiwidmFsIiwidXRpbEluc3BlY3QiLCJpbnNwZWN0Iiwib3B0cyIsInNlZW4iLCJzdHlsaXplIiwic3R5bGl6ZU5vQ29sb3IiLCJkZXB0aCIsImNvbG9ycyIsImlzQm9vbGVhbiIsInNob3dIaWRkZW4iLCJfZXh0ZW5kIiwiaXNVbmRlZmluZWQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVzIiwic3R5bGVUeXBlIiwiYXJnIiwic3R5bGUiLCJpc0Z1bmN0aW9uJDEiLCJpc051bWJlciIsImlzTnVsbCIsImhhc093biQ0IiwicHJvcCIsImlzUmVnRXhwIiwicmUiLCJvYmplY3RUb1N0cmluZyIsImlzRXJyb3IiLCJFcnJvciIsImlzRGF0ZSIsImQiLCJvIiwiYXJyYXlUb0hhc2giLCJhcnJheSIsImlkeCIsImZvcm1hdEFycmF5IiwicmVjdXJzZVRpbWVzIiwidmlzaWJsZUtleXMiLCJvdXRwdXQiLCJmb3JtYXRQcm9wZXJ0eSIsImtleSIsIm1hdGNoIiwiZm9ybWF0RXJyb3IiLCJyZXQiLCJwcmltaXRpdmUiLCJmb3JtYXRQcmltaXRpdmUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYmFzZSIsImJyYWNlcyIsIm4iLCJ0b1VUQ1N0cmluZyIsInJlZHVjZVRvU2luZ2xlU3RyaW5nIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldCIsImxpbmUiLCJzdWJzdHIiLCJyZXBsYWNlIiwic2ltcGxlIiwicHJldiIsImN1ciIsIm9yaWdpbiIsImFkZCIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsInYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzRmFsc2UiLCJpc1ByaW1pdGl2ZSIsImlzT2JqZWN0JDEiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWdFeHAkMSIsImlzVmFsaWRBcnJheUluZGV4IiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidG9TdHJpbmckNCIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImNyZWF0ZSIsInRvTG93ZXJDYXNlIiwiaXNCdWlsdEluVGFnIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsInJlbW92ZSIsInNwbGljZSIsImhhc093biQ1IiwiY2FjaGVkIiwiY2FjaGUiLCJjYWNoZWRGbiIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJwb2x5ZmlsbEJpbmQiLCJib3VuZEZuIiwiYSIsIl9sZW5ndGgiLCJuYXRpdmVCaW5kIiwiYmluZCIsInRvQXJyYXkiLCJzdGFydCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsIm5vb3AiLCJiIiwibm8iLCJpZGVudGl0eSIsImdlblN0YXRpY0tleXMiLCJtIiwic3RhdGljS2V5cyIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJkZWYiLCJlbnVtZXJhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImJhaWxSRSIsInBhcnNlUGF0aCIsInBhdGgiLCJ0ZXN0Iiwic2VnbWVudHMiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJpc0Nocm9tZSIsImlzUGhhbnRvbUpTIiwiaXNGRiIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJhZGRFdmVudExpc3RlbmVyIiwiX2lzU2VydmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJWVUVfRU5WIiwiZGV2dG9vbHMiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiaGFzU3ltYm9sIiwiU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJfU2V0IiwiU2V0IiwiY2xlYXIiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjbGFzc2lmeVJFIiwiY2xhc3NpZnkiLCJtc2ciLCJ2bSIsInRyYWNlIiwiaW5jbHVkZUZpbGUiLCIkcm9vdCIsImNpZCIsIl9pc1Z1ZSIsIiRvcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsIl9fZmlsZSIsInJlcGVhdCIsIiRwYXJlbnQiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwidWlkIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsInRhcmdldCIsImFkZERlcCIsIm5vdGlmeSIsInNvcnQiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJWTm9kZSIsInRhZyIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNoaWxkIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwibWV0aG9kIiwibXV0YXRvciIsImFyZ3MiLCJsZW4iLCJvYiIsIl9fb2JfXyIsImluc2VydGVkIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50IiwiZGVmaW5lUmVhY3RpdmUiLCJpdGVtcyIsIm9ic2VydmUiLCJzcmMiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJyZWFjdGl2ZUdldHRlciIsImRlcGVuZEFycmF5IiwicmVhY3RpdmVTZXR0ZXIiLCJuZXdWYWwiLCJtYXgiLCJkZWwiLCJzdHJhdHMiLCJlbCIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJtZXJnZWREYXRhRm4iLCJtZXJnZWRJbnN0YW5jZURhdGFGbiIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiZGVkdXBlSG9va3MiLCJob29rcyIsImhvb2siLCJtZXJnZUFzc2V0cyIsImFzc2VydE9iamVjdFR5cGUiLCJrZXkkMSIsInByb3BzIiwibWV0aG9kcyIsImluamVjdCIsImNvbXB1dGVkIiwicHJvdmlkZSIsImNoZWNrQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJtZXJnZU9wdGlvbnMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJCb29sZWFuIiwic3RyaW5nSW5kZXgiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJhc3NlcnRQcm9wIiwiZGVmYXVsdCIsIl9wcm9wcyIsImdldFR5cGUiLCJyZXF1aXJlZCIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJ2YWxpZGF0b3IiLCJzaW1wbGVDaGVja1JFIiwidCIsImlzU2FtZVR5cGUiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJpc0Jvb2xlYW4kMSIsImV4cGxpY2l0VHlwZXMiLCJzb21lIiwiZWxlbSIsImhhbmRsZUVycm9yIiwiZXJyb3JDYXB0dXJlZCIsImNhcHR1cmUiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlciIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJ0aW1lckZ1bmMiLCJwIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwic2V0SW1tZWRpYXRlIiwibmV4dFRpY2siLCJjYiIsIl9yZXNvbHZlIiwicmVmIiwicmVnaXN0ZXJSZWYiLCJvbGRWbm9kZSIsImRlc3Ryb3kiLCJpc1JlbW92YWwiLCJyZWZzIiwiJHJlZnMiLCJyZWZJbkZvciIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwiTUFYX1VQREFURV9DT1VOVCIsInF1ZXVlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJoYXMkMSIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoaW5nIiwicmVzZXRTY2hlZHVsZXJTdGF0ZSIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsIm5vdyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJiZWZvcmUiLCJydW4iLCJ1c2VyIiwiZXhwcmVzc2lvbiIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJfd2F0Y2hlciIsIl9pc01vdW50ZWQiLCJfaXNEZXN0cm95ZWQiLCJjYWxsSG9vayIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiX2luYWN0aXZlIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsInF1ZXVlV2F0Y2hlciIsInVpZCQxIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJkZWVwIiwibGF6eSIsInN5bmMiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsIm1hcmsiLCJtZWFzdXJlIiwicGVyZiIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwic3RhcnRUYWciLCJlbmRUYWciLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJhdHRycyIsImFsdEtleSIsImtleUluTG93ZXJDYXNlIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsInNoaWZ0IiwiX2lzVkxpc3QiLCJpbml0UHJveHkiLCJhbGxvd2VkR2xvYmFscyIsIndhcm5Ob25QcmVzZW50Iiwid2FyblJlc2VydmVkUHJlZml4IiwiaGFzUHJveHkiLCJQcm94eSIsImlzQnVpbHRJbk1vZGlmaWVyIiwiaGFzSGFuZGxlciIsImlzQWxsb3dlZCIsIiRkYXRhIiwiZ2V0SGFuZGxlciIsImhhbmRsZXJzIiwicmVuZGVyIiwiX3dpdGhTdHJpcHBlZCIsIl9yZW5kZXJQcm94eSIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInByb3h5Iiwic291cmNlS2V5IiwicHJveHlHZXR0ZXIiLCJwcm94eVNldHRlciIsImluaXRTdGF0ZSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJfZGF0YSIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsInByb3BzT3B0aW9ucyIsIl9wcm9wS2V5cyIsImlzUm9vdCIsImxvb3AiLCJoeXBoZW5hdGVkS2V5IiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiZGVmaW5lQ29tcHV0ZWQiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsImNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlV2F0Y2hlciIsIiR3YXRjaCIsInN0YXRlTWl4aW4iLCJWdWUiLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInVud2F0Y2hGbiIsImluaXRQcm92aWRlIiwiX3Byb3ZpZGVkIiwiaW5pdEluamVjdGlvbnMiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsInByb3ZpZGVEZWZhdWx0IiwidWlkJDIiLCJpbml0TWl4aW4iLCJfaW5pdCIsIl91aWQiLCJfaXNDb21wb25lbnQiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwiX3NlbGYiLCJpbml0TGlmZWN5Y2xlIiwiaW5pdEV2ZW50cyIsImluaXRSZW5kZXIiLCJfbmFtZSIsIiRtb3VudCIsInBhcmVudFZub2RlIiwiX3BhcmVudFZub2RlIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX3BhcmVudExpc3RlbmVycyIsImxpc3RlbmVycyIsIl9yZW5kZXJDaGlsZHJlbiIsInN0YXRpY1JlbmRlckZucyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwiY2FjaGVkU3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicmVuZGVyTGlzdCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwibm9kZXMiLCIkc2xvdHMiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwibWFya1N0YXRpYyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJ2YWx1ZXMiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9pIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdiIsIl9lIiwiX3UiLCJfZyIsIl9kIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsInRoaXMkMSIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiX2MiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm1lcmdlUHJvcHMiLCJyZW5kZXJDb250ZXh0IiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInZub2RlcyIsImNsb25lIiwiZGV2dG9vbHNNZXRhIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImluaXQiLCJoeWRyYXRpbmciLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJpbnNlcnQiLCIkZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJmdW5jdGlvbmFsIiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImlubGluZVRlbXBsYXRlIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiX2NyZWF0ZUVsZW1lbnQiLCJpcyIsIiR2bm9kZSIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsImZvcmNlIiwiY2xhc3MiLCJfdm5vZGUiLCJwYXJlbnREYXRhIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwicmVuZGVyTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVuZGVyRXJyb3IiLCJlbnN1cmVDdG9yIiwiY29tcCIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJyZWFzb24iLCJjb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwiJGVtaXQiLCJsb3dlckNhc2VFdmVudCIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiJGNoaWxkcmVuIiwiX2RpcmVjdEluYWN0aXZlIiwibGlmZWN5Y2xlTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsIm1vdW50Q29tcG9uZW50IiwidGVtcGxhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiaiIsImlzSFRNTFRhZyIsImlzU1ZHIiwiaXNUZXh0SW5wdXRUeXBlIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJub2RlT3BzIiwiZW1wdHlOb2RlQXQiLCJ0YWdOYW1lIiwiY3JlYXRlUm1DYiIsImNoaWxkRWxtIiwicmVtb3ZlTm9kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImNyZWF0ZUVsZW1lbnROUyIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsImNyZWF0ZUNvbW1lbnQiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJpbm5lck5vZGUiLCJ0cmFuc2l0aW9uIiwiYWN0aXZhdGUiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImNoZWNrRHVwbGljYXRlS2V5cyIsInNldFN0eWxlU2NvcGUiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJybSIsInVwZGF0ZUNoaWxkcmVuIiwib2xkQ2giLCJuZXdDaCIsInJlbW92ZU9ubHkiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwiY2FuTW92ZSIsInBhdGNoVm5vZGUiLCJuZXh0U2libGluZyIsImZpbmRJZHhJbk9sZCIsInNlZW5LZXlzIiwiZW5kIiwiaHlkcmF0ZSIsInNldFRleHRDb250ZW50IiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImlubmVySFRNTCIsImNoaWxkcmVuTWF0Y2giLCJjaGlsZE5vZGUiLCJmaXJzdENoaWxkIiwiY2hpbGROb2RlcyIsImZ1bGxJbnZva2UiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImRpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyaWJ1dGUiLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJjbGFzc18iLCJ0YXJnZXQkMSIsImFkZCQxIiwib2xkSGFuZGxlciIsInJlbW92ZSQyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZURPTUxpc3RlbmVycyIsImV2ZW50cyIsIm5vcm1hbGl6ZSIsImNyZWF0ZVN0eWxlIiwic3RhdGljU3R5bGUiLCJ1cGRhdGVTdHlsZSIsInNldFN0eWxlIiwib2xkU3R5bGUiLCJuZWVkQ2xvbmUiLCJ0b09iamVjdCQxIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJ0cmltIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJjYW5jZWxsZWQiLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImNoZWNrRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBsYXRmb3JtTW9kdWxlcyIsImFjdGlvbkJhciIsImFuZHJvaWQiLCJmcmFtZXMiLCJNYXAiLCJzZXRGcmFtZSIsImZyYW1lIiwiZ2V0RnJhbWUiLCJkZWxldGVGcmFtZSIsImRlbGV0ZSIsImhtckNoZWNraW5nIiwiaXNITVJDaGVja2luZyIsInJlc2V0SE1SQ2hlY2tpbmciLCJhZGRTdGF0dXNIYW5kbGVyIiwiaWRDb3VudGVyIiwiaGFzUm91dGVyVmlldyIsImNyZWF0ZWQiLCIkcHJvcHMiLCJhc3NpZ24iLCJkZXN0cm95ZWQiLCJfZ2V0RnJhbWUiLCJuYXRpdmVWaWV3IiwiX2Vuc3VyZVRyYW5zaXRpb25PYmplY3QiLCJfY29tcG9zZVRyYW5zaXRpb24iLCJlbnRyeSIsInBsYXRmb3JtRW50cnlQcm9wIiwiZW50cnlQcm9wIiwicGxhdGZvcm1Qcm9wIiwibm90aWZ5UGFnZU1vdW50ZWQiLCJwYWdlVm0iLCJuYXZpZ2F0ZSIsInBhZ2UiLCJiYWNrc3RhY2tFbnRyeSIsInJlc29sdmVkUGFnZSIsIm5hdkRlcHRoIiwiZnJhZ21lbnRUYWciLCJ2aWV3Q29udHJvbGxlciIsImlvcyIsIl9pb3MiLCJjb250cm9sbGVyIiwiZGVsZWdhdGUiLCJNYWpvclZlcnNpb24iLCJiYXJCdXR0b25JdGVtIiwiVUlCYXJCdXR0b25JdGVtIiwiYWxsb2MiLCJpbml0V2l0aFRpdGxlU3R5bGVUYXJnZXRBY3Rpb24iLCJVSUJhckJ1dHRvbkl0ZW1TdHlsZSIsIlBsYWluIiwibmF2aWdhdGlvbkl0ZW0iLCJiYWNrQmFyQnV0dG9uSXRlbSIsIm5ld0NvbnRyb2xsZXJzIiwiTlNNdXRhYmxlQXJyYXkiLCJpbml0V2l0aEFycmF5Iiwidmlld0NvbnRyb2xsZXJzIiwiY291bnQiLCJoaWRlc0JhY2tCdXR0b24iLCJiYWNrU3RhY2siLCJza2lwcGVkTmF2Q29udHJvbGxlciIsImxhc3RPYmplY3QiLCJpc0JhY2tzdGFja1NraXBwZWQiLCJyZW1vdmVMYXN0T2JqZWN0IiwiYWRkT2JqZWN0Iiwic2V0Vmlld0NvbnRyb2xsZXJzQW5pbWF0ZWQiLCJmcmFtZUlkIiwiX2FuZHJvaWQiLCJfaXNCYWNrIiwibWFuYWdlciIsIl9nZXRGcmFnbWVudE1hbmFnZXIiLCJjdXJyZW50RW50cnkiLCJfY3VycmVudEVudHJ5IiwibmV3RnJhZ21lbnRUYWciLCJuZXdGcmFnbWVudCIsImNyZWF0ZUZyYWdtZW50IiwiYW5pbWF0ZWQiLCJuYXZpZ2F0aW9uVHJhbnNpdGlvbiIsInRyYW5zYWN0aW9uIiwiYmVnaW5UcmFuc2FjdGlvbiIsIl9zZXRBbmRyb2lkRnJhZ21lbnRUcmFuc2l0aW9ucyIsImZyYWdtZW50IiwiY29udGFpbmVyVmlld0lkIiwiY29tbWl0QWxsb3dpbmdTdGF0ZUxvc3MiLCJiYWNrIiwiZ29CYWNrIiwiaXNCYWNrTmF2aWdhdGlvbiIsIm9mZiIsIlZVRV9WSUVXIiwidGlkIiwidlRlbXBsYXRlIiwiaWYiLCJtb3VudGVkIiwiJHRlbXBsYXRlcyIsIlRlbXBsYXRlQmFnIiwicmVnaXN0ZXJUZW1wbGF0ZSIsIl90ZW1wbGF0ZU1hcCIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwic2VsZWN0b3JGbiIsImNvbmRpdGlvbiIsInNjb3BlZEZuIiwiY29uZGl0aW9uRm4iLCJnZXRDb25kaXRpb25GbiIsImtleWVkVGVtcGxhdGUiLCJWdWVLZXllZFRlbXBsYXRlIiwidGVtcGxhdGVTZWxlY3RvckZuIiwiZW50cmllcyIsImN1cnIiLCJnZXRLZXllZFRlbXBsYXRlIiwicGF0Y2hUZW1wbGF0ZSIsImdldEF2YWlsYWJsZSIsImdldEtleWVkVGVtcGxhdGVzIiwiX2tleSIsIl9zY29wZWRGbiIsInByb3RvdHlwZUFjY2Vzc29ycyQxJDEiLCJjcmVhdGVWaWV3IiwibGlzdFZpZXciLCJPYnNlcnZhYmxlQXJyYXkiLCJpdGVtVGFwIiwiZ2V0SXRlbUNvbnRleHQiLCJvbkl0ZW1UYXAiLCJnZXRJdGVtIiwib25JdGVtTG9hZGluZyIsImN1cnJlbnRJdGVtIiwiX2l0ZW1UZW1wbGF0ZVNlbGVjdG9yIiwidmlldyIsImFsaWFzIiwiaW5kZXhfYWxpYXMiLCIkZXZlbiIsIiRvZGQiLCJnZXRGcmFtZUluc3RhbmNlIiwiZ2V0RnJhbWVCeUlkIiwiZmluZFBhcmVudE5hdmlnYXRpb25FbnRyeSIsIk5hdmlnYXRvclBsdWdpbiIsImluc3RhbGwiLCIkbmF2aWdhdGVCYWNrIiwibmF2RW50cnkiLCJkZWZhdWx0T3B0aW9ucyIsIiRuYXZpZ2F0ZVRvIiwibmF2RW50cnlJbnN0YW5jZSIsImRpc3Bvc2UiLCJkaXNwb3NlTmF0aXZlVmlldyIsIlBBR0VfUkVGIiwiX2ZpbmRQYXJlbnRGcmFtZSIsInRhYlZpZXciLCJyZWdpc3RlclRhYiIsInRhYlZpZXdJdGVtIiwiX25hdGl2ZVZpZXciLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsImlzU2FtZUNoaWxkIiwib2xkQ2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwiZWxlbWVudE1hcCIsIm5hdGl2ZVJlZ0V4cCIsImRhc2hSZWdFeHAiLCJkZWZhdWx0Vmlld01ldGEiLCJza2lwQWRkVG9Eb20iLCJpc1VuYXJ5VGFnIiwidGFnTmFtZXNwYWNlIiwiY2FuQmVMZWZ0T3BlblRhZyIsIm5vcm1hbGl6ZUVsZW1lbnROYW1lIiwiZWxlbWVudE5hbWUiLCJyZWdpc3RlckVsZW1lbnQiLCJyZXNvbHZlciIsIm1ldGEiLCJub3JtYWxpemVkTmFtZSIsImdldEVsZW1lbnRNYXAiLCJnZXRWaWV3Q2xhc3MiLCJnZXRWaWV3TWV0YSIsImlzS25vd25WaWV3IiwiQWN0aW9uQmFyIiwiX3JlbW92ZVZpZXciLCJBY3Rpb25JdGVtIiwiTGlzdFZpZXciLCJOYXZpZ2F0aW9uQnV0dG9uIiwiVGFiVmlldyIsIlRhYlZpZXdJdGVtIiwiTGFiZWwiLCJEYXRlUGlja2VyIiwiQWJzb2x1dGVMYXlvdXQiLCJBY3Rpdml0eUluZGljYXRvciIsIkJvcmRlciIsIkJ1dHRvbiIsIkNvbnRlbnRWaWV3IiwiRG9ja0xheW91dCIsIkdyaWRMYXlvdXQiLCJIdG1sVmlldyIsIkltYWdlIiwiTGlzdFBpY2tlciIsIlBhZ2UiLCJQbGFjZWhvbGRlciIsIlByb2dyZXNzIiwiUHJveHlWaWV3Q29udGFpbmVyIiwiU2Nyb2xsVmlldyIsIlNlYXJjaEJhciIsIlNlZ21lbnRlZEJhciIsIlNlZ21lbnRlZEJhckl0ZW0iLCJTbGlkZXIiLCJTdGFja0xheW91dCIsIkZsZXhib3hMYXlvdXQiLCJTd2l0Y2giLCJUZXh0RmllbGQiLCJUZXh0VmlldyIsIlRpbWVQaWNrZXIiLCJXZWJWaWV3IiwiV3JhcExheW91dCIsIkZvcm1hdHRlZFN0cmluZyIsIlNwYW4iLCJGcmFtZSIsImluc2VydENoaWxkIiwiYXRJbmRleCIsImlzb2JqZWN0IiwiaXNPYmplY3RPYmplY3QiLCJpc1BsYWluT2JqZWN0JDEiLCJwcm90Iiwic2V0JDEiLCJpc09iamVjdCQyIiwibWVyZ2UiLCJvcmlnIiwiY3JlYXRlS2V5IiwibWVtbyIsImNoYXIiLCJzZXBhcmF0b3IiLCJwYXR0ZXJuIiwic2V0VmFsdWUiLCJpc1ZpZXciLCJWaWV3IiwiaXNMYXlvdXQiLCJMYXlvdXRCYXNlIiwiaXNDb250ZW50VmlldyIsInBhcmVudFZpZXciLCJjaGlsZFZpZXciLCJnZXRDaGlsZEluZGV4IiwiYWRkQ2hpbGQiLCJfYWRkVmlldyIsIl9hZGRDaGlsZEZyb21CdWlsZGVyIiwiWE1MX0FUVFJJQlVURVMiLCJWaWV3Tm9kZSIsIl90YWdOYW1lIiwicHJldlNpYmxpbmciLCJfb3duZXJEb2N1bWVudCIsIl9tZXRhIiwicHJvdG90eXBlQWNjZXNzb3JzJDIiLCJsYXN0Q2hpbGQiLCJvd25lckRvY3VtZW50IiwibnYiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJYbWxQYXJzZXIiLCJfZGVyZWZlcmVuY2VFbnRpdGllcyIsInNldFRleHQiLCJyZWZlcmVuY2VOb2RlIiwicmVtb3ZlQ2hpbGQkMSIsIlZVRV9FTEVNRU5UX1JFRiIsIkVsZW1lbnROb2RlIiwidmlld0NsYXNzIiwiQ29tbWVudE5vZGUiLCJUZXh0Tm9kZSIsIkRvY3VtZW50Tm9kZSIsImRvY3VtZW50RWxlbWVudCIsIm5hbWVzcGFjZSIsIl9WdWUiLCJzZXRWdWUiLCJWVUVfVkVSU0lPTiIsIk5TX1ZVRV9WRVJTSU9OIiwiaW5mb1RyYWNlIiwibmFtZXNwYWNlTWFwIiwiY3JlYXRlRWxlbWVudCQxIiwibmV3Tm9kZSIsImVsZW1lbnROb2RlIiwic2NvcGVJZCIsImhlIiwiZGVjb2RlIiwiaHRtbCIsImlzVW5hcnlUYWckMSIsImNhbkJlTGVmdE9wZW5UYWckMSIsImlzTm9uUGhyYXNpbmdUYWciLCJhdHRyaWJ1dGUiLCJkeW5hbWljQXJnQXR0cmlidXRlIiwibmNuYW1lIiwicW5hbWVDYXB0dXJlIiwic3RhcnRUYWdPcGVuIiwic3RhcnRUYWdDbG9zZSIsImRvY3R5cGUiLCJjb21tZW50IiwiY29uZGl0aW9uYWxDb21tZW50IiwiaXNQbGFpblRleHRFbGVtZW50IiwicmVDYWNoZSIsImRlY29kaW5nTWFwIiwiZW5jb2RlZEF0dHIiLCJlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyIsImlzSWdub3JlTmV3bGluZVRhZyIsInNob3VsZElnbm9yZUZpcnN0TmV3bGluZSIsImRlY29kZUF0dHIiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsInBhcnNlSFRNTCIsImV4cGVjdEhUTUwiLCJsYXN0VGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsInN1YnN0cmluZyIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJwYXJzZUVuZFRhZyIsInN0YXJ0VGFnTWF0Y2giLCJwYXJzZVN0YXJ0VGFnIiwiaGFuZGxlU3RhcnRUYWciLCJyZXN0IiwiY2hhcnMiLCJlbmRUYWdMZW5ndGgiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVzdCQxIiwiYWxsIiwiYXR0ciIsInVuYXJ5U2xhc2giLCJ1bmFyeSIsInNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiIsIm91dHB1dFNvdXJjZVJhbmdlIiwibG93ZXJDYXNlZFRhZyIsInBvcyIsImxvd2VyQ2FzZWRUYWdOYW1lIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsImV4cCIsImluU2luZ2xlIiwiaW5Eb3VibGUiLCJpblRlbXBsYXRlU3RyaW5nIiwiaW5SZWdleCIsImN1cmx5Iiwic3F1YXJlIiwicGFyZW4iLCJsYXN0RmlsdGVySW5kZXgiLCJmaWx0ZXJzIiwicHVzaEZpbHRlciIsIndyYXBGaWx0ZXIiLCJkZWZhdWx0VGFnUkUiLCJyZWdleEVzY2FwZVJFIiwiYnVpbGRSZWdleCIsImRlbGltaXRlcnMiLCJvcGVuIiwiY2xvc2UiLCJwYXJzZVRleHQiLCJ0YWdSRSIsInRva2VucyIsInJhd1Rva2VucyIsInRva2VuVmFsdWUiLCJleGVjIiwiZ2VuQ29tcG9uZW50TW9kZWwiLCJudW1iZXIiLCJiYXNlVmFsdWVFeHByZXNzaW9uIiwidmFsdWVFeHByZXNzaW9uIiwiYXNzaWdubWVudCIsImdlbkFzc2lnbm1lbnRDb2RlIiwicGFyc2VNb2RlbCIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsImxhc3RJbmRleE9mIiwiZW9mIiwiaXNTdHJpbmdTdGFydCIsInBhcnNlU3RyaW5nIiwicGFyc2VCcmFja2V0IiwiaW5CcmFja2V0Iiwic3RyaW5nUXVvdGUiLCJiYXNlV2FybiIsInJhbmdlIiwicGx1Y2tNb2R1bGVGdW5jdGlvbiIsImFkZFByb3AiLCJkeW5hbWljIiwicmFuZ2VTZXRJdGVtIiwicGxhaW4iLCJhZGRBdHRyIiwiZHluYW1pY0F0dHJzIiwiYWRkUmF3QXR0ciIsImF0dHJzTWFwIiwiYXR0cnNMaXN0IiwiYWRkRGlyZWN0aXZlIiwiaXNEeW5hbWljQXJnIiwicHJlcGVuZE1vZGlmaWVyTWFya2VyIiwiYWRkSGFuZGxlciIsImltcG9ydGFudCIsInByZXZlbnQiLCJyaWdodCIsIm1pZGRsZSIsIm5hdGl2ZSIsIm5hdGl2ZUV2ZW50cyIsIm5ld0hhbmRsZXIiLCJ1bnNoaWZ0IiwiZ2V0UmF3QmluZGluZ0F0dHIiLCJyYXdBdHRyc01hcCIsImdldEJpbmRpbmdBdHRyIiwiZ2V0U3RhdGljIiwiZHluYW1pY1ZhbHVlIiwiZ2V0QW5kUmVtb3ZlQXR0ciIsInN0YXRpY1ZhbHVlIiwicmVtb3ZlRnJvbU1hcCIsImdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4Iiwib25SRSIsImRpclJFIiwiZm9yQWxpYXNSRSIsImZvckl0ZXJhdG9yUkUiLCJzdHJpcFBhcmVuc1JFIiwiZHluYW1pY0FyZ1JFIiwiYXJnUkUiLCJiaW5kUkUiLCJtb2RpZmllclJFIiwic2xvdFJFIiwibGluZUJyZWFrUkUiLCJ3aGl0ZXNwYWNlUkUkMSIsImludmFsaWRBdHRyaWJ1dGVSRSIsImRlY29kZUhUTUxDYWNoZWQiLCJlbXB0eVNsb3RTY29wZVRva2VuIiwid2FybiQxIiwidHJhbnNmb3JtcyIsInByZVRyYW5zZm9ybXMiLCJwb3N0VHJhbnNmb3JtcyIsInBsYXRmb3JtSXNQcmVUYWciLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJtYXliZUNvbXBvbmVudCIsImNyZWF0ZUFTVEVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJpc1ByZVRhZyIsInByZXNlcnZlV2hpdGVzcGFjZSIsIndoaXRlc3BhY2VPcHRpb24iLCJjdXJyZW50UGFyZW50IiwiaW5QcmUiLCJ3YXJuZWQiLCJ3YXJuT25jZSIsImNsb3NlRWxlbWVudCIsInRyaW1FbmRpbmdXaGl0ZXNwYWNlIiwicHJvY2Vzc2VkIiwicHJvY2Vzc0VsZW1lbnQiLCJlbHNlaWYiLCJlbHNlIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJhZGRJZkNvbmRpdGlvbiIsImJsb2NrIiwiZm9yYmlkZGVuIiwicHJvY2Vzc0lmQ29uZGl0aW9ucyIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJsYXN0Tm9kZSIsImNvbW1lbnRzIiwic3RhcnQkMSIsImd1YXJkSUVTVkdCdWciLCJjdW11bGF0ZWQiLCJpc0ZvcmJpZGRlblRhZyIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJlbmQkMSIsImlzVGV4dFRhZyIsInByb2Nlc3NLZXkiLCJwcm9jZXNzUmVmIiwicHJvY2Vzc1Nsb3RDb250ZW50IiwicHJvY2Vzc1Nsb3RPdXRsZXQiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2Vzc0F0dHJzIiwiZm9yIiwiaXRlcmF0b3IyIiwiaXRlcmF0b3IxIiwiY2hlY2tJbkZvciIsInBhcnNlRm9yIiwiaW5NYXRjaCIsIml0ZXJhdG9yTWF0Y2giLCJmaW5kUHJldkVsZW1lbnQiLCJpZkNvbmRpdGlvbnMiLCJzbG90VGFyZ2V0RHluYW1pYyIsInNsb3RCaW5kaW5nIiwiZ2V0U2xvdE5hbWUiLCJzbG90QmluZGluZyQxIiwicmVmJDEiLCJkeW5hbWljJDEiLCJzbG90Q29udGFpbmVyIiwiYmluZGluZyIsInNsb3ROYW1lIiwic3luY0dlbiIsImlzRHluYW1pYyIsImhhc0JpbmRpbmdzIiwicGFyc2VNb2RpZmllcnMiLCJjYW1lbCIsImFyZ01hdGNoIiwiY2hlY2tGb3JBbGlhc01vZGVsIiwiaWVOU0J1ZyIsImllTlNQcmVmaXgiLCJfZWwiLCJpc1N0YXRpY0tleSIsImlzUGxhdGZvcm1SZXNlcnZlZFRhZyIsImdlblN0YXRpY0tleXNDYWNoZWQiLCJnZW5TdGF0aWNLZXlzJDEiLCJvcHRpbWl6ZSIsIm1hcmtTdGF0aWMkMSIsIm1hcmtTdGF0aWNSb290cyIsInN0YXRpYyIsImwkMSIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsImlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIiwiZm5FeHBSRSIsImZuSW52b2tlUkUiLCJzaW1wbGVQYXRoUkUiLCJlc2MiLCJ0YWIiLCJzcGFjZSIsInVwIiwibGVmdCIsImRvd24iLCJrZXlOYW1lcyIsImdlbkd1YXJkIiwibW9kaWZpZXJDb2RlIiwic3RvcCIsImN0cmwiLCJhbHQiLCJnZW5IYW5kbGVycyIsInN0YXRpY0hhbmRsZXJzIiwiZHluYW1pY0hhbmRsZXJzIiwiaGFuZGxlckNvZGUiLCJnZW5IYW5kbGVyIiwiaXNNZXRob2RQYXRoIiwiaXNGdW5jdGlvbkV4cHJlc3Npb24iLCJpc0Z1bmN0aW9uSW52b2NhdGlvbiIsImNvZGUiLCJnZW5Nb2RpZmllckNvZGUiLCJrZXlNb2RpZmllciIsImdlbktleUZpbHRlciIsImdlbkZpbHRlckNvZGUiLCJrZXlWYWwiLCJwYXJzZUludCIsImtleUNvZGUiLCJrZXlOYW1lIiwid3JhcExpc3RlbmVycyIsImJpbmQkMSIsIndyYXBEYXRhIiwiYmFzZURpcmVjdGl2ZXMiLCJjbG9hayIsIkNvZGVnZW5TdGF0ZSIsImRhdGFHZW5GbnMiLCJvbmNlSWQiLCJnZW5lcmF0ZSIsImFzdCIsInN0YXRlIiwiZ2VuRWxlbWVudCIsInN0YXRpY1Byb2Nlc3NlZCIsImdlblN0YXRpYyIsIm9uY2VQcm9jZXNzZWQiLCJnZW5PbmNlIiwiZm9yUHJvY2Vzc2VkIiwiZ2VuRm9yIiwiaWZQcm9jZXNzZWQiLCJnZW5JZiIsImdlbkNoaWxkcmVuIiwiZ2VuU2xvdCIsImdlbkNvbXBvbmVudCIsImdlbkRhdGEiLCJvcmlnaW5hbFByZVN0YXRlIiwiYWx0R2VuIiwiYWx0RW1wdHkiLCJnZW5JZkNvbmRpdGlvbnMiLCJjb25kaXRpb25zIiwiZ2VuVGVybmFyeUV4cCIsImFsdEhlbHBlciIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJoYXNSdW50aW1lIiwibmVlZFJ1bnRpbWUiLCJnZW4iLCJpbmxpbmVSZW5kZXJGbnMiLCJjb250YWluc1Nsb3RDaGlsZCIsIm5lZWRzS2V5IiwiZ2VuZXJhdGVkU2xvdHMiLCJnZW5TY29wZWRTbG90IiwiaXNMZWdhY3lTeW50YXgiLCJyZXZlcnNlUHJveHkiLCJjaGVja1NraXAiLCJhbHRHZW5FbGVtZW50IiwiYWx0R2VuTm9kZSIsImVsJDEiLCJub3JtYWxpemF0aW9uVHlwZSQxIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwibmVlZHNOb3JtYWxpemF0aW9uIiwiZ2VuQ29tbWVudCIsImdlblRleHQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJjb21wb25lbnROYW1lIiwic3RhdGljUHJvcHMiLCJkeW5hbWljUHJvcHMiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwidW5hcnlPcGVyYXRvcnNSRSIsInN0cmlwU3RyaW5nUkUiLCJkZXRlY3RFcnJvcnMiLCJjaGVja05vZGUiLCJjaGVja0ZvciIsImNoZWNrRXZlbnQiLCJjaGVja0V4cHJlc3Npb24iLCJzdGlwcGVkIiwia2V5d29yZE1hdGNoIiwiY2hlY2tJZGVudGlmaWVyIiwiaWRlbnQiLCJnZW5lcmF0ZUNvZGVGcmFtZSIsImxpbmVzIiwicmVwZWF0JDEiLCJsaW5lTGVuZ3RoIiwicGFkIiwibGVuZ3RoJDEiLCJtaW4iLCJjcmVhdGVGdW5jdGlvbiIsImVycm9ycyIsImNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4iLCJjb21waWxlIiwiY29tcGlsZVRvRnVuY3Rpb25zIiwiY29tcGlsZWQiLCJ0aXBzIiwiZm5HZW5FcnJvcnMiLCJjcmVhdGVDb21waWxlckNyZWF0b3IiLCJiYXNlQ29tcGlsZSIsImNyZWF0ZUNvbXBpbGVyIiwiYmFzZU9wdGlvbnMiLCJmaW5hbE9wdGlvbnMiLCJsZWFkaW5nU3BhY2VMZW5ndGgiLCJ0cmFuc2Zvcm1Ob2RlIiwiY2xhc3NCaW5kaW5nIiwiZ2VuRGF0YSQxIiwiY2xhc3NfJDEiLCJub3JtYWxpemUkMSIsInRyYW5zZm9ybU5vZGUkMSIsInBhcnNlU3RhdGljU3R5bGUiLCJzdHlsZVJlc3VsdCIsInN0eWxlQmluZGluZyIsImdlbkRhdGEkMiIsInN0eWxlTGlzdCIsInN0eWxlJDEiLCJwcmVUcmFuc2Zvcm1Ob2RlIiwidmZvciIsImZvcl8iLCJwcmVUcmFuc2Zvcm1Ob2RlJDEiLCJyb3V0ZXIiLCJwcmVUcmFuc2Zvcm1Ob2RlJDIiLCJidWlsZFNjb3BlU3RyaW5nIiwidlRlbXBsYXRlJDEiLCJ0cmFuc2Zvcm1Ob2RlJDIiLCJmaW5kIiwiYXR0ck5hbWUiLCJtb2RzIiwibW9kdWxlcyQxIiwiZ2VuRGVmYXVsdE1vZGVsIiwiZGlyZWN0aXZlcyQxIiwiaW5pdFVzZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsImluaXRNaXhpbiQxIiwibWl4aW4iLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJDb21wIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiZGVmaW5pdGlvbiIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJwYXR0ZXJuVHlwZXMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsInV0aWwiLCJvYnNlcnZhYmxlIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJsb2NhdGVOb2RlIiwib3JpZ2luYWxWaXNpYmlsaXR5IiwiX192T3JpZ2luYWxWaXNpYmlsaXR5IiwidW5iaW5kIiwidmlldyQxIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwiJGRvY3VtZW50IiwiJHN0YXJ0IiwiQXBwQ29uc3RydWN0b3IiLCJsYXVuY2hFdmVudCIsIl9maW5kUGFyZW50TW9kYWxFbnRyeSIsIk1vZGFsUGx1Z2luIiwiJG1vZGFsIiwiY2xvc2VDYiIsIiRzaG93TW9kYWwiLCJtb2RhbFBhZ2UiLCJjbG9zZU1vZGFsIiwiY2xvc2VDYWxsYmFjayIsInNob3dNb2RhbCIsIm5ld0xpbmVSZWdFeHAiLCJkZWJ1ZyIsIl9fb25MaXZlU3luY0NvcmUiLCJ0b3Btb3N0IiwiY3VycmVudFBhZ2UiLCJtb2RhbCIsImFkZENzc0ZpbGUiLCJnZXRDc3NGaWxlTmFtZSIsIl9fVlVFX0hPVF9NQVBfXyIsImluc3RhbGxlZCIsImlzQnJvd3NlcmlmeSIsImluaXRIb29rTmFtZSIsInZ1ZSIsImJyb3dzZXJpZnkiLCJjb21wYXRpYmxlIiwiY3JlYXRlUmVjb3JkIiwibWFrZU9wdGlvbnNIb3QiLCJpbnN0YW5jZXMiLCJpc1JlY29yZGVkIiwiaW5qZWN0SG9vayIsInJlY29yZCIsInRyeVdyYXAiLCJ1cGRhdGVPcHRpb25zIiwib2xkT3B0aW9ucyIsIm5ld09wdGlvbnMiLCJyZXJlbmRlciIsImluc3RhbmNlIiwicmVzdG9yZSIsInBhdGNoU2NvcGVkU2xvdHMiLCJpbmplY3RTdHlsZXMiLCJfaW5qZWN0U3R5bGVzIiwicmVsb2FkIiwibmV3Q3RvciIsInJlbGVhc2UiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkJBQTJCLG1CQUFPLENBQUMsNENBQWtDO0FBQ3JFOzs7QUFHQTtBQUNBLGNBQWMsUUFBUyxvUEFBb1AsV0FBVyxZQUFZLHNCQUFzQixTQUFTLFdBQVcsWUFBWSxzQkFBc0IsUUFBUSxjQUFjLFdBQVcseUJBQXlCLFFBQVEsY0FBYyxXQUFXLHlCQUF5QixZQUFZLGNBQWMsZUFBZSx5QkFBeUIsU0FBUyxjQUFjLFlBQVkseUJBQXlCLFVBQVUsY0FBYyxhQUFhLHlCQUF5QixRQUFRLGNBQWMsV0FBVyx5QkFBeUIsY0FBYyxjQUFjLGlCQUFpQix5QkFBeUIsYUFBYSxjQUFjLGdCQUFnQix5QkFBeUIsVUFBVSxjQUFjLGFBQWEseUJBQXlCLFNBQVMsY0FBYyxZQUFZLHlCQUF5QixRQUFRLGNBQWMsV0FBVyx5QkFBeUIsVUFBVSxjQUFjLGFBQWEseUJBQXlCLFFBQVEsY0FBYyxXQUFXLHlCQUF5QixPQUFPLGNBQWMsVUFBVSx5QkFBeUIsUUFBUSxXQUFXLE9BQU8sVUFBVSxRQUFRLFlBQVksT0FBTyxXQUFXLEtBQUssU0FBUyxPQUFPLGFBQWEsT0FBTyxlQUFlLE9BQU8sZ0JBQWdCLE9BQU8sY0FBYyxPQUFPLGVBQWUsY0FBYyxPQUFPLGFBQWEsZ0JBQWdCLEtBQUssU0FBUyxPQUFPLGFBQWEsT0FBTyxlQUFlLE9BQU8sZ0JBQWdCLE9BQU8sY0FBYyxPQUFPLGVBQWUsY0FBYyxPQUFPLGFBQWEsZ0JBQWdCLEtBQUssU0FBUyxPQUFPLGFBQWEsT0FBTyxlQUFlLE9BQU8sZ0JBQWdCLE9BQU8sY0FBYyxPQUFPLGVBQWUsY0FBYyxPQUFPLGFBQWEsZ0JBQWdCLEtBQUssU0FBUyxPQUFPLGFBQWEsT0FBTyxlQUFlLE9BQU8sZ0JBQWdCLE9BQU8sY0FBYyxPQUFPLGVBQWUsY0FBYyxPQUFPLGFBQWEsZ0JBQWdCLEtBQUssU0FBUyxPQUFPLGFBQWEsT0FBTyxlQUFlLE9BQU8sZ0JBQWdCLE9BQU8sY0FBYyxPQUFPLGVBQWUsY0FBYyxPQUFPLGFBQWEsZ0JBQWdCLE1BQU0sVUFBVSxRQUFRLGNBQWMsUUFBUSxnQkFBZ0IsUUFBUSxpQkFBaUIsUUFBUSxlQUFlLFFBQVEsZ0JBQWdCLGVBQWUsUUFBUSxjQUFjLGlCQUFpQixNQUFNLFVBQVUsUUFBUSxjQUFjLFFBQVEsZ0JBQWdCLFFBQVEsaUJBQWlCLFFBQVEsZUFBZSxRQUFRLGdCQUFnQixlQUFlLFFBQVEsY0FBYyxpQkFBaUIsTUFBTSxVQUFVLFFBQVEsY0FBYyxRQUFRLGdCQUFnQixRQUFRLGlCQUFpQixRQUFRLGVBQWUsUUFBUSxnQkFBZ0IsZUFBZSxRQUFRLGNBQWMsaUJBQWlCLE1BQU0sVUFBVSxRQUFRLGNBQWMsUUFBUSxnQkFBZ0IsUUFBUSxpQkFBaUIsUUFBUSxlQUFlLFFBQVEsZ0JBQWdCLGVBQWUsUUFBUSxjQUFjLGlCQUFpQixNQUFNLFVBQVUsUUFBUSxjQUFjLFFBQVEsZ0JBQWdCLFFBQVEsaUJBQWlCLFFBQVEsZUFBZSxRQUFRLGdCQUFnQixlQUFlLFFBQVEsY0FBYyxpQkFBaUIsTUFBTSxVQUFVLFFBQVEsY0FBYyxRQUFRLGdCQUFnQixRQUFRLGlCQUFpQixRQUFRLGVBQWUsUUFBUSxnQkFBZ0IsZUFBZSxRQUFRLGNBQWMsaUJBQWlCLE1BQU0sVUFBVSxRQUFRLGNBQWMsUUFBUSxnQkFBZ0IsUUFBUSxpQkFBaUIsUUFBUSxlQUFlLFFBQVEsZ0JBQWdCLGVBQWUsUUFBUSxjQUFjLGlCQUFpQixNQUFNLFVBQVUsUUFBUSxjQUFjLFFBQVEsZ0JBQWdCLFFBQVEsaUJBQWlCLFFBQVEsZUFBZSxRQUFRLGdCQUFnQixlQUFlLFFBQVEsY0FBYyxpQkFBaUIsTUFBTSxVQUFVLFFBQVEsY0FBYyxRQUFRLGdCQUFnQixRQUFRLGlCQUFpQixRQUFRLGVBQWUsUUFBUSxnQkFBZ0IsZUFBZSxRQUFRLGNBQWMsaUJBQWlCLEtBQUssVUFBVSxPQUFPLGNBQWMsT0FBTyxnQkFBZ0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLE9BQU8sZ0JBQWdCLGVBQWUsT0FBTyxjQUFjLGlCQUFpQixLQUFLLFVBQVUsT0FBTyxjQUFjLE9BQU8sZ0JBQWdCLE9BQU8saUJBQWlCLE9BQU8sZUFBZSxPQUFPLGdCQUFnQixlQUFlLE9BQU8sY0FBYyxpQkFBaUIsS0FBSyxVQUFVLE9BQU8sY0FBYyxPQUFPLGdCQUFnQixPQUFPLGlCQUFpQixPQUFPLGVBQWUsT0FBTyxnQkFBZ0IsZUFBZSxPQUFPLGNBQWMsaUJBQWlCLEtBQUssVUFBVSxPQUFPLGNBQWMsT0FBTyxnQkFBZ0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLE9BQU8sZ0JBQWdCLGVBQWUsT0FBTyxjQUFjLGlCQUFpQixLQUFLLFVBQVUsT0FBTyxjQUFjLE9BQU8sZ0JBQWdCLE9BQU8saUJBQWlCLE9BQU8sZUFBZSxPQUFPLGdCQUFnQixlQUFlLE9BQU8sY0FBYyxpQkFBaUIsTUFBTSxXQUFXLFFBQVEsZUFBZSxRQUFRLGlCQUFpQixRQUFRLGtCQUFrQixRQUFRLGdCQUFnQixRQUFRLGlCQUFpQixnQkFBZ0IsUUFBUSxlQUFlLGtCQUFrQixNQUFNLFdBQVcsUUFBUSxlQUFlLFFBQVEsaUJBQWlCLFFBQVEsa0JBQWtCLFFBQVEsZ0JBQWdCLFFBQVEsaUJBQWlCLGdCQUFnQixRQUFRLGVBQWUsa0JBQWtCLE1BQU0sV0FBVyxRQUFRLGVBQWUsUUFB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O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ2ZW5kb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxyXFxuICogTmF0aXZlU2NyaXB0IFRoZW1lIHYxLjAuNiAoaHR0cHM6Ly9uYXRpdmVzY3JpcHQub3JnKVxcclxcbiAqIENvcHlyaWdodCAyMDE2LTIwMTYgVGhlIFRoZW1lIEF1dGhvcnNcXHJcXG4gKiBDb3B5cmlnaHQgMjAxNi0yMDE2IFRlbGVyaWtcXHJcXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9OYXRpdmVTY3JpcHQvdGhlbWUvYmxvYi9tYXN0ZXIvTElDRU5TRSlcXHJcXG4gKi8uYy13aGl0ZXtjb2xvcjojZmZmfS5jLWJnLXdoaXRle2JhY2tncm91bmQtY29sb3I6I2ZmZn0uYy1ibGFja3tjb2xvcjojMDAwfS5jLWJnLWJsYWNre2JhY2tncm91bmQtY29sb3I6IzAwMH0uYy1hcXVhe2NvbG9yOiMwMGNhYWJ9LmMtYmctYXF1YXtiYWNrZ3JvdW5kLWNvbG9yOiMwMGNhYWJ9LmMtYmx1ZXtjb2xvcjojM2Q1YWZlfS5jLWJnLWJsdWV7YmFja2dyb3VuZC1jb2xvcjojM2Q1YWZlfS5jLWNoYXJjb2Fse2NvbG9yOiMzMDMwMzB9LmMtYmctY2hhcmNvYWx7YmFja2dyb3VuZC1jb2xvcjojMzAzMDMwfS5jLWJyb3due2NvbG9yOiM3OTU1NDh9LmMtYmctYnJvd257YmFja2dyb3VuZC1jb2xvcjojNzk1NTQ4fS5jLWZvcmVzdHtjb2xvcjojMDA2OTY4fS5jLWJnLWZvcmVzdHtiYWNrZ3JvdW5kLWNvbG9yOiMwMDY5Njh9LmMtZ3JleXtjb2xvcjojZTBlMGUwfS5jLWJnLWdyZXl7YmFja2dyb3VuZC1jb2xvcjojZTBlMGUwfS5jLWdyZXktbGlnaHR7Y29sb3I6I2JhYmFiYX0uYy1iZy1ncmV5LWxpZ2h0e2JhY2tncm91bmQtY29sb3I6I2JhYmFiYX0uYy1ncmV5LWRhcmt7Y29sb3I6IzVjNjg3Y30uYy1iZy1ncmV5LWRhcmt7YmFja2dyb3VuZC1jb2xvcjojNWM2ODdjfS5jLXB1cnBsZXtjb2xvcjojODEzMGZmfS5jLWJnLXB1cnBsZXtiYWNrZ3JvdW5kLWNvbG9yOiM4MTMwZmZ9LmMtbGVtb257Y29sb3I6I2ZmZWEwMH0uYy1iZy1sZW1vbntiYWNrZ3JvdW5kLWNvbG9yOiNmZmVhMDB9LmMtbGltZXtjb2xvcjojYWVlNDA2fS5jLWJnLWxpbWV7YmFja2dyb3VuZC1jb2xvcjojYWVlNDA2fS5jLW9yYW5nZXtjb2xvcjojZjU3YzAwfS5jLWJnLW9yYW5nZXtiYWNrZ3JvdW5kLWNvbG9yOiNmNTdjMDB9LmMtcnVieXtjb2xvcjojZmYxNzQ0fS5jLWJnLXJ1Ynl7YmFja2dyb3VuZC1jb2xvcjojZmYxNzQ0fS5jLXNreXtjb2xvcjojMzBiY2ZmfS5jLWJnLXNreXtiYWNrZ3JvdW5kLWNvbG9yOiMzMGJjZmZ9LnctZnVsbHt3aWR0aDoxMDAlfS53LTEwMHt3aWR0aDoxMDB9LmgtZnVsbHtoZWlnaHQ6MTAwJX0uaC0xMDB7aGVpZ2h0OjEwMH0ubS0we21hcmdpbjowfS5tLXQtMHttYXJnaW4tdG9wOjB9Lm0tci0we21hcmdpbi1yaWdodDowfS5tLWItMHttYXJnaW4tYm90dG9tOjB9Lm0tbC0we21hcmdpbi1sZWZ0OjB9Lm0teC0we21hcmdpbi1yaWdodDowO21hcmdpbi1sZWZ0OjB9Lm0teS0we21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjB9Lm0tMnttYXJnaW46Mn0ubS10LTJ7bWFyZ2luLXRvcDoyfS5tLXItMnttYXJnaW4tcmlnaHQ6Mn0ubS1iLTJ7bWFyZ2luLWJvdHRvbToyfS5tLWwtMnttYXJnaW4tbGVmdDoyfS5tLXgtMnttYXJnaW4tcmlnaHQ6MjttYXJnaW4tbGVmdDoyfS5tLXktMnttYXJnaW4tdG9wOjI7bWFyZ2luLWJvdHRvbToyfS5tLTR7bWFyZ2luOjR9Lm0tdC00e21hcmdpbi10b3A6NH0ubS1yLTR7bWFyZ2luLXJpZ2h0OjR9Lm0tYi00e21hcmdpbi1ib3R0b206NH0ubS1sLTR7bWFyZ2luLWxlZnQ6NH0ubS14LTR7bWFyZ2luLXJpZ2h0OjQ7bWFyZ2luLWxlZnQ6NH0ubS15LTR7bWFyZ2luLXRvcDo0O21hcmdpbi1ib3R0b206NH0ubS01e21hcmdpbjo1fS5tLXQtNXttYXJnaW4tdG9wOjV9Lm0tci01e21hcmdpbi1yaWdodDo1fS5tLWItNXttYXJnaW4tYm90dG9tOjV9Lm0tbC01e21hcmdpbi1sZWZ0OjV9Lm0teC01e21hcmdpbi1yaWdodDo1O21hcmdpbi1sZWZ0OjV9Lm0teS01e21hcmdpbi10b3A6NTttYXJnaW4tYm90dG9tOjV9Lm0tOHttYXJnaW46OH0ubS10LTh7bWFyZ2luLXRvcDo4fS5tLXItOHttYXJnaW4tcmlnaHQ6OH0ubS1iLTh7bWFyZ2luLWJvdHRvbTo4fS5tLWwtOHttYXJnaW4tbGVmdDo4fS5tLXgtOHttYXJnaW4tcmlnaHQ6ODttYXJnaW4tbGVmdDo4fS5tLXktOHttYXJnaW4tdG9wOjg7bWFyZ2luLWJvdHRvbTo4fS5tLTEwe21hcmdpbjoxMH0ubS10LTEwe21hcmdpbi10b3A6MTB9Lm0tci0xMHttYXJnaW4tcmlnaHQ6MTB9Lm0tYi0xMHttYXJnaW4tYm90dG9tOjEwfS5tLWwtMTB7bWFyZ2luLWxlZnQ6MTB9Lm0teC0xMHttYXJnaW4tcmlnaHQ6MTA7bWFyZ2luLWxlZnQ6MTB9Lm0teS0xMHttYXJnaW4tdG9wOjEwO21hcmdpbi1ib3R0b206MTB9Lm0tMTJ7bWFyZ2luOjEyfS5tLXQtMTJ7bWFyZ2luLXRvcDoxMn0ubS1yLTEye21hcmdpbi1yaWdodDoxMn0ubS1iLTEye21hcmdpbi1ib3R0b206MTJ9Lm0tbC0xMnttYXJnaW4tbGVmdDoxMn0ubS14LTEye21hcmdpbi1yaWdodDoxMjttYXJnaW4tbGVmdDoxMn0ubS15LTEye21hcmdpbi10b3A6MTI7bWFyZ2luLWJvdHRvbToxMn0ubS0xNXttYXJnaW46MTV9Lm0tdC0xNXttYXJnaW4tdG9wOjE1fS5tLXItMTV7bWFyZ2luLXJpZ2h0OjE1fS5tLWItMTV7bWFyZ2luLWJvdHRvbToxNX0ubS1sLTE1e21hcmdpbi1sZWZ0OjE1fS5tLXgtMTV7bWFyZ2luLXJpZ2h0OjE1O21hcmdpbi1sZWZ0OjE1fS5tLXktMTV7bWFyZ2luLXRvcDoxNTttYXJnaW4tYm90dG9tOjE1fS5tLTE2e21hcmdpbjoxNn0ubS10LTE2e21hcmdpbi10b3A6MTZ9Lm0tci0xNnttYXJnaW4tcmlnaHQ6MTZ9Lm0tYi0xNnttYXJnaW4tYm90dG9tOjE2fS5tLWwtMTZ7bWFyZ2luLWxlZnQ6MTZ9Lm0teC0xNnttYXJnaW4tcmlnaHQ6MTY7bWFyZ2luLWxlZnQ6MTZ9Lm0teS0xNnttYXJnaW4tdG9wOjE2O21hcmdpbi1ib3R0b206MTZ9Lm0tMjB7bWFyZ2luOjIwfS5tLXQtMjB7bWFyZ2luLXRvcDoyMH0ubS1yLTIwe21hcmdpbi1yaWdodDoyMH0ubS1iLTIwe21hcmdpbi1ib3R0b206MjB9Lm0tbC0yMHttYXJnaW4tbGVmdDoyMH0ubS14LTIwe21hcmdpbi1yaWdodDoyMDttYXJnaW4tbGVmdDoyMH0ubS15LTIwe21hcmdpbi10b3A6MjA7bWFyZ2luLWJvdHRvbToyMH0ubS0yNHttYXJnaW46MjR9Lm0tdC0yNHttYXJnaW4tdG9wOjI0fS5tLXItMjR7bWFyZ2luLXJpZ2h0OjI0fS5tLWItMjR7bWFyZ2luLWJvdHRvbToyNH0ubS1sLTI0e21hcmdpbi1sZWZ0OjI0fS5tLXgtMjR7bWFyZ2luLXJpZ2h0OjI0O21hcmdpbi1sZWZ0OjI0fS5tLXktMjR7bWFyZ2luLXRvcDoyNDttYXJnaW4tYm90dG9tOjI0fS5tLTI1e21hcmdpbjoyNX0ubS10LTI1e21hcmdpbi10b3A6MjV9Lm0tci0yNXttYXJnaW4tcmlnaHQ6MjV9Lm0tYi0yNXttYXJnaW4tYm90dG9tOjI1fS5tLWwtMjV7bWFyZ2luLWxlZnQ6MjV9Lm0teC0yNXttYXJnaW4tcmlnaHQ6MjU7bWFyZ2luLWxlZnQ6MjV9Lm0teS0yNXttYXJnaW4tdG9wOjI1O21hcmdpbi1ib3R0b206MjV9Lm0tMjh7bWFyZ2luOjI4fS5tLXQtMjh7bWFyZ2luLXRvcDoyOH0ubS1yLTI4e21hcmdpbi1yaWdodDoyOH0ubS1iLTI4e21hcmdpbi1ib3R0b206Mjh9Lm0tbC0yOHttYXJnaW4tbGVmdDoyOH0ubS14LTI4e21hcmdpbi1yaWdodDoyODttYXJnaW4tbGVmdDoyOH0ubS15LTI4e21hcmdpbi10b3A6Mjg7bWFyZ2luLWJvdHRvbToyOH0ubS0zMHttYXJnaW46MzB9Lm0tdC0zMHttYXJnaW4tdG9wOjMwfS5tLXItMzB7bWFyZ2luLXJpZ2h0OjMwfS5tLWItMzB7bWFyZ2luLWJvdHRvbTozMH0ubS1sLTMwe21hcmdpbi1sZWZ0OjMwfS5tLXgtMzB7bWFyZ2luLXJpZ2h0OjMwO21hcmdpbi1sZWZ0OjMwfS5tLXktMzB7bWFyZ2luLXRvcDozMDttYXJnaW4tYm90dG9tOjMwfS5wLTB7cGFkZGluZzowfS5wLXQtMHtwYWRkaW5nLXRvcDowfS5wLXItMHtwYWRkaW5nLXJpZ2h0OjB9LnAtYi0we3BhZGRpbmctYm90dG9tOjB9LnAtbC0we3BhZGRpbmctbGVmdDowfS5wLXgtMHtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjB9LnAteS0we3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MH0ucC0ye3BhZGRpbmc6Mn0ucC10LTJ7cGFkZGluZy10b3A6Mn0ucC1yLTJ7cGFkZGluZy1yaWdodDoyfS5wLWItMntwYWRkaW5nLWJvdHRvbToyfS5wLWwtMntwYWRkaW5nLWxlZnQ6Mn0ucC14LTJ7cGFkZGluZy1yaWdodDoyO3BhZGRpbmctbGVmdDoyfS5wLXktMntwYWRkaW5nLXRvcDoyO3BhZGRpbmctYm90dG9tOjJ9LnAtNHtwYWRkaW5nOjR9LnAtdC00e3BhZGRpbmctdG9wOjR9LnAtci00e3BhZGRpbmctcmlnaHQ6NH0ucC1iLTR7cGFkZGluZy1ib3R0b206NH0ucC1sLTR7cGFkZGluZy1sZWZ0OjR9LnAteC00e3BhZGRpbmctcmlnaHQ6NDtwYWRkaW5nLWxlZnQ6NH0ucC15LTR7cGFkZGluZy10b3A6NDtwYWRkaW5nLWJvdHRvbTo0fS5wLTV7cGFkZGluZzo1fS5wLXQtNXtwYWRkaW5nLXRvcDo1fS5wLXItNXtwYWRkaW5nLXJpZ2h0OjV9LnAtYi01e3BhZGRpbmctYm90dG9tOjV9LnAtbC01e3BhZGRpbmctbGVmdDo1fS5wLXgtNXtwYWRkaW5nLXJpZ2h0OjU7cGFkZGluZy1sZWZ0OjV9LnAteS01e3BhZGRpbmctdG9wOjU7cGFkZGluZy1ib3R0b206NX0ucC04e3BhZGRpbmc6OH0ucC10LTh7cGFkZGluZy10b3A6OH0ucC1yLTh7cGFkZGluZy1yaWdodDo4fS5wLWItOHtwYWRkaW5nLWJvdHRvbTo4fS5wLWwtOHtwYWRkaW5nLWxlZnQ6OH0ucC14LTh7cGFkZGluZy1yaWdodDo4O3BhZGRpbmctbGVmdDo4fS5wLXktOHtwYWRkaW5nLXRvcDo4O3BhZGRpbmctYm90dG9tOjh9LnAtMTB7cGFkZGluZzoxMH0ucC10LTEwe3BhZGRpbmctdG9wOjEwfS5wLXItMTB7cGFkZGluZy1yaWdodDoxMH0ucC1iLTEwe3BhZGRpbmctYm90dG9tOjEwfS5wLWwtMTB7cGFkZGluZy1sZWZ0OjEwfS5wLXgtMTB7cGFkZGluZy1yaWdodDoxMDtwYWRkaW5nLWxlZnQ6MTB9LnAteS0xMHtwYWRkaW5nLXRvcDoxMDtwYWRkaW5nLWJvdHRvbToxMH0ucC0xMntwYWRkaW5nOjEyfS5wLXQtMTJ7cGFkZGluZy10b3A6MTJ9LnAtci0xMntwYWRkaW5nLXJpZ2h0OjEyfS5wLWItMTJ7cGFkZGluZy1ib3R0b206MTJ9LnAtbC0xMntwYWRkaW5nLWxlZnQ6MTJ9LnAteC0xMntwYWRkaW5nLXJpZ2h0OjEyO3BhZGRpbmctbGVmdDoxMn0ucC15LTEye3BhZGRpbmctdG9wOjEyO3BhZGRpbmctYm90dG9tOjEyfS5wLTE1e3BhZGRpbmc6MTV9LnAtdC0xNXtwYWRkaW5nLXRvcDoxNX0ucC1yLTE1e3BhZGRpbmctcmlnaHQ6MTV9LnAtYi0xNXtwYWRkaW5nLWJvdHRvbToxNX0ucC1sLTE1e3BhZGRpbmctbGVmdDoxNX0ucC14LTE1e3BhZGRpbmctcmlnaHQ6MTU7cGFkZGluZy1sZWZ0OjE1fS5wLXktMTV7cGFkZGluZy10b3A6MTU7cGFkZGluZy1ib3R0b206MTV9LnAtMTZ7cGFkZGluZzoxNn0ucC10LTE2e3BhZGRpbmctdG9wOjE2fS5wLXItMTZ7cGFkZGluZy1yaWdodDoxNn0ucC1iLTE2e3BhZGRpbmctYm90dG9tOjE2fS5wLWwtMTZ7cGFkZGluZy1sZWZ0OjE2fS5wLXgtMTZ7cGFkZGluZy1yaWdodDoxNjtwYWRkaW5nLWxlZnQ6MTZ9LnAteS0xNntwYWRkaW5nLXRvcDoxNjtwYWRkaW5nLWJvdHRvbToxNn0ucC0yMHtwYWRkaW5nOjIwfS5wLXQtMjB7cGFkZGluZy10b3A6MjB9LnAtci0yMHtwYWRkaW5nLXJpZ2h0OjIwfS5wLWItMjB7cGFkZGluZy1ib3R0b206MjB9LnAtbC0yMHtwYWRkaW5nLWxlZnQ6MjB9LnAteC0yMHtwYWRkaW5nLXJpZ2h0OjIwO3BhZGRpbmctbGVmdDoyMH0ucC15LTIwe3BhZGRpbmctdG9wOjIwO3BhZGRpbmctYm90dG9tOjIwfS5wLTI0e3BhZGRpbmc6MjR9LnAtdC0yNHtwYWRkaW5nLXRvcDoyNH0ucC1yLTI0e3BhZGRpbmctcmlnaHQ6MjR9LnAtYi0yNHtwYWRkaW5nLWJvdHRvbToyNH0ucC1sLTI0e3BhZGRpbmctbGVmdDoyNH0ucC14LTI0e3BhZGRpbmctcmlnaHQ6MjQ7cGFkZGluZy1sZWZ0OjI0fS5wLXktMjR7cGFkZGluZy10b3A6MjQ7cGFkZGluZy1ib3R0b206MjR9LnAtMjV7cGFkZGluZzoyNX0ucC10LTI1e3BhZGRpbmctdG9wOjI1fS5wLXItMjV7cGFkZGluZy1yaWdodDoyNX0ucC1iLTI1e3BhZGRpbmctYm90dG9tOjI1fS5wLWwtMjV7cGFkZGluZy1sZWZ0OjI1fS5wLXgtMjV7cGFkZGluZy1yaWdodDoyNTtwYWRkaW5nLWxlZnQ6MjV9LnAteS0yNXtwYWRkaW5nLXRvcDoyNTtwYWRkaW5nLWJvdHRvbToyNX0ucC0yOHtwYWRkaW5nOjI4fS5wLXQtMjh7cGFkZGluZy10b3A6Mjh9LnAtci0yOHtwYWRkaW5nLXJpZ2h0OjI4fS5wLWItMjh7cGFkZGluZy1ib3R0b206Mjh9LnAtbC0yOHtwYWRkaW5nLWxlZnQ6Mjh9LnAteC0yOHtwYWRkaW5nLXJpZ2h0OjI4O3BhZGRpbmctbGVmdDoyOH0ucC15LTI4e3BhZGRpbmctdG9wOjI4O3BhZGRpbmctYm90dG9tOjI4fS5wLTMwe3BhZGRpbmc6MzB9LnAtdC0zMHtwYWRkaW5nLXRvcDozMH0ucC1yLTMwe3BhZGRpbmctcmlnaHQ6MzB9LnAtYi0zMHtwYWRkaW5nLWJvdHRvbTozMH0ucC1sLTMwe3BhZGRpbmctbGVmdDozMH0ucC14LTMwe3BhZGRpbmctcmlnaHQ6MzA7cGFkZGluZy1sZWZ0OjMwfS5wLXktMzB7cGFkZGluZy10b3A6MzA7cGFkZGluZy1ib3R0b206MzB9LmhyLWxpZ2h0e2hlaWdodDoxO2JhY2tncm91bmQtY29sb3I6I2UwZTBlMDt3aWR0aDoxMDAlfS5oci1kYXJre2hlaWdodDoxO2JhY2tncm91bmQtY29sb3I6IzMwMzAzMDt3aWR0aDoxMDAlfS50ZXh0LWxlZnR7dGV4dC1hbGlnbjpsZWZ0fS50ZXh0LXJpZ2h0e3RleHQtYWxpZ246cmlnaHR9LnRleHQtY2VudGVye3RleHQtYWxpZ246Y2VudGVyfS50ZXh0LWxvd2VyY2FzZXt0ZXh0LXRyYW5zZm9ybTpsb3dlcmNhc2V9LnRleHQtdXBwZXJjYXNle3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0udGV4dC1jYXBpdGFsaXple3RleHQtdHJhbnNmb3JtOmNhcGl0YWxpemV9LmZvbnQtd2VpZ2h0LW5vcm1hbHtmb250LXdlaWdodDpub3JtYWx9LmZvbnQtd2VpZ2h0LWJvbGR7Zm9udC13ZWlnaHQ6Ym9sZH0uZm9udC1pdGFsaWN7Zm9udC1zdHlsZTppdGFsaWN9LnQtMTB7Zm9udC1zaXplOjEwfS50LTEye2ZvbnQtc2l6ZToxMn0udC0xNHtmb250LXNpemU6MTR9LnQtMTV7Zm9udC1zaXplOjE1fS50LTE2e2ZvbnQtc2l6ZToxNn0udC0xN3tmb250LXNpemU6MTd9LnQtMTh7Zm9udC1zaXplOjE4fS50LTE5e2ZvbnQtc2l6ZToxOX0udC0yMHtmb250LXNpemU6MjB9LnQtMjV7Zm9udC1zaXplOjI1fS50LTMwe2ZvbnQtc2l6ZTozMH0uaW1nLXJvdW5kZWR7Ym9yZGVyLXJhZGl1czo1fS5pbWctY2lyY2xle2JvcmRlci1yYWRpdXM6MjB9LmltZy10aHVtYm5haWx7Ym9yZGVyLXJhZGl1czowfS5pbnZpc2libGV7dmlzaWJpbGl0eTpjb2xsYXBzZX0ucHVsbC1sZWZ0e2hvcml6b250YWwtYWxpZ246bGVmdH0ucHVsbC1yaWdodHtob3Jpem9udGFsLWFsaWduOnJpZ2h0fS5tLXgtYXV0b3tob3Jpem9udGFsLWFsaWduOmNlbnRlcn0ubS15LWF1dG97dmVydGljYWwtYWxpZ246Y2VudGVyfS50ZXh0LXByaW1hcnl7Y29sb3I6IzMwYmNmZn0udGV4dC1kYW5nZXJ7Y29sb3I6I2Q1MDAwMH0udGV4dC1tdXRlZHtjb2xvcjojOWU5ZTllfS5iZy1wcmltYXJ5e2JhY2tncm91bmQtY29sb3I6IzMwYmNmZjtjb2xvcjojZmZmfS5iZy1kYW5nZXJ7YmFja2dyb3VuZC1jb2xvcjojZDUwMDAwO2NvbG9yOiNmZmZ9LmFjdGlvbi1iYXJ7YmFja2dyb3VuZC1jb2xvcjojRjhGOEY4O2NvbG9yOiMyMTIxMjF9LmFjdGlvbi1iYXIgLmFjdGlvbi1iYXItdGl0bGV7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTc7dmVydGljYWwtYWxpZ246Y2VudGVyfS5hY3Rpb24tYmFyIC5hY3Rpb24taXRlbXtmb250LXdlaWdodDpub3JtYWx9LmFjdGl2aXR5LWluZGljYXRvcntjb2xvcjojMzBiY2ZmO3dpZHRoOjMwO2hlaWdodDozMH0uYnRue2NvbG9yOiMzMGJjZmY7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDttaW4taGVpZ2h0OjM2O21pbi13aWR0aDo2NDtwYWRkaW5nOjEwIDEwIDEwIDEwO2ZvbnQtc2l6ZToxODttYXJnaW46OCAxNiA4IDE2fS5idG4uYnRuLWFjdGl2ZTpoaWdobGlnaHRlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2MwZWJmZn0uYnRuLXByaW1hcnl7YmFja2dyb3VuZC1jb2xvcjojMzBiY2ZmO2JvcmRlci1jb2xvcjojMzBiY2ZmO2NvbG9yOiNmZmZ9LmJ0bi1wcmltYXJ5LmJ0bi1hY3RpdmU6aGlnaGxpZ2h0ZWR7YmFja2dyb3VuZC1jb2xvcjojMDFhMGVjO2JvcmRlci1jb2xvcjojMDFhMGVjfS5idG4tcHJpbWFyeS5idG4tYXF1YXtiYWNrZ3JvdW5kLWNvbG9yOiMwMGNhYWJ9LmJ0bi1wcmltYXJ5LmJ0bi1ibHVle2JhY2tncm91bmQtY29sb3I6IzNkNWFmZX0uYnRuLXByaW1hcnkuYnRuLWJyb3due2JhY2tncm91bmQtY29sb3I6Izc5NTU0OH0uYnRuLXByaW1hcnkuYnRuLWZvcmVzdHtiYWNrZ3JvdW5kLWNvbG9yOiMwMDY5Njh9LmJ0bi1wcmltYXJ5LmJ0bi1ncmV5e2JhY2tncm91bmQtY29sb3I6IzVjNjg3Y30uYnRuLXByaW1hcnkuYnRuLWxlbW9ue2JhY2tncm91bmQtY29sb3I6I2ZmZWEwMDtjb2xvcjojMDAwfS5idG4tcHJpbWFyeS5idG4tbGltZXtiYWNrZ3JvdW5kLWNvbG9yOiNhZWU0MDY7Y29sb3I6IzAwMH0uYnRuLXByaW1hcnkuYnRuLW9yYW5nZXtiYWNrZ3JvdW5kLWNvbG9yOiNmNTdjMDB9LmJ0bi1wcmltYXJ5LmJ0bi1wdXJwbGV7YmFja2dyb3VuZC1jb2xvcjojODEzMGZmfS5idG4tcHJpbWFyeS5idG4tcnVieXtiYWNrZ3JvdW5kLWNvbG9yOiNmZjE3NDR9LmJ0bi1wcmltYXJ5LmJ0bi1za3l7YmFja2dyb3VuZC1jb2xvcjojMzBiY2ZmfS5idG4tb3V0bGluZXtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1jb2xvcjojMzBiY2ZmO2NvbG9yOiMzMGJjZmZ9LmJ0bi1vdXRsaW5lLmJ0bi1hY3RpdmU6aGlnaGxpZ2h0ZWR7YmFja2dyb3VuZC1jb2xvcjojYzBlYmZmfS5idG5baXNFbmFibGVkPWZhbHNlXXtjb2xvcjojYTRhNGE0O2JhY2tncm91bmQtY29sb3I6I2UwZTBlMDtib3JkZXItY29sb3I6I2UwZTBlMH0uZmF7Zm9udC1mYW1pbHk6Rm9udEF3ZXNvbWUsIGZvbnRhd2Vzb21lLXdlYmZvbnR9LmZvcm0gLmlucHV0e3BhZGRpbmc6MTYgOCAxNiA4O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9LmZvcm0gLmlucHV0LmlucHV0LWJvcmRlcntib3JkZXItd2lkdGg6MTtib3JkZXItY29sb3I6I2UwZTBlMDtib3JkZXItcmFkaXVzOjI7cGFkZGluZzoxNn0uZm9ybSAuaW5wdXQuaW5wdXQtcm91bmRlZHtib3JkZXItd2lkdGg6MTtib3JkZXItY29sb3I6I2UwZTBlMDtib3JkZXItcmFkaXVzOjI4O3BhZGRpbmc6MTZ9LmZvcm0gLmlucHV0W2lzRW5hYmxlZD0nZmFsc2UnXXtiYWNrZ3JvdW5kLWNvbG9yOiNmYWZhZmF9LmZvcm0gLmlucHV0LWZpZWxke21hcmdpbjo4fS5mb3JtIC5pbnB1dC1maWVsZCAubGFiZWx7Zm9udC1zaXplOjEyO2NvbG9yOiNiYWJhYmF9LmZvcm0gLmlucHV0LWZpZWxkIC5pbnB1dHtwYWRkaW5nOjA7bWFyZ2luOjAgMCA4IDB9LmZvcm0gLmlucHV0LWZpZWxkIC5oci1saWdodC5hY3RpdmUsLmZvcm0gLmlucHV0LWZpZWxkIC5oci1kYXJrLmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiMzMGJjZmZ9LmZvcm0gLmlucHV0LWZpZWxkLmlucHV0LXNpZGVzIC5sYWJlbHtmb250LXNpemU6MTg7bWFyZ2luOjAgMCA4IDB9LmgxLC5oMiwuaDMsLmg0LC5oNSwuaDZ7bWFyZ2luLWJvdHRvbTo0O2ZvbnQtd2VpZ2h0Om5vcm1hbDtjb2xvcjojMjEyMTIxfS5ib2R5LC5ib2R5MiwuZm9vdG5vdGV7Zm9udC13ZWlnaHQ6bm9ybWFsO2NvbG9yOiM3NTc1NzV9Lmgxe2ZvbnQtc2l6ZTozMn0uaDJ7Zm9udC1zaXplOjIyfS5oM3tmb250LXNpemU6MTV9Lmg0e2ZvbnQtc2l6ZToxMn0uaDV7Zm9udC1zaXplOjExfS5oNntmb250LXNpemU6MTB9LmJvZHl7Zm9udC1zaXplOjE0fS5ib2R5Mntmb250LXNpemU6MTd9LmZvb3Rub3Rle2ZvbnQtc2l6ZToxM30ubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVte2NvbG9yOiMyMTIxMjE7Zm9udC1zaXplOjE2O21hcmdpbjowO3BhZGRpbmc6MTZ9Lmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbSBMYWJlbHt2ZXJ0aWNhbC1hbGlnbjpjZW50ZXJ9Lmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbSAudGh1bWJ7c3RyZXRjaDpmaWxsO3dpZHRoOjQwO2hlaWdodDo0MDttYXJnaW4tcmlnaHQ6MTZ9Lmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbS5hY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojZTBlMGUwfS5saXN0LWdyb3VwIC5saXN0LWdyb3VwLWl0ZW0gLmxpc3QtZ3JvdXAtaXRlbS10ZXh0e2NvbG9yOiM3NTc1NzU7Zm9udC1zaXplOjE0fS5wYWdle2JhY2tncm91bmQtY29sb3I6I2ZmZn0ucHJvZ3Jlc3N7Y29sb3I6IzMwYmNmZjtiYWNrZ3JvdW5kLWNvbG9yOiNiYWJhYmF9LnNlZ21lbnRlZC1iYXJ7Zm9udC1zaXplOjEzO2JhY2tncm91bmQtY29sb3I6I2ZmZjtjb2xvcjojMjEyMTIxO3NlbGVjdGVkLWJhY2tncm91bmQtY29sb3I6IzMwYmNmZn0uc2lkZWRyYXdlci1sZWZ0LC5zaWRlZHJhd2VyLWNlbnRlcntiYWNrZ3JvdW5kLWNvbG9yOiNmYWZhZmF9LnNpZGVkcmF3ZXItaGVhZGVye2JhY2tncm91bmQtY29sb3I6I2ZhZmFmYTtoZWlnaHQ6MTQ4O3dpZHRoOjEwMCV9LnNpZGVkcmF3ZXItbGVmdCAuc2lkZWRyYXdlci1oZWFkZXJ7cGFkZGluZzoxNiAxNiAwIDE2fS5zaWRlZHJhd2VyLWNlbnRlciAuc2lkZWRyYXdlci1oZWFkZXJ7cGFkZGluZzoyMCAxNSAwIDE1fS5zaWRlZHJhd2VyLWhlYWRlci1pbWFnZXtiYWNrZ3JvdW5kLWNvbG9yOiNlMGUwZTB9LnNpZGVkcmF3ZXItbGVmdCAuc2lkZWRyYXdlci1oZWFkZXItaW1hZ2V7aGVpZ2h0OjY0O3dpZHRoOjY0O2JvcmRlci1yYWRpdXM6MzI7aG9yaXpvbnRhbC1hbGlnbjpsZWZ0O21hcmdpbi1ib3R0b206MzZ9LnNpZGVkcmF3ZXItY2VudGVyIC5zaWRlZHJhd2VyLWhlYWRlci1pbWFnZXtoZWlnaHQ6NzQ7d2lkdGg6NzQ7Ym9yZGVyLXJhZGl1czozNztob3Jpem9udGFsLWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjI0fS5zaWRlZHJhd2VyLWhlYWRlci1icmFuZHtjb2xvcjojNzM3MzczfS5zaWRlZHJhd2VyLWxlZnQgLnNpZGVkcmF3ZXItaGVhZGVyLWJyYW5ke2hvcml6b250YWwtYWxpZ246bGVmdDtmb250LXNpemU6MTR9LnNpZGVkcmF3ZXItY2VudGVyIC5zaWRlZHJhd2VyLWhlYWRlci1icmFuZHtob3Jpem9udGFsLWFsaWduOmNlbnRlcjtmb250LXNpemU6MTV9LnNpZGVkcmF3ZXItbGlzdC1pdGVte2hlaWdodDo0ODtob3Jpem9udGFsLWFsaWduOmxlZnQ7d2lkdGg6MTAwJTtvcmllbnRhdGlvbjpob3Jpem9udGFsfS5zaWRlZHJhd2VyLWxpc3QtaXRlbSAuc2lkZWRyYXdlci1saXN0LWl0ZW0taWNvbnt3aWR0aDoyNDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MjA7aGVpZ2h0OjQ4O3ZlcnRpY2FsLWFsaWduOmNlbnRlcn0uc2lkZWRyYXdlci1saXN0LWl0ZW0uYWN0aXZle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzBiY2ZmfS5zaWRlZHJhd2VyLWxpc3QtaXRlbS5hY3RpdmUgLnNpZGVkcmF3ZXItbGlzdC1pdGVtLWljb257Y29sb3I6I2ZmZn0uc2lkZWRyYXdlci1sZWZ0IC5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29ue21hcmdpbjowIDE2IDAgMTZ9LnNpZGVkcmF3ZXItY2VudGVyIC5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29ue21hcmdpbjowIDAgMCAxNX0uc2lkZWRyYXdlci1saXN0LWl0ZW0tdGV4dHtob3Jpem9udGFsLWFsaWduOmxlZnQ7dGV4dC1hbGlnbjpsZWZ0O2ZvbnQtc2l6ZToxNTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci13aWR0aDowLjE7d2lkdGg6ODAlO3ZlcnRpY2FsLWFsaWduOmNlbnRlcn0uc2lkZWRyYXdlci1sZWZ0IC5zaWRlZHJhd2VyLWxpc3QtaXRlbS10ZXh0e3BhZGRpbmctbGVmdDoxNn0uc2lkZWRyYXdlci1jZW50ZXIgLnNpZGVkcmF3ZXItbGlzdC1pdGVtLXRleHR7cGFkZGluZy1sZWZ0OjE1fS5zbGlkZXJ7YmFja2dyb3VuZC1jb2xvcjojMzBiY2ZmfS5zbGlkZXJbaXNFbmFibGVkPWZhbHNlXXtiYWNrZ3JvdW5kLWNvbG9yOiNlMGUwZTA7Y29sb3I6I2UwZTBlMH0uc3dpdGNoW2NoZWNrZWQ9dHJ1ZV17YmFja2dyb3VuZC1jb2xvcjojMzBiY2ZmO2NvbG9yOiMzMGJjZmZ9LnN3aXRjaFtjaGVja2VkPXRydWVdW2lzRW5hYmxlZD1mYWxzZV17YmFja2dyb3VuZC1jb2xvcjojZTBlMGUwO2NvbG9yOiNmZmZ9LnN3aXRjaFtpc0VuYWJsZWQ9ZmFsc2Vde2JhY2tncm91bmQtY29sb3I6I2UwZTBlMDtjb2xvcjojZTBlMGUwfS50YWItdmlld3tzZWxlY3RlZC1jb2xvcjojMzBiY2ZmO3RhYnMtYmFja2dyb3VuZC1jb2xvcjojZmZmfS50YWItdmlldyAudGFiLXZpZXctaXRlbXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7dGFicy1iYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9I2xvZ2luLWJhY2tncm91bmR7bWFyZ2luLXRvcDotMjA7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyfS5sb2dpbi13cmFwe3BhZGRpbmc6MCA0MH0ubG9nby13cmFwe21hcmdpbjo2MCAwIDEwIDA7cGFkZGluZzoyMCAwfS5sb2dvLXdyYXAgLmxvZ2luLWxvZ297dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1zaXplOjMwO2ZvbnQtd2VpZ2h0OmJvbGQ7bWFyZ2luLWJvdHRvbToxMDtvcGFjaXR5OjE7Y29sb3I6IzIxMjEyMTtvcGFjaXR5Oi45fS5sb2dvLXdyYXAgLmxvZ2luLWxvZ28tc3Vie2NvbG9yOiMyMTIxMjE7b3BhY2l0eTouODt0ZXh0LWFsaWduOmNlbnRlcn0ubG9naW4td3JhcHBlcntwYWRkaW5nOjIwO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOjN9LmxvZ2luLXdyYXBwZXIgVGV4dEZpZWxke3BhZGRpbmc6MTAgMTA7bWFyZ2luOjEwIDAgMCAwfS5nby1iYWNre2ZvbnQtc2l6ZToxNDt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjojMjEyMTIxO21hcmdpbi10b3A6MTB9LmFjdGlvbi1iYXIgLmFjdGlvbi1iYXItdGl0bGV7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToyMH0uYWN0aW9uLWJhciAuYWN0aW9uLWl0ZW17YW5kcm9pZC1lbGV2YXRpb246MDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDAsMCwwKTtib3JkZXItY29sb3I6cmdiYSgyNTUsMCwwLDApO2JvcmRlci13aWR0aDoxfS5idG57Zm9udC1mYW1pbHk6J1JvYm90byBNZWRpdW0nO2ZvbnQtc2l6ZToxNH0uYnRuLXByaW1hcnl7Ym9yZGVyLWNvbG9yOnJnYmEoMjU1LDAsMCwwKX0uYnRuLW91dGxpbmV7YW5kcm9pZC1lbGV2YXRpb246MDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDAsMCwwKTtib3JkZXItd2lkdGg6MTtib3JkZXItY29sb3I6IzMwYmNmZjtoZWlnaHQ6MzY7cGFkZGluZzowfS5idG4tcm91bmRlZC1zbXtib3JkZXItcmFkaXVzOjI7aGVpZ2h0OjM2O3BhZGRpbmc6MH0uYnRuLXJvdW5kZWQtbGd7Ym9yZGVyLXJhZGl1czo0MDtoZWlnaHQ6MzY7cGFkZGluZzowfS5mb3Jte2ZvbnQtZmFtaWx5OidSb2JvdG8gUmVndWxhcid9LmZvcm0gLmlucHV0e2ZvbnQtc2l6ZToxNn0uaDF7Zm9udC1zaXplOjM0fS5oMntmb250LXNpemU6MjR9Lmgze2ZvbnQtc2l6ZToxNn0uaDV7Zm9udC1zaXplOjExO2ZvbnQtd2VpZ2h0OmJvbGR9LmJvZHkye2ZvbnQtc2l6ZToxNDtmb250LXdlaWdodDo1MDB9LnNpZGVkcmF3ZXItbGlzdC1pdGVtLWljb257bWFyZ2luOjAgMTYgMCAxNjtwYWRkaW5nLXRvcDoxNH0uc2lkZWRyYXdlci1saXN0LWl0ZW0taWNvbiwuc2lkZWRyYXdlci1saXN0LWl0ZW17Y29sb3I6IzczNzM3M30uc2lkZWRyYXdlci1saXN0LWl0ZW17Zm9udC1mYW1pbHk6J1JvYm90byBNZWRpdW0nO2ZvbnQtc2l6ZToxNH0uc2xpZGVye2NvbG9yOiMzMGJjZmY7bWFyZ2luOjIwIDE2fS5zd2l0Y2h7bWFyZ2luOjE0IDE2O2NvbG9yOiNlMGUwZTA7YmFja2dyb3VuZC1jb2xvcjojZTBlMGUwfS5zd2l0Y2hbY2hlY2tlZD10cnVlXXtjb2xvcjojMzBiY2ZmfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaG90ID0gcmVxdWlyZShcIi4uL2hvdFwiKTtcbmNvbnN0IGZpbGVfc3lzdGVtXzEgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9maWxlLXN5c3RlbVwiKTtcbmZ1bmN0aW9uIGhtclVwZGF0ZSgpIHtcbiAgICBjb25zdCBhcHBsaWNhdGlvbkZpbGVzID0gZmlsZV9zeXN0ZW1fMS5rbm93bkZvbGRlcnMuY3VycmVudEFwcCgpO1xuICAgIGNvbnN0IGxhdGVzdEhhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fW1wiaFwiXSgpO1xuICAgIHJldHVybiBob3QobGF0ZXN0SGFzaCwgZmlsZW5hbWUgPT4gYXBwbGljYXRpb25GaWxlcy5nZXRGaWxlKGZpbGVuYW1lKSk7XG59XG5leHBvcnRzLmhtclVwZGF0ZSA9IGhtclVwZGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhtci11cGRhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaG1yX3VwZGF0ZV8xID0gcmVxdWlyZShcIi4vaG1yLXVwZGF0ZVwiKTtcbmV4cG9ydHMuaG1yVXBkYXRlID0gaG1yX3VwZGF0ZV8xLmhtclVwZGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImNvbnN0IGhtclByZWZpeCA9ICdITVI6JztcbmNvbnN0IGxvZyA9IHtcbiAgICBpbmZvOiAobWVzc2FnZSkgPT4gY29uc29sZS5pbmZvKGAke2htclByZWZpeH0gJHttZXNzYWdlfWApLFxuICAgIHdhcm46IChtZXNzYWdlKSA9PiBjb25zb2xlLndhcm4oYCR7aG1yUHJlZml4fSAke21lc3NhZ2V9YCksXG4gICAgZXJyb3I6IChtZXNzYWdlKSA9PiBjb25zb2xlLmVycm9yKGAke2htclByZWZpeH0gJHttZXNzYWdlfWApLFxufTtcbmNvbnN0IHJlZnJlc2ggPSAnQXBwbGljYXRpb24gbmVlZHMgdG8gYmUgcmVzdGFydGVkIGluIG9yZGVyIHRvIGFwcGx5IHRoZSBjaGFuZ2VzLic7XG5jb25zdCBob3RPcHRpb25zID0ge1xuICAgIGlnbm9yZVVuYWNjZXB0ZWQ6IGZhbHNlLFxuICAgIGlnbm9yZURlY2xpbmVkOiBmYWxzZSxcbiAgICBpZ25vcmVFcnJvcmVkOiBmYWxzZSxcbiAgICBvblVuYWNjZXB0ZWQoZGF0YSkge1xuICAgICAgICBjb25zdCBjaGFpbiA9IFtdLmNvbmNhdChkYXRhLmNoYWluKTtcbiAgICAgICAgY29uc3QgbGFzdCA9IGNoYWluW2NoYWluLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChsYXN0ID09PSAwKSB7XG4gICAgICAgICAgICBjaGFpbi5wb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZy53YXJuKGBJZ25vcmVkIGFuIHVwZGF0ZSB0byB1bmFjY2VwdGVkIG1vZHVsZTogYCk7XG4gICAgICAgIGNoYWluLmZvckVhY2gobW9kID0+IGxvZy53YXJuKGAgICAgICAgICDinq0gJHttb2R9YCkpO1xuICAgIH0sXG4gICAgb25EZWNsaW5lZChkYXRhKSB7XG4gICAgICAgIGxvZy53YXJuKGBJZ25vcmVkIGFuIHVwZGF0ZSB0byBkZWNsaW5lZCBtb2R1bGU6YCk7XG4gICAgICAgIGRhdGEuY2hhaW4uZm9yRWFjaChtb2QgPT4gbG9nLndhcm4oYCAgICAgICAgIOKerSAke21vZH1gKSk7XG4gICAgfSxcbiAgICBvbkVycm9yZWQoZGF0YSkge1xuICAgICAgICBsb2cud2FybihcbiAgICAgICAgICAgIGBJZ25vcmVkIGFuIGVycm9yIHdoaWxlIHVwZGF0aW5nIG1vZHVsZSAke2RhdGEubW9kdWxlSWR9IDwke2RhdGEudHlwZX0+YFxuICAgICAgICApO1xuICAgICAgICBsb2cud2FybihkYXRhLmVycm9yKTtcbiAgICB9LFxufTtcblxubGV0IG5leHRIYXNoO1xubGV0IGN1cnJlbnRIYXNoO1xuXG5mdW5jdGlvbiB1cFRvRGF0ZSgpIHtcbiAgICByZXR1cm4gbmV4dEhhc2guaW5kZXhPZihfX3dlYnBhY2tfaGFzaF9fKSA+PSAwO1xufVxuXG5mdW5jdGlvbiByZXN1bHQobW9kdWxlcywgYXBwbGllZE1vZHVsZXMpIHtcbiAgICBjb25zdCB1bmFjY2VwdGVkID0gbW9kdWxlcy5maWx0ZXIoXG4gICAgICAgIChtb2R1bGVJZCkgPT4gYXBwbGllZE1vZHVsZXMgJiYgYXBwbGllZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwXG4gICAgKTtcblxuICAgIGlmICh1bmFjY2VwdGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbG9nLndhcm4oJ1RoZSBmb2xsb3dpbmcgbW9kdWxlcyBjb3VsZCBub3QgYmUgdXBkYXRlZDonKTtcblxuICAgICAgICBmb3IgKGNvbnN0IG1vZHVsZUlkIG9mIHVuYWNjZXB0ZWQpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKGAgICAgICAgICAg4qa7ICR7bW9kdWxlSWR9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIShhcHBsaWVkTW9kdWxlcyB8fCBbXSkubGVuZ3RoKSB7XG4gICAgICAgIGxvZy5pbmZvKCdObyBNb2R1bGVzIFVwZGF0ZWQuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmluZm8oJ1RoZSBmb2xsb3dpbmcgbW9kdWxlcyB3ZXJlIHVwZGF0ZWQ6Jyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBtb2R1bGVJZCBvZiBhcHBsaWVkTW9kdWxlcykge1xuICAgICAgICAgICAgbG9nLmluZm8oYCAgICAgICAgIOKGuyAke21vZHVsZUlkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbnVtYmVySWRzID0gYXBwbGllZE1vZHVsZXMuZXZlcnkoXG4gICAgICAgICAgICAobW9kdWxlSWQpID0+IHR5cGVvZiBtb2R1bGVJZCA9PT0gJ251bWJlcidcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKG51bWJlcklkcykge1xuICAgICAgICAgICAgbG9nLmluZm8oXG4gICAgICAgICAgICAgICAgJ1BsZWFzZSBjb25zaWRlciB1c2luZyB0aGUgTmFtZWRNb2R1bGVzUGx1Z2luIGZvciBtb2R1bGUgbmFtZXMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hlY2sob3B0aW9ucykge1xuICAgIHJldHVybiBtb2R1bGUuaG90XG4gICAgICAgIC5jaGVjaygpXG4gICAgICAgIC50aGVuKChtb2R1bGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1vZHVsZXMpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcbiAgICAgICAgICAgICAgICAgICAgYENhbm5vdCBmaW5kIHVwZGF0ZS4gJHtyZWZyZXNofWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlLmhvdFxuICAgICAgICAgICAgICAgIC5hcHBseShob3RPcHRpb25zKVxuICAgICAgICAgICAgICAgIC50aGVuKChhcHBsaWVkTW9kdWxlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dENoZWNrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXVwVG9EYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRDaGVjayA9IGNoZWNrKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0KG1vZHVsZXMsIGFwcGxpZWRNb2R1bGVzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodXBUb0RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IG1vZGlmeSBtZXNzYWdlIC0gQ0xJIGRlcGVuZHMgb24gdGhpcyBleGFjdCBjb250ZW50IHRvIGRldGVybWluZSBobXIgb3BlcmF0aW9uIHN0YXR1cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5pbmZvKGBTdWNjZXNzZnVsbHkgYXBwbGllZCB1cGRhdGUgd2l0aCBobXIgaGFzaCAke2N1cnJlbnRIYXNofS4gQXBwIGlzIHVwIHRvIGRhdGUuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dENoZWNrIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBtb2R1bGUuaG90LnN0YXR1cygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoWydhYm9ydCcsICdmYWlsJ10uaW5kZXhPZihzdGF0dXMpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdCBtb2RpZnkgbWVzc2FnZSAtIENMSSBkZXBlbmRzIG9uIHRoaXMgZXhhY3QgY29udGVudCB0byBkZXRlcm1pbmUgaG1yIG9wZXJhdGlvbiBzdGF0dXMuXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoYENhbm5vdCBhcHBseSB1cGRhdGUgd2l0aCBobXIgaGFzaCAke2N1cnJlbnRIYXNofS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlcnIubWVzc2FnZSB8fCBlcnIuc3RhY2spO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGBVcGRhdGUgZmFpbGVkOiAke2Vyci5tZXNzYWdlIHx8IGVyci5zdGFja31gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcbiAgICAgICAgICAgIGlmIChbJ2Fib3J0JywgJ2ZhaWwnXS5pbmRleE9mKHN0YXR1cykgPj0gMCkge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgQ2Fubm90IGNoZWNrIGZvciB1cGRhdGUuICR7cmVmcmVzaH1gKTtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZXJyLm1lc3NhZ2UgfHwgZXJyLnN0YWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGBVcGRhdGUgY2hlY2sgZmFpbGVkOiAke2Vyci5tZXNzYWdlIHx8IGVyci5zdGFja31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG5cbmlmIChtb2R1bGUuaG90KSB7XG4gICAgbG9nLmluZm8oJ0hvdCBNb2R1bGUgUmVwbGFjZW1lbnQgRW5hYmxlZC4gV2FpdGluZyBmb3Igc2lnbmFsLicpO1xufSBlbHNlIHtcbiAgICBsb2cuZXJyb3IoJ0hvdCBNb2R1bGUgUmVwbGFjZW1lbnQgaXMgZGlzYWJsZWQuJyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZShsYXRlc3RIYXNoLCBvcHRpb25zKSB7XG4gICAgbmV4dEhhc2ggPSBsYXRlc3RIYXNoO1xuICAgIGlmICghdXBUb0RhdGUoKSkge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBtb2R1bGUuaG90LnN0YXR1cygpO1xuXG4gICAgICAgIGlmIChzdGF0dXMgPT09ICdpZGxlJykge1xuICAgICAgICAgICAgLy9EbyBub3QgbW9kaWZ5IG1lc3NhZ2UgLSBDTEkgZGVwZW5kcyBvbiB0aGlzIGV4YWN0IGNvbnRlbnQgdG8gZGV0ZXJtaW5lIGhtciBvcGVyYXRpb24gc3RhdHVzLlxuICAgICAgICAgICAgbG9nLmluZm8oYENoZWNraW5nIGZvciB1cGRhdGVzIHRvIHRoZSBidW5kbGUgd2l0aCBobXIgaGFzaCAke2N1cnJlbnRIYXNofS5gKTtcbiAgICAgICAgICAgIHJldHVybiBjaGVjayhvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChbJ2Fib3J0JywgJ2ZhaWwnXS5pbmRleE9mKHN0YXR1cykgPj0gMCkge1xuICAgICAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgICAgICAgYENhbm5vdCBhcHBseSB1cGRhdGUuIEEgcHJldmlvdXMgdXBkYXRlICR7c3RhdHVzfWVkLiAke3JlZnJlc2h9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGdldE5leHRIYXNoKGhhc2gsIGdldEZpbGVDb250ZW50KSB7XG4gICAgY29uc3QgZmlsZSA9IGdldEZpbGVDb250ZW50KGAke2hhc2h9LmhvdC11cGRhdGUuanNvbmApO1xuICAgIHJldHVybiBmaWxlLnJlYWRUZXh0KCkudGhlbihob3RVcGRhdGVDb250ZW50ID0+IHtcbiAgICAgICAgaWYgKGhvdFVwZGF0ZUNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hbmlmZXN0ID0gSlNPTi5wYXJzZShob3RVcGRhdGVDb250ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0hhc2ggPSBtYW5pZmVzdC5oO1xuICAgICAgICAgICAgcmV0dXJuIGdldE5leHRIYXNoKG5ld0hhc2gsIGdldEZpbGVDb250ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICB9KS5jYXRjaChlcnJvciA9PiBQcm9taXNlLnJlamVjdChlcnJvcikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNoZWNrU3RhdGUoaW5pdGlhbEhhc2gsIGdldEZpbGVDb250ZW50KSB7XG4gICAgY3VycmVudEhhc2ggPSBpbml0aWFsSGFzaDtcbiAgICByZXR1cm4gZ2V0TmV4dEhhc2goaW5pdGlhbEhhc2gsIGdldEZpbGVDb250ZW50KS50aGVuKG5leHRIYXNoID0+IHtcbiAgICAgICAgaWYgKG5leHRIYXNoICE9IGluaXRpYWxIYXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKG5leHRIYXNoLCB7fSk7XG4gICAgICAgIH1cbiAgICB9KVxufVxuIiwiY29uc3QgbG9hZENzcyA9IHJlcXVpcmUoXCIuL2xvYWQtYXBwbGljYXRpb24tY3NzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIGxvYWRDc3MoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFwcENzc0NvbnRleHQgPSByZXF1aXJlLmNvbnRleHQoXCJ+L1wiLCBmYWxzZSwgL15cXC5cXC9hcHBcXC4oY3NzfHNjc3N8bGVzc3xzYXNzKSQvKTtcbiAgICAgICAgZ2xvYmFsLnJlZ2lzdGVyV2VicGFja01vZHVsZXMoYXBwQ3NzQ29udGV4dCk7XG4gICAgfSk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsb2FkTW9kdWxlRm4pIHtcbiAgICBjb25zdCBhcHBsaWNhdGlvbiA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uXCIpO1xuICAgIHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3N0eWxpbmcvc3R5bGUtc2NvcGVcIik7XG5cbiAgICBsb2FkTW9kdWxlRm4oKTtcblxuICAgIGFwcGxpY2F0aW9uLmxvYWRBcHBDc3MoKTtcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlxuLyohXG4gKiBOYXRpdmVTY3JpcHQtVnVlIHYyLjMuMFxuICogKFVzaW5nIFZ1ZSB2Mi42LjEwKVxuICogKGMpIDIwMTctMjAxOSByaWdvcjc4OVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5nbG9iYWwucHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzIHx8IHt9XG5nbG9iYWwucHJvY2Vzcy5lbnYgPSBnbG9iYWwucHJvY2Vzcy5lbnYgfHwge31cblxuXG52YXIgYXBwbGljYXRpb24gPSByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uJyk7XG5yZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lJyk7XG5cbnZhciBhcnJheU1hcCA9IGZ1bmN0aW9uICh4cywgZikge1xuICAgIGlmICh4cy5tYXApIHsgcmV0dXJuIHhzLm1hcChmKTsgfVxuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB4ID0geHNbaV07XG4gICAgICAgIGlmIChoYXNPd24uY2FsbCh4cywgaSkpIHsgcmVzLnB1c2goZih4LCBpLCB4cykpOyB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG52YXIgaW5kZXhvZiA9IGZ1bmN0aW9uKGFyciwgb2JqKXtcbiAgaWYgKGluZGV4T2YpIHsgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7IH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHsgcmV0dXJuIGk7IH1cbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG52YXIgaXNhcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBoYXNPd24kMSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgZm9yZWFjaCA9IGZ1bmN0aW9uIGZvckVhY2ggKG9iaiwgZm4sIGN0eCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKGZuKSAhPT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIGwgPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsID09PSArbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duJDEuY2FsbChvYmosIGspKSB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtrXSwgaywgb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBoYXNPd24kMiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBhcnJheVJlZHVjZSA9IGZ1bmN0aW9uICh4cywgZiwgYWNjKSB7XG4gICAgdmFyIGhhc0FjYyA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMztcbiAgICBpZiAoaGFzQWNjICYmIHhzLnJlZHVjZSkgeyByZXR1cm4geHMucmVkdWNlKGYsIGFjYyk7IH1cbiAgICBpZiAoeHMucmVkdWNlKSB7IHJldHVybiB4cy5yZWR1Y2UoZik7IH1cbiAgICBcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaGFzT3duJDIuY2FsbCh4cywgaSkpIHsgY29udGludWU7IH1cbiAgICAgICAgaWYgKCFoYXNBY2MpIHtcbiAgICAgICAgICAgIGFjYyA9IHhzW2ldO1xuICAgICAgICAgICAgaGFzQWNjID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGFjYyA9IGYoYWNjLCB4c1tpXSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG59O1xuXG52YXIgaGFzT3duJDMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyaW5nJDEgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhKGZuIGluc3RhbmNlb2YgUmVnRXhwKSkgfHwgdG9TdHJpbmckMS5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBmb3JlYWNoJDEgPSBmdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcblx0aWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHR9XG5cdHZhciBpLCBrLFxuXHRcdGlzU3RyaW5nID0gdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycsXG5cdFx0bCA9IG9iai5sZW5ndGgsXG5cdFx0Y29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogbnVsbDtcblx0aWYgKGwgPT09ICtsKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0aWYgKGNvbnRleHQgPT09IG51bGwpIHtcblx0XHRcdFx0Zm4oaXNTdHJpbmcgPyBvYmouY2hhckF0KGkpIDogb2JqW2ldLCBpLCBvYmopO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm4uY2FsbChjb250ZXh0LCBpc1N0cmluZyA/IG9iai5jaGFyQXQoaSkgOiBvYmpbaV0sIGksIG9iaik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGZvciAoayBpbiBvYmopIHtcblx0XHRcdGlmIChoYXNPd24kMy5jYWxsKG9iaiwgaykpIHtcblx0XHRcdFx0aWYgKGNvbnRleHQgPT09IG51bGwpIHtcblx0XHRcdFx0XHRmbihvYmpba10sIGssIG9iaik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm4uY2FsbChjb250ZXh0LCBvYmpba10sIGssIG9iaik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbnZhciB0b1N0cmluZyQyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzQXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyaW5nJDIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3VtZW50cyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmd1bWVudHMpIHtcblx0XHRpc0FyZ3VtZW50cyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJ1xuXHRcdFx0JiYgdmFsdWUgIT09IG51bGxcblx0XHRcdCYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcblx0XHRcdCYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInXG5cdFx0XHQmJiB2YWx1ZS5sZW5ndGggPj0gMFxuXHRcdFx0JiYgdG9TdHJpbmckMi5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJndW1lbnRzO1xufTtcblxuLy8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuXHR0b1N0cmluZyQzID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0aGFzRG9udEVudW1CdWcgPSAhKHsndG9TdHJpbmcnOiBudWxsfSkucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyksXG5cdGhhc1Byb3RvRW51bUJ1ZyA9IChmdW5jdGlvbiAoKSB7fSkucHJvcGVydHlJc0VudW1lcmFibGUoJ3Byb3RvdHlwZScpLFxuXHRkb250RW51bXMgPSBbXG5cdFx0XCJ0b1N0cmluZ1wiLFxuXHRcdFwidG9Mb2NhbGVTdHJpbmdcIixcblx0XHRcInZhbHVlT2ZcIixcblx0XHRcImhhc093blByb3BlcnR5XCIsXG5cdFx0XCJpc1Byb3RvdHlwZU9mXCIsXG5cdFx0XCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFxuXHRcdFwiY29uc3RydWN0b3JcIlxuXHRdO1xuXG52YXIga2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcsXG5cdFx0aXNGdW5jdGlvbiA9IHRvU3RyaW5nJDMuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nLFxuXHRcdGlzQXJndW1lbnRzJDEgPSBpc0FyZ3VtZW50cyhvYmplY3QpLFxuXHRcdHRoZUtleXMgPSBbXTtcblxuXHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cyQxKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3RcIik7XG5cdH1cblxuXHRpZiAoaXNBcmd1bWVudHMkMSkge1xuXHRcdGZvcmVhY2gkMShvYmplY3QsIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcblx0XHRcdHRoZUtleXMucHVzaChpbmRleCk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblxuXHRcdGZvciAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2gobmFtZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0dmFyIGN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG5cdFx0XHRza2lwQ29uc3RydWN0b3IgPSBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvYmplY3Q7XG5cblx0XHRmb3JlYWNoJDEoZG9udEVudW1zLCBmdW5jdGlvbiAoZG9udEVudW0pIHtcblx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bSkpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gdGhlS2V5cztcbn07XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKCFPYmplY3Qua2V5cykge1xuXHRcdE9iamVjdC5rZXlzID0ga2V5c1NoaW07XG5cdH1cblx0cmV0dXJuIE9iamVjdC5rZXlzIHx8IGtleXNTaGltO1xufTtcblxudmFyIG9iamVjdEtleXMgPSBrZXlzU2hpbTtcblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIganNvbjMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4oZnVuY3Rpb24gKHJvb3QpIHtcbiAgLy8gRGV0ZWN0IHRoZSBgZGVmaW5lYCBmdW5jdGlvbiBleHBvc2VkIGJ5IGFzeW5jaHJvbm91cyBtb2R1bGUgbG9hZGVycy4gVGhlXG4gIC8vIHN0cmljdCBgZGVmaW5lYCBjaGVjayBpcyBuZWNlc3NhcnkgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBgci5qc2AuXG4gIHZhciBpc0xvYWRlciA9IHR5cGVvZiB1bmRlZmluZWQgPT09IFwiZnVuY3Rpb25cIiAmJiB1bmRlZmluZWQuYW1kO1xuXG4gIC8vIFVzZSB0aGUgYGdsb2JhbGAgb2JqZWN0IGV4cG9zZWQgYnkgTm9kZSAoaW5jbHVkaW5nIEJyb3dzZXJpZnkgdmlhXG4gIC8vIGBpbnNlcnQtbW9kdWxlLWdsb2JhbHNgKSwgTmFyd2hhbCwgYW5kIFJpbmdvIGFzIHRoZSBkZWZhdWx0IGNvbnRleHQuXG4gIC8vIFJoaW5vIGV4cG9ydHMgYSBgZ2xvYmFsYCBmdW5jdGlvbiBpbnN0ZWFkLlxuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBjb21tb25qc0dsb2JhbCA9PSBcIm9iamVjdFwiICYmIGNvbW1vbmpzR2xvYmFsO1xuICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbFtcImdsb2JhbFwiXSA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsW1wid2luZG93XCJdID09PSBmcmVlR2xvYmFsKSkge1xuICAgIHJvb3QgPSBmcmVlR2xvYmFsO1xuICB9XG5cbiAgLy8gUHVibGljOiBJbml0aWFsaXplcyBKU09OIDMgdXNpbmcgdGhlIGdpdmVuIGBjb250ZXh0YCBvYmplY3QsIGF0dGFjaGluZyB0aGVcbiAgLy8gYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgZnVuY3Rpb25zIHRvIHRoZSBzcGVjaWZpZWQgYGV4cG9ydHNgIG9iamVjdC5cbiAgZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQsIGV4cG9ydHMpIHtcbiAgICBjb250ZXh0IHx8IChjb250ZXh0ID0gcm9vdFtcIk9iamVjdFwiXSgpKTtcbiAgICBleHBvcnRzIHx8IChleHBvcnRzID0gcm9vdFtcIk9iamVjdFwiXSgpKTtcblxuICAgIC8vIE5hdGl2ZSBjb25zdHJ1Y3RvciBhbGlhc2VzLlxuICAgIHZhciBOdW1iZXIgPSBjb250ZXh0W1wiTnVtYmVyXCJdIHx8IHJvb3RbXCJOdW1iZXJcIl0sXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHRbXCJTdHJpbmdcIl0gfHwgcm9vdFtcIlN0cmluZ1wiXSxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dFtcIk9iamVjdFwiXSB8fCByb290W1wiT2JqZWN0XCJdLFxuICAgICAgICBEYXRlID0gY29udGV4dFtcIkRhdGVcIl0gfHwgcm9vdFtcIkRhdGVcIl0sXG4gICAgICAgIFN5bnRheEVycm9yID0gY29udGV4dFtcIlN5bnRheEVycm9yXCJdIHx8IHJvb3RbXCJTeW50YXhFcnJvclwiXSxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dFtcIlR5cGVFcnJvclwiXSB8fCByb290W1wiVHlwZUVycm9yXCJdLFxuICAgICAgICBNYXRoID0gY29udGV4dFtcIk1hdGhcIl0gfHwgcm9vdFtcIk1hdGhcIl0sXG4gICAgICAgIG5hdGl2ZUpTT04gPSBjb250ZXh0W1wiSlNPTlwiXSB8fCByb290W1wiSlNPTlwiXTtcblxuICAgIC8vIERlbGVnYXRlIHRvIHRoZSBuYXRpdmUgYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgaW1wbGVtZW50YXRpb25zLlxuICAgIGlmICh0eXBlb2YgbmF0aXZlSlNPTiA9PSBcIm9iamVjdFwiICYmIG5hdGl2ZUpTT04pIHtcbiAgICAgIGV4cG9ydHMuc3RyaW5naWZ5ID0gbmF0aXZlSlNPTi5zdHJpbmdpZnk7XG4gICAgICBleHBvcnRzLnBhcnNlID0gbmF0aXZlSlNPTi5wYXJzZTtcbiAgICB9XG5cbiAgICAvLyBDb252ZW5pZW5jZSBhbGlhc2VzLlxuICAgIHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgICAgIGdldENsYXNzID0gb2JqZWN0UHJvdG8udG9TdHJpbmcsXG4gICAgICAgIGlzUHJvcGVydHksIGZvckVhY2gsIHVuZGVmO1xuXG4gICAgLy8gVGVzdCB0aGUgYERhdGUjZ2V0VVRDKmAgbWV0aG9kcy4gQmFzZWQgb24gd29yayBieSBAWWFmZmxlLlxuICAgIHZhciBpc0V4dGVuZGVkID0gbmV3IERhdGUoLTM1MDk4MjczMzQ1NzMyOTIpO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgYGdldFVUQ0Z1bGxZZWFyYCwgYE1vbnRoYCwgYW5kIGBEYXRlYCBtZXRob2RzIHJldHVybiBub25zZW5zaWNhbFxuICAgICAgLy8gcmVzdWx0cyBmb3IgY2VydGFpbiBkYXRlcyBpbiBPcGVyYSA+PSAxMC41My5cbiAgICAgIGlzRXh0ZW5kZWQgPSBpc0V4dGVuZGVkLmdldFVUQ0Z1bGxZZWFyKCkgPT0gLTEwOTI1MiAmJiBpc0V4dGVuZGVkLmdldFVUQ01vbnRoKCkgPT09IDAgJiYgaXNFeHRlbmRlZC5nZXRVVENEYXRlKCkgPT09IDEgJiZcbiAgICAgICAgLy8gU2FmYXJpIDwgMi4wLjIgc3RvcmVzIHRoZSBpbnRlcm5hbCBtaWxsaXNlY29uZCB0aW1lIHZhbHVlIGNvcnJlY3RseSxcbiAgICAgICAgLy8gYnV0IGNsaXBzIHRoZSB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGRhdGUgbWV0aG9kcyB0byB0aGUgcmFuZ2Ugb2ZcbiAgICAgICAgLy8gc2lnbmVkIDMyLWJpdCBpbnRlZ2VycyAoWy0yICoqIDMxLCAyICoqIDMxIC0gMV0pLlxuICAgICAgICBpc0V4dGVuZGVkLmdldFVUQ0hvdXJzKCkgPT0gMTAgJiYgaXNFeHRlbmRlZC5nZXRVVENNaW51dGVzKCkgPT0gMzcgJiYgaXNFeHRlbmRlZC5nZXRVVENTZWNvbmRzKCkgPT0gNiAmJiBpc0V4dGVuZGVkLmdldFVUQ01pbGxpc2Vjb25kcygpID09IDcwODtcbiAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG5cbiAgICAvLyBJbnRlcm5hbDogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBuYXRpdmUgYEpTT04uc3RyaW5naWZ5YCBhbmQgYHBhcnNlYFxuICAgIC8vIGltcGxlbWVudGF0aW9ucyBhcmUgc3BlYy1jb21wbGlhbnQuIEJhc2VkIG9uIHdvcmsgYnkgS2VuIFNueWRlci5cbiAgICBmdW5jdGlvbiBoYXMobmFtZSkge1xuICAgICAgaWYgKGhhc1tuYW1lXSAhPT0gdW5kZWYpIHtcbiAgICAgICAgLy8gUmV0dXJuIGNhY2hlZCBmZWF0dXJlIHRlc3QgcmVzdWx0LlxuICAgICAgICByZXR1cm4gaGFzW25hbWVdO1xuICAgICAgfVxuICAgICAgdmFyIGlzU3VwcG9ydGVkO1xuICAgICAgaWYgKG5hbWUgPT0gXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIikge1xuICAgICAgICAvLyBJRSA8PSA3IGRvZXNuJ3Qgc3VwcG9ydCBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgdXNpbmcgc3F1YXJlXG4gICAgICAgIC8vIGJyYWNrZXQgbm90YXRpb24uIElFIDggb25seSBzdXBwb3J0cyB0aGlzIGZvciBwcmltaXRpdmVzLlxuICAgICAgICBpc1N1cHBvcnRlZCA9IFwiYVwiWzBdICE9IFwiYVwiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09IFwianNvblwiKSB7XG4gICAgICAgIC8vIEluZGljYXRlcyB3aGV0aGVyIGJvdGggYEpTT04uc3RyaW5naWZ5YCBhbmQgYEpTT04ucGFyc2VgIGFyZVxuICAgICAgICAvLyBzdXBwb3J0ZWQuXG4gICAgICAgIGlzU3VwcG9ydGVkID0gaGFzKFwianNvbi1zdHJpbmdpZnlcIikgJiYgaGFzKFwianNvbi1wYXJzZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSwgc2VyaWFsaXplZCA9ICd7XCJhXCI6WzEsdHJ1ZSxmYWxzZSxudWxsLFwiXFxcXHUwMDAwXFxcXGJcXFxcblxcXFxmXFxcXHJcXFxcdFwiXX0nO1xuICAgICAgICAvLyBUZXN0IGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgIGlmIChuYW1lID09IFwianNvbi1zdHJpbmdpZnlcIikge1xuICAgICAgICAgIHZhciBzdHJpbmdpZnkgPSBleHBvcnRzLnN0cmluZ2lmeSwgc3RyaW5naWZ5U3VwcG9ydGVkID0gdHlwZW9mIHN0cmluZ2lmeSA9PSBcImZ1bmN0aW9uXCIgJiYgaXNFeHRlbmRlZDtcbiAgICAgICAgICBpZiAoc3RyaW5naWZ5U3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAvLyBBIHRlc3QgZnVuY3Rpb24gb2JqZWN0IHdpdGggYSBjdXN0b20gYHRvSlNPTmAgbWV0aG9kLlxuICAgICAgICAgICAgKHZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0pLnRvSlNPTiA9IHZhbHVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RyaW5naWZ5U3VwcG9ydGVkID1cbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDMuMWIxIGFuZCBiMiBzZXJpYWxpemUgc3RyaW5nLCBudW1iZXIsIGFuZCBib29sZWFuXG4gICAgICAgICAgICAgICAgLy8gcHJpbWl0aXZlcyBhcyBvYmplY3QgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KDApID09PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCBiMiwgYW5kIEpTT04gMiBzZXJpYWxpemUgd3JhcHBlZCBwcmltaXRpdmVzIGFzIG9iamVjdFxuICAgICAgICAgICAgICAgIC8vIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgTnVtYmVyKCkpID09PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgU3RyaW5nKCkpID09ICdcIlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIHRocm93IGFuIGVycm9yIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAsIGB1bmRlZmluZWRgLCBvclxuICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IGRlZmluZSBhIGNhbm9uaWNhbCBKU09OIHJlcHJlc2VudGF0aW9uICh0aGlzIGFwcGxpZXMgdG9cbiAgICAgICAgICAgICAgICAvLyBvYmplY3RzIHdpdGggYHRvSlNPTmAgcHJvcGVydGllcyBhcyB3ZWxsLCAqdW5sZXNzKiB0aGV5IGFyZSBuZXN0ZWRcbiAgICAgICAgICAgICAgICAvLyB3aXRoaW4gYW4gb2JqZWN0IG9yIGFycmF5KS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoZ2V0Q2xhc3MpID09PSB1bmRlZiAmJlxuICAgICAgICAgICAgICAgIC8vIElFIDggc2VyaWFsaXplcyBgdW5kZWZpbmVkYCBhcyBgXCJ1bmRlZmluZWRcImAuIFNhZmFyaSA8PSA1LjEuNyBhbmRcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMyBwYXNzIHRoaXMgdGVzdC5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkodW5kZWYpID09PSB1bmRlZiAmJlxuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuNyBhbmQgRkYgMy4xYjMgdGhyb3cgYEVycm9yYHMgYW5kIGBUeXBlRXJyb3JgcyxcbiAgICAgICAgICAgICAgICAvLyByZXNwZWN0aXZlbHksIGlmIHRoZSB2YWx1ZSBpcyBvbWl0dGVkIGVudGlyZWx5LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSgpID09PSB1bmRlZiAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIHRocm93IGFuIGVycm9yIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBub3QgYSBudW1iZXIsXG4gICAgICAgICAgICAgICAgLy8gc3RyaW5nLCBhcnJheSwgb2JqZWN0LCBCb29sZWFuLCBvciBgbnVsbGAgbGl0ZXJhbC4gVGhpcyBhcHBsaWVzIHRvXG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGN1c3RvbSBgdG9KU09OYCBtZXRob2RzIGFzIHdlbGwsIHVubGVzcyB0aGV5IGFyZSBuZXN0ZWRcbiAgICAgICAgICAgICAgICAvLyBpbnNpZGUgb2JqZWN0IG9yIGFycmF5IGxpdGVyYWxzLiBZVUkgMy4wLjBiMSBpZ25vcmVzIGN1c3RvbSBgdG9KU09OYFxuICAgICAgICAgICAgICAgIC8vIG1ldGhvZHMgZW50aXJlbHkuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KHZhbHVlKSA9PT0gXCIxXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoW3ZhbHVlXSkgPT0gXCJbMV1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIFByb3RvdHlwZSA8PSAxLjYuMSBzZXJpYWxpemVzIGBbdW5kZWZpbmVkXWAgYXMgYFwiW11cImAgaW5zdGVhZCBvZlxuICAgICAgICAgICAgICAgIC8vIGBcIltudWxsXVwiYC5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoW3VuZGVmXSkgPT0gXCJbbnVsbF1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIFlVSSAzLjAuMGIxIGZhaWxzIHRvIHNlcmlhbGl6ZSBgbnVsbGAgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG51bGwpID09IFwibnVsbFwiICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgaGFsdHMgc2VyaWFsaXphdGlvbiBpZiBhbiBhcnJheSBjb250YWlucyBhIGZ1bmN0aW9uOlxuICAgICAgICAgICAgICAgIC8vIGBbMSwgdHJ1ZSwgZ2V0Q2xhc3MsIDFdYCBzZXJpYWxpemVzIGFzIFwiWzEsdHJ1ZSxdLFwiLiBGRiAzLjFiM1xuICAgICAgICAgICAgICAgIC8vIGVsaWRlcyBub24tSlNPTiB2YWx1ZXMgZnJvbSBvYmplY3RzIGFuZCBhcnJheXMsIHVubGVzcyB0aGV5XG4gICAgICAgICAgICAgICAgLy8gZGVmaW5lIGN1c3RvbSBgdG9KU09OYCBtZXRob2RzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbdW5kZWYsIGdldENsYXNzLCBudWxsXSkgPT0gXCJbbnVsbCxudWxsLG51bGxdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgc2VyaWFsaXphdGlvbiB0ZXN0LiBGRiAzLjFiMSB1c2VzIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlc1xuICAgICAgICAgICAgICAgIC8vIHdoZXJlIGNoYXJhY3RlciBlc2NhcGUgY29kZXMgYXJlIGV4cGVjdGVkIChlLmcuLCBgXFxiYCA9PiBgXFx1MDAwOGApLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh7IFwiYVwiOiBbdmFsdWUsIHRydWUsIGZhbHNlLCBudWxsLCBcIlxceDAwXFxiXFxuXFxmXFxyXFx0XCJdIH0pID09IHNlcmlhbGl6ZWQgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSBhbmQgYjIgaWdub3JlIHRoZSBgZmlsdGVyYCBhbmQgYHdpZHRoYCBhcmd1bWVudHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG51bGwsIHZhbHVlKSA9PT0gXCIxXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoWzEsIDJdLCBudWxsLCAxKSA9PSBcIltcXG4gMSxcXG4gMlxcbl1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIEpTT04gMiwgUHJvdG90eXBlIDw9IDEuNywgYW5kIG9sZGVyIFdlYktpdCBidWlsZHMgaW5jb3JyZWN0bHlcbiAgICAgICAgICAgICAgICAvLyBzZXJpYWxpemUgZXh0ZW5kZWQgeWVhcnMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC04LjY0ZTE1KSkgPT0gJ1wiLTI3MTgyMS0wNC0yMFQwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgICAgLy8gVGhlIG1pbGxpc2Vjb25kcyBhcmUgb3B0aW9uYWwgaW4gRVMgNSwgYnV0IHJlcXVpcmVkIGluIDUuMS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoOC42NGUxNSkpID09ICdcIisyNzU3NjAtMDktMTNUMDA6MDA6MDAuMDAwWlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggPD0gMTEuMCBpbmNvcnJlY3RseSBzZXJpYWxpemVzIHllYXJzIHByaW9yIHRvIDAgYXMgbmVnYXRpdmVcbiAgICAgICAgICAgICAgICAvLyBmb3VyLWRpZ2l0IHllYXJzIGluc3RlYWQgb2Ygc2l4LWRpZ2l0IHllYXJzLiBDcmVkaXRzOiBAWWFmZmxlLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtNjIxOTg3NTUyZTUpKSA9PSAnXCItMDAwMDAxLTAxLTAxVDAwOjAwOjAwLjAwMFpcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjUgYW5kIE9wZXJhID49IDEwLjUzIGluY29ycmVjdGx5IHNlcmlhbGl6ZSBtaWxsaXNlY29uZFxuICAgICAgICAgICAgICAgIC8vIHZhbHVlcyBsZXNzIHRoYW4gMTAwMC4gQ3JlZGl0czogQFlhZmZsZS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoLTEpKSA9PSAnXCIxOTY5LTEyLTMxVDIzOjU5OjU5Ljk5OVpcIic7XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgc3RyaW5naWZ5U3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzU3VwcG9ydGVkID0gc3RyaW5naWZ5U3VwcG9ydGVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3QgYEpTT04ucGFyc2VgLlxuICAgICAgICBpZiAobmFtZSA9PSBcImpzb24tcGFyc2VcIikge1xuICAgICAgICAgIHZhciBwYXJzZSA9IGV4cG9ydHMucGFyc2U7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCBiMiB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhIGJhcmUgbGl0ZXJhbCBpcyBwcm92aWRlZC5cbiAgICAgICAgICAgICAgLy8gQ29uZm9ybWluZyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIGFsc28gY29lcmNlIHRoZSBpbml0aWFsIGFyZ3VtZW50IHRvXG4gICAgICAgICAgICAgIC8vIGEgc3RyaW5nIHByaW9yIHRvIHBhcnNpbmcuXG4gICAgICAgICAgICAgIGlmIChwYXJzZShcIjBcIikgPT09IDAgJiYgIXBhcnNlKGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIC8vIFNpbXBsZSBwYXJzaW5nIHRlc3QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZShzZXJpYWxpemVkKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VTdXBwb3J0ZWQgPSB2YWx1ZVtcImFcIl0ubGVuZ3RoID09IDUgJiYgdmFsdWVbXCJhXCJdWzBdID09PSAxO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDUuMS4yIGFuZCBGRiAzLjFiMSBhbGxvdyB1bmVzY2FwZWQgdGFicyBpbiBzdHJpbmdzLlxuICAgICAgICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9ICFwYXJzZSgnXCJcXHRcIicpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gRkYgNC4wIGFuZCA0LjAuMSBhbGxvdyBsZWFkaW5nIGArYCBzaWducyBhbmQgbGVhZGluZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGRlY2ltYWwgcG9pbnRzLiBGRiA0LjAsIDQuMC4xLCBhbmQgSUUgOS0xMCBhbHNvIGFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgLy8gY2VydGFpbiBvY3RhbCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9IHBhcnNlKFwiMDFcIikgIT09IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEZGIDQuMCwgNC4wLjEsIGFuZCBSaGlubyAxLjdSMy1SNCBhbGxvdyB0cmFpbGluZyBkZWNpbWFsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnRzLiBUaGVzZSBlbnZpcm9ubWVudHMsIGFsb25nIHdpdGggRkYgMy4xYjEgYW5kIDIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gYWxzbyBhbGxvdyB0cmFpbGluZyBjb21tYXMgaW4gSlNPTiBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBwYXJzZShcIjEuXCIpICE9PSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaXNTdXBwb3J0ZWQgPSBwYXJzZVN1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc1tuYW1lXSA9ICEhaXNTdXBwb3J0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKCFoYXMoXCJqc29uXCIpKSB7XG4gICAgICAvLyBDb21tb24gYFtbQ2xhc3NdXWAgbmFtZSBhbGlhc2VzLlxuICAgICAgdmFyIGZ1bmN0aW9uQ2xhc3MgPSBcIltvYmplY3QgRnVuY3Rpb25dXCIsXG4gICAgICAgICAgZGF0ZUNsYXNzID0gXCJbb2JqZWN0IERhdGVdXCIsXG4gICAgICAgICAgbnVtYmVyQ2xhc3MgPSBcIltvYmplY3QgTnVtYmVyXVwiLFxuICAgICAgICAgIHN0cmluZ0NsYXNzID0gXCJbb2JqZWN0IFN0cmluZ11cIixcbiAgICAgICAgICBhcnJheUNsYXNzID0gXCJbb2JqZWN0IEFycmF5XVwiLFxuICAgICAgICAgIGJvb2xlYW5DbGFzcyA9IFwiW29iamVjdCBCb29sZWFuXVwiO1xuXG4gICAgICAvLyBEZXRlY3QgaW5jb21wbGV0ZSBzdXBwb3J0IGZvciBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgYnkgaW5kZXguXG4gICAgICB2YXIgY2hhckluZGV4QnVnZ3kgPSBoYXMoXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIik7XG5cbiAgICAgIC8vIERlZmluZSBhZGRpdGlvbmFsIHV0aWxpdHkgbWV0aG9kcyBpZiB0aGUgYERhdGVgIG1ldGhvZHMgYXJlIGJ1Z2d5LlxuICAgICAgaWYgKCFpc0V4dGVuZGVkKSB7XG4gICAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgICAgIC8vIEEgbWFwcGluZyBiZXR3ZWVuIHRoZSBtb250aHMgb2YgdGhlIHllYXIgYW5kIHRoZSBudW1iZXIgb2YgZGF5cyBiZXR3ZWVuXG4gICAgICAgIC8vIEphbnVhcnkgMXN0IGFuZCB0aGUgZmlyc3Qgb2YgdGhlIHJlc3BlY3RpdmUgbW9udGguXG4gICAgICAgIHZhciBNb250aHMgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xuICAgICAgICAvLyBJbnRlcm5hbDogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIGRheXMgYmV0d2VlbiB0aGUgVW5peCBlcG9jaCBhbmQgdGhlXG4gICAgICAgIC8vIGZpcnN0IGRheSBvZiB0aGUgZ2l2ZW4gbW9udGguXG4gICAgICAgIHZhciBnZXREYXkgPSBmdW5jdGlvbiAoeWVhciwgbW9udGgpIHtcbiAgICAgICAgICByZXR1cm4gTW9udGhzW21vbnRoXSArIDM2NSAqICh5ZWFyIC0gMTk3MCkgKyBmbG9vcigoeWVhciAtIDE5NjkgKyAobW9udGggPSArKG1vbnRoID4gMSkpKSAvIDQpIC0gZmxvb3IoKHllYXIgLSAxOTAxICsgbW9udGgpIC8gMTAwKSArIGZsb29yKCh5ZWFyIC0gMTYwMSArIG1vbnRoKSAvIDQwMCk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIEludGVybmFsOiBEZXRlcm1pbmVzIGlmIGEgcHJvcGVydHkgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgdGhlIGdpdmVuXG4gICAgICAvLyBvYmplY3QuIERlbGVnYXRlcyB0byB0aGUgbmF0aXZlIGBPYmplY3QjaGFzT3duUHJvcGVydHlgIG1ldGhvZC5cbiAgICAgIGlmICghKGlzUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eSkpIHtcbiAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgIHZhciBtZW1iZXJzID0ge30sIGNvbnN0cnVjdG9yO1xuICAgICAgICAgIGlmICgobWVtYmVycy5fX3Byb3RvX18gPSBudWxsLCBtZW1iZXJzLl9fcHJvdG9fXyA9IHtcbiAgICAgICAgICAgIC8vIFRoZSAqcHJvdG8qIHByb3BlcnR5IGNhbm5vdCBiZSBzZXQgbXVsdGlwbGUgdGltZXMgaW4gcmVjZW50XG4gICAgICAgICAgICAvLyB2ZXJzaW9ucyBvZiBGaXJlZm94IGFuZCBTZWFNb25rZXkuXG4gICAgICAgICAgICBcInRvU3RyaW5nXCI6IDFcbiAgICAgICAgICB9LCBtZW1iZXJzKS50b1N0cmluZyAhPSBnZXRDbGFzcykge1xuICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDIuMC4zIGRvZXNuJ3QgaW1wbGVtZW50IGBPYmplY3QjaGFzT3duUHJvcGVydHlgLCBidXRcbiAgICAgICAgICAgIC8vIHN1cHBvcnRzIHRoZSBtdXRhYmxlICpwcm90byogcHJvcGVydHkuXG4gICAgICAgICAgICBpc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIC8vIENhcHR1cmUgYW5kIGJyZWFrIHRoZSBvYmplY3RncyBwcm90b3R5cGUgY2hhaW4gKHNlZSBzZWN0aW9uIDguNi4yXG4gICAgICAgICAgICAgIC8vIG9mIHRoZSBFUyA1LjEgc3BlYykuIFRoZSBwYXJlbnRoZXNpemVkIGV4cHJlc3Npb24gcHJldmVudHMgYW5cbiAgICAgICAgICAgICAgLy8gdW5zYWZlIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBDbG9zdXJlIENvbXBpbGVyLlxuICAgICAgICAgICAgICB2YXIgb3JpZ2luYWwgPSB0aGlzLl9fcHJvdG9fXywgcmVzdWx0ID0gcHJvcGVydHkgaW4gKHRoaXMuX19wcm90b19fID0gbnVsbCwgdGhpcyk7XG4gICAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBvcmlnaW5hbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENhcHR1cmUgYSByZWZlcmVuY2UgdG8gdGhlIHRvcC1sZXZlbCBgT2JqZWN0YCBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yID0gbWVtYmVycy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSB0byBzaW11bGF0ZSBgT2JqZWN0I2hhc093blByb3BlcnR5YCBpblxuICAgICAgICAgICAgLy8gb3RoZXIgZW52aXJvbm1lbnRzLlxuICAgICAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gKHRoaXMuY29uc3RydWN0b3IgfHwgY29uc3RydWN0b3IpLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgIShwcm9wZXJ0eSBpbiBwYXJlbnQgJiYgdGhpc1twcm9wZXJ0eV0gPT09IHBhcmVudFtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWVtYmVycyA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIGlzUHJvcGVydHkuY2FsbCh0aGlzLCBwcm9wZXJ0eSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIEludGVybmFsOiBBIHNldCBvZiBwcmltaXRpdmUgdHlwZXMgdXNlZCBieSBgaXNIb3N0VHlwZWAuXG4gICAgICB2YXIgUHJpbWl0aXZlVHlwZXMgPSB7XG4gICAgICAgIFwiYm9vbGVhblwiOiAxLFxuICAgICAgICBcIm51bWJlclwiOiAxLFxuICAgICAgICBcInN0cmluZ1wiOiAxLFxuICAgICAgICBcInVuZGVmaW5lZFwiOiAxXG4gICAgICB9O1xuXG4gICAgICAvLyBJbnRlcm5hbDogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGBwcm9wZXJ0eWAgdmFsdWUgaXMgYVxuICAgICAgLy8gbm9uLXByaW1pdGl2ZS5cbiAgICAgIHZhciBpc0hvc3RUeXBlID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT0gXCJvYmplY3RcIiA/ICEhb2JqZWN0W3Byb3BlcnR5XSA6ICFQcmltaXRpdmVUeXBlc1t0eXBlXTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEludGVybmFsOiBOb3JtYWxpemVzIHRoZSBgZm9yLi4uaW5gIGl0ZXJhdGlvbiBhbGdvcml0aG0gYWNyb3NzXG4gICAgICAvLyBlbnZpcm9ubWVudHMuIEVhY2ggZW51bWVyYXRlZCBrZXkgaXMgeWllbGRlZCB0byBhIGBjYWxsYmFja2AgZnVuY3Rpb24uXG4gICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNpemUgPSAwLCBQcm9wZXJ0aWVzLCBtZW1iZXJzLCBwcm9wZXJ0eTtcblxuICAgICAgICAvLyBUZXN0cyBmb3IgYnVncyBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCdzIGBmb3IuLi5pbmAgYWxnb3JpdGhtLiBUaGVcbiAgICAgICAgLy8gYHZhbHVlT2ZgIHByb3BlcnR5IGluaGVyaXRzIHRoZSBub24tZW51bWVyYWJsZSBmbGFnIGZyb21cbiAgICAgICAgLy8gYE9iamVjdC5wcm90b3R5cGVgIGluIG9sZGVyIHZlcnNpb25zIG9mIElFLCBOZXRzY2FwZSwgYW5kIE1vemlsbGEuXG4gICAgICAgIChQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMudmFsdWVPZiA9IDA7XG4gICAgICAgIH0pLnByb3RvdHlwZS52YWx1ZU9mID0gMDtcblxuICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGBQcm9wZXJ0aWVzYCBjbGFzcy5cbiAgICAgICAgbWVtYmVycyA9IG5ldyBQcm9wZXJ0aWVzKCk7XG4gICAgICAgIGZvciAocHJvcGVydHkgaW4gbWVtYmVycykge1xuICAgICAgICAgIC8vIElnbm9yZSBhbGwgcHJvcGVydGllcyBpbmhlcml0ZWQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuXG4gICAgICAgICAgaWYgKGlzUHJvcGVydHkuY2FsbChtZW1iZXJzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHNpemUrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgUHJvcGVydGllcyA9IG1lbWJlcnMgPSBudWxsO1xuXG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgaXRlcmF0aW9uIGFsZ29yaXRobS5cbiAgICAgICAgaWYgKCFzaXplKSB7XG4gICAgICAgICAgLy8gQSBsaXN0IG9mIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gYE9iamVjdC5wcm90b3R5cGVgLlxuICAgICAgICAgIG1lbWJlcnMgPSBbXCJ2YWx1ZU9mXCIsIFwidG9TdHJpbmdcIiwgXCJ0b0xvY2FsZVN0cmluZ1wiLCBcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsIFwiaXNQcm90b3R5cGVPZlwiLCBcImhhc093blByb3BlcnR5XCIsIFwiY29uc3RydWN0b3JcIl07XG4gICAgICAgICAgLy8gSUUgPD0gOCwgTW96aWxsYSAxLjAsIGFuZCBOZXRzY2FwZSA2LjIgaWdub3JlIHNoYWRvd2VkIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgICAgLy8gcHJvcGVydGllcy5cbiAgICAgICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpc0Z1bmN0aW9uID0gZ2V0Q2xhc3MuY2FsbChvYmplY3QpID09IGZ1bmN0aW9uQ2xhc3MsIHByb3BlcnR5LCBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgaGFzUHJvcGVydHkgPSAhaXNGdW5jdGlvbiAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yICE9IFwiZnVuY3Rpb25cIiAmJiBpc0hvc3RUeXBlKG9iamVjdCwgXCJoYXNPd25Qcm9wZXJ0eVwiKSA/IG9iamVjdC5oYXNPd25Qcm9wZXJ0eSA6IGlzUHJvcGVydHk7XG4gICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAvLyBHZWNrbyA8PSAxLjAgZW51bWVyYXRlcyB0aGUgYHByb3RvdHlwZWAgcHJvcGVydHkgb2YgZnVuY3Rpb25zIHVuZGVyXG4gICAgICAgICAgICAgIC8vIGNlcnRhaW4gY29uZGl0aW9uczsgSUUgZG9lcyBub3QuXG4gICAgICAgICAgICAgIGlmICghKGlzRnVuY3Rpb24gJiYgcHJvcGVydHkgPT0gXCJwcm90b3R5cGVcIikgJiYgaGFzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFudWFsbHkgaW52b2tlIHRoZSBjYWxsYmFjayBmb3IgZWFjaCBub24tZW51bWVyYWJsZSBwcm9wZXJ0eS5cbiAgICAgICAgICAgIGZvciAobGVuZ3RoID0gbWVtYmVycy5sZW5ndGg7IHByb3BlcnR5ID0gbWVtYmVyc1stLWxlbmd0aF07IGhhc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkgJiYgY2FsbGJhY2socHJvcGVydHkpKXsgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PSAyKSB7XG4gICAgICAgICAgLy8gU2FmYXJpIDw9IDIuMC40IGVudW1lcmF0ZXMgc2hhZG93ZWQgcHJvcGVydGllcyB0d2ljZS5cbiAgICAgICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIHNldCBvZiBpdGVyYXRlZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgdmFyIG1lbWJlcnMgPSB7fSwgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eTtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIFN0b3JlIGVhY2ggcHJvcGVydHkgbmFtZSB0byBwcmV2ZW50IGRvdWJsZSBlbnVtZXJhdGlvbi4gVGhlXG4gICAgICAgICAgICAgIC8vIGBwcm90b3R5cGVgIHByb3BlcnR5IG9mIGZ1bmN0aW9ucyBpcyBub3QgZW51bWVyYXRlZCBkdWUgdG8gY3Jvc3MtXG4gICAgICAgICAgICAgIC8vIGVudmlyb25tZW50IGluY29uc2lzdGVuY2llcy5cbiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiAhaXNQcm9wZXJ0eS5jYWxsKG1lbWJlcnMsIHByb3BlcnR5KSAmJiAobWVtYmVyc1twcm9wZXJ0eV0gPSAxKSAmJiBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5vIGJ1Z3MgZGV0ZWN0ZWQ7IHVzZSB0aGUgc3RhbmRhcmQgYGZvci4uLmluYCBhbGdvcml0aG0uXG4gICAgICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eSwgaXNDb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIGlmICghKGlzRnVuY3Rpb24gJiYgcHJvcGVydHkgPT0gXCJwcm90b3R5cGVcIikgJiYgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpICYmICEoaXNDb25zdHJ1Y3RvciA9IHByb3BlcnR5ID09PSBcImNvbnN0cnVjdG9yXCIpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciB0aGUgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSBkdWUgdG9cbiAgICAgICAgICAgIC8vIGNyb3NzLWVudmlyb25tZW50IGluY29uc2lzdGVuY2llcy5cbiAgICAgICAgICAgIGlmIChpc0NvbnN0cnVjdG9yIHx8IGlzUHJvcGVydHkuY2FsbChvYmplY3QsIChwcm9wZXJ0eSA9IFwiY29uc3RydWN0b3JcIikpKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JFYWNoKG9iamVjdCwgY2FsbGJhY2spO1xuICAgICAgfTtcblxuICAgICAgLy8gUHVibGljOiBTZXJpYWxpemVzIGEgSmF2YVNjcmlwdCBgdmFsdWVgIGFzIGEgSlNPTiBzdHJpbmcuIFRoZSBvcHRpb25hbFxuICAgICAgLy8gYGZpbHRlcmAgYXJndW1lbnQgbWF5IHNwZWNpZnkgZWl0aGVyIGEgZnVuY3Rpb24gdGhhdCBhbHRlcnMgaG93IG9iamVjdCBhbmRcbiAgICAgIC8vIGFycmF5IG1lbWJlcnMgYXJlIHNlcmlhbGl6ZWQsIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIG51bWJlcnMgdGhhdFxuICAgICAgLy8gaW5kaWNhdGVzIHdoaWNoIHByb3BlcnRpZXMgc2hvdWxkIGJlIHNlcmlhbGl6ZWQuIFRoZSBvcHRpb25hbCBgd2lkdGhgXG4gICAgICAvLyBhcmd1bWVudCBtYXkgYmUgZWl0aGVyIGEgc3RyaW5nIG9yIG51bWJlciB0aGF0IHNwZWNpZmllcyB0aGUgaW5kZW50YXRpb25cbiAgICAgIC8vIGxldmVsIG9mIHRoZSBvdXRwdXQuXG4gICAgICBpZiAoIWhhcyhcImpzb24tc3RyaW5naWZ5XCIpKSB7XG4gICAgICAgIC8vIEludGVybmFsOiBBIG1hcCBvZiBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHRoZWlyIGVzY2FwZWQgZXF1aXZhbGVudHMuXG4gICAgICAgIHZhciBFc2NhcGVzID0ge1xuICAgICAgICAgIDkyOiBcIlxcXFxcXFxcXCIsXG4gICAgICAgICAgMzQ6ICdcXFxcXCInLFxuICAgICAgICAgIDg6IFwiXFxcXGJcIixcbiAgICAgICAgICAxMjogXCJcXFxcZlwiLFxuICAgICAgICAgIDEwOiBcIlxcXFxuXCIsXG4gICAgICAgICAgMTM6IFwiXFxcXHJcIixcbiAgICAgICAgICA5OiBcIlxcXFx0XCJcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogQ29udmVydHMgYHZhbHVlYCBpbnRvIGEgemVyby1wYWRkZWQgc3RyaW5nIHN1Y2ggdGhhdCBpdHNcbiAgICAgICAgLy8gbGVuZ3RoIGlzIGF0IGxlYXN0IGVxdWFsIHRvIGB3aWR0aGAuIFRoZSBgd2lkdGhgIG11c3QgYmUgPD0gNi5cbiAgICAgICAgdmFyIGxlYWRpbmdaZXJvZXMgPSBcIjAwMDAwMFwiO1xuICAgICAgICB2YXIgdG9QYWRkZWRTdHJpbmcgPSBmdW5jdGlvbiAod2lkdGgsIHZhbHVlKSB7XG4gICAgICAgICAgLy8gVGhlIGB8fCAwYCBleHByZXNzaW9uIGlzIG5lY2Vzc2FyeSB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpblxuICAgICAgICAgIC8vIE9wZXJhIDw9IDcuNTR1MiB3aGVyZSBgMCA9PSAtMGAsIGJ1dCBgU3RyaW5nKC0wKSAhPT0gXCIwXCJgLlxuICAgICAgICAgIHJldHVybiAobGVhZGluZ1plcm9lcyArICh2YWx1ZSB8fCAwKSkuc2xpY2UoLXdpZHRoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogRG91YmxlLXF1b3RlcyBhIHN0cmluZyBgdmFsdWVgLCByZXBsYWNpbmcgYWxsIEFTQ0lJIGNvbnRyb2xcbiAgICAgICAgLy8gY2hhcmFjdGVycyAoY2hhcmFjdGVycyB3aXRoIGNvZGUgdW5pdCB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAzMSkgd2l0aFxuICAgICAgICAvLyB0aGVpciBlc2NhcGVkIGVxdWl2YWxlbnRzLiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICAgICAgICAvLyBgUXVvdGUodmFsdWUpYCBvcGVyYXRpb24gZGVmaW5lZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLlxuICAgICAgICB2YXIgdW5pY29kZVByZWZpeCA9IFwiXFxcXHUwMFwiO1xuICAgICAgICB2YXIgcXVvdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJ1wiJywgaW5kZXggPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGgsIHVzZUNoYXJJbmRleCA9ICFjaGFySW5kZXhCdWdneSB8fCBsZW5ndGggPiAxMDtcbiAgICAgICAgICB2YXIgc3ltYm9scyA9IHVzZUNoYXJJbmRleCAmJiAoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5zcGxpdChcIlwiKSA6IHZhbHVlKTtcbiAgICAgICAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyBhIGNvbnRyb2wgY2hhcmFjdGVyLCBhcHBlbmQgaXRzIFVuaWNvZGUgb3JcbiAgICAgICAgICAgIC8vIHNob3J0aGFuZCBlc2NhcGUgc2VxdWVuY2U7IG90aGVyd2lzZSwgYXBwZW5kIHRoZSBjaGFyYWN0ZXIgYXMtaXMuXG4gICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgIGNhc2UgODogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEyOiBjYXNlIDEzOiBjYXNlIDM0OiBjYXNlIDkyOlxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBFc2NhcGVzW2NoYXJDb2RlXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPCAzMikge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHVuaWNvZGVQcmVmaXggKyB0b1BhZGRlZFN0cmluZygyLCBjaGFyQ29kZS50b1N0cmluZygxNikpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB1c2VDaGFySW5kZXggPyBzeW1ib2xzW2luZGV4XSA6IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnXCInO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSBzZXJpYWxpemVzIGFuIG9iamVjdC4gSW1wbGVtZW50cyB0aGVcbiAgICAgICAgLy8gYFN0cihrZXksIGhvbGRlcilgLCBgSk8odmFsdWUpYCwgYW5kIGBKQSh2YWx1ZSlgIG9wZXJhdGlvbnMuXG4gICAgICAgIHZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAocHJvcGVydHksIG9iamVjdCwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSwgY2xhc3NOYW1lLCB5ZWFyLCBtb250aCwgZGF0ZSwgdGltZSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcywgcmVzdWx0cywgZWxlbWVudCwgaW5kZXgsIGxlbmd0aCwgcHJlZml4LCByZXN1bHQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIE5lY2Vzc2FyeSBmb3IgaG9zdCBvYmplY3Qgc3VwcG9ydC5cbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlKSB7XG4gICAgICAgICAgICBjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gZGF0ZUNsYXNzICYmICFpc1Byb3BlcnR5LmNhbGwodmFsdWUsIFwidG9KU09OXCIpKSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA+IC0xIC8gMCAmJiB2YWx1ZSA8IDEgLyAwKSB7XG4gICAgICAgICAgICAgICAgLy8gRGF0ZXMgYXJlIHNlcmlhbGl6ZWQgYWNjb3JkaW5nIHRvIHRoZSBgRGF0ZSN0b0pTT05gIG1ldGhvZFxuICAgICAgICAgICAgICAgIC8vIHNwZWNpZmllZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS45LjUuNDQuIFNlZSBzZWN0aW9uIDE1LjkuMS4xNVxuICAgICAgICAgICAgICAgIC8vIGZvciB0aGUgSVNPIDg2MDEgZGF0ZSB0aW1lIHN0cmluZyBmb3JtYXQuXG4gICAgICAgICAgICAgICAgaWYgKGdldERheSkge1xuICAgICAgICAgICAgICAgICAgLy8gTWFudWFsbHkgY29tcHV0ZSB0aGUgeWVhciwgbW9udGgsIGRhdGUsIGhvdXJzLCBtaW51dGVzLFxuICAgICAgICAgICAgICAgICAgLy8gc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kcyBpZiB0aGUgYGdldFVUQypgIG1ldGhvZHMgYXJlXG4gICAgICAgICAgICAgICAgICAvLyBidWdneS4gQWRhcHRlZCBmcm9tIEBZYWZmbGUncyBgZGF0ZS1zaGltYCBwcm9qZWN0LlxuICAgICAgICAgICAgICAgICAgZGF0ZSA9IGZsb29yKHZhbHVlIC8gODY0ZTUpO1xuICAgICAgICAgICAgICAgICAgZm9yICh5ZWFyID0gZmxvb3IoZGF0ZSAvIDM2NS4yNDI1KSArIDE5NzAgLSAxOyBnZXREYXkoeWVhciArIDEsIDApIDw9IGRhdGU7IHllYXIrKyl7IH1cbiAgICAgICAgICAgICAgICAgIGZvciAobW9udGggPSBmbG9vcigoZGF0ZSAtIGdldERheSh5ZWFyLCAwKSkgLyAzMC40Mik7IGdldERheSh5ZWFyLCBtb250aCArIDEpIDw9IGRhdGU7IG1vbnRoKyspeyB9XG4gICAgICAgICAgICAgICAgICBkYXRlID0gMSArIGRhdGUgLSBnZXREYXkoeWVhciwgbW9udGgpO1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIGB0aW1lYCB2YWx1ZSBzcGVjaWZpZXMgdGhlIHRpbWUgd2l0aGluIHRoZSBkYXkgKHNlZSBFU1xuICAgICAgICAgICAgICAgICAgLy8gNS4xIHNlY3Rpb24gMTUuOS4xLjIpLiBUaGUgZm9ybXVsYSBgKEEgJSBCICsgQikgJSBCYCBpcyB1c2VkXG4gICAgICAgICAgICAgICAgICAvLyB0byBjb21wdXRlIGBBIG1vZHVsbyBCYCwgYXMgdGhlIGAlYCBvcGVyYXRvciBkb2VzIG5vdFxuICAgICAgICAgICAgICAgICAgLy8gY29ycmVzcG9uZCB0byB0aGUgYG1vZHVsb2Agb3BlcmF0aW9uIGZvciBuZWdhdGl2ZSBudW1iZXJzLlxuICAgICAgICAgICAgICAgICAgdGltZSA9ICh2YWx1ZSAlIDg2NGU1ICsgODY0ZTUpICUgODY0ZTU7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGFuZCBtaWxsaXNlY29uZHMgYXJlIG9idGFpbmVkIGJ5XG4gICAgICAgICAgICAgICAgICAvLyBkZWNvbXBvc2luZyB0aGUgdGltZSB3aXRoaW4gdGhlIGRheS4gU2VlIHNlY3Rpb24gMTUuOS4xLjEwLlxuICAgICAgICAgICAgICAgICAgaG91cnMgPSBmbG9vcih0aW1lIC8gMzZlNSkgJSAyNDtcbiAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBmbG9vcih0aW1lIC8gNmU0KSAlIDYwO1xuICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IGZsb29yKHRpbWUgLyAxZTMpICUgNjA7XG4gICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB0aW1lICUgMWUzO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB5ZWFyID0gdmFsdWUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgIG1vbnRoID0gdmFsdWUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgICAgICAgIGRhdGUgPSB2YWx1ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgICAgICAgICAgICBob3VycyA9IHZhbHVlLmdldFVUQ0hvdXJzKCk7XG4gICAgICAgICAgICAgICAgICBtaW51dGVzID0gdmFsdWUuZ2V0VVRDTWludXRlcygpO1xuICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHZhbHVlLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHZhbHVlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTZXJpYWxpemUgZXh0ZW5kZWQgeWVhcnMgY29ycmVjdGx5LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gKHllYXIgPD0gMCB8fCB5ZWFyID49IDFlNCA/ICh5ZWFyIDwgMCA/IFwiLVwiIDogXCIrXCIpICsgdG9QYWRkZWRTdHJpbmcoNiwgeWVhciA8IDAgPyAteWVhciA6IHllYXIpIDogdG9QYWRkZWRTdHJpbmcoNCwgeWVhcikpICtcbiAgICAgICAgICAgICAgICAgIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbW9udGggKyAxKSArIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgZGF0ZSkgK1xuICAgICAgICAgICAgICAgICAgLy8gTW9udGhzLCBkYXRlcywgaG91cnMsIG1pbnV0ZXMsIGFuZCBzZWNvbmRzIHNob3VsZCBoYXZlIHR3b1xuICAgICAgICAgICAgICAgICAgLy8gZGlnaXRzOyBtaWxsaXNlY29uZHMgc2hvdWxkIGhhdmUgdGhyZWUuXG4gICAgICAgICAgICAgICAgICBcIlRcIiArIHRvUGFkZGVkU3RyaW5nKDIsIGhvdXJzKSArIFwiOlwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbWludXRlcykgKyBcIjpcIiArIHRvUGFkZGVkU3RyaW5nKDIsIHNlY29uZHMpICtcbiAgICAgICAgICAgICAgICAgIC8vIE1pbGxpc2Vjb25kcyBhcmUgb3B0aW9uYWwgaW4gRVMgNS4wLCBidXQgcmVxdWlyZWQgaW4gNS4xLlxuICAgICAgICAgICAgICAgICAgXCIuXCIgKyB0b1BhZGRlZFN0cmluZygzLCBtaWxsaXNlY29uZHMpICsgXCJaXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZS50b0pTT04gPT0gXCJmdW5jdGlvblwiICYmICgoY2xhc3NOYW1lICE9IG51bWJlckNsYXNzICYmIGNsYXNzTmFtZSAhPSBzdHJpbmdDbGFzcyAmJiBjbGFzc05hbWUgIT0gYXJyYXlDbGFzcykgfHwgaXNQcm9wZXJ0eS5jYWxsKHZhbHVlLCBcInRvSlNPTlwiKSkpIHtcbiAgICAgICAgICAgICAgLy8gUHJvdG90eXBlIDw9IDEuNi4xIGFkZHMgbm9uLXN0YW5kYXJkIGB0b0pTT05gIG1ldGhvZHMgdG8gdGhlXG4gICAgICAgICAgICAgIC8vIGBOdW1iZXJgLCBgU3RyaW5nYCwgYERhdGVgLCBhbmQgYEFycmF5YCBwcm90b3R5cGVzLiBKU09OIDNcbiAgICAgICAgICAgICAgLy8gaWdub3JlcyBhbGwgYHRvSlNPTmAgbWV0aG9kcyBvbiB0aGVzZSBvYmplY3RzIHVubGVzcyB0aGV5IGFyZVxuICAgICAgICAgICAgICAvLyBkZWZpbmVkIGRpcmVjdGx5IG9uIGFuIGluc3RhbmNlLlxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gSWYgYSByZXBsYWNlbWVudCBmdW5jdGlvbiB3YXMgcHJvdmlkZWQsIGNhbGwgaXQgdG8gb2J0YWluIHRoZSB2YWx1ZVxuICAgICAgICAgICAgLy8gZm9yIHNlcmlhbGl6YXRpb24uXG4gICAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmNhbGwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSBib29sZWFuQ2xhc3MpIHtcbiAgICAgICAgICAgIC8vIEJvb2xlYW5zIGFyZSByZXByZXNlbnRlZCBsaXRlcmFsbHkuXG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IG51bWJlckNsYXNzKSB7XG4gICAgICAgICAgICAvLyBKU09OIG51bWJlcnMgbXVzdCBiZSBmaW5pdGUuIGBJbmZpbml0eWAgYW5kIGBOYU5gIGFyZSBzZXJpYWxpemVkIGFzXG4gICAgICAgICAgICAvLyBgXCJudWxsXCJgLlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDAgPyBcIlwiICsgdmFsdWUgOiBcIm51bGxcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcykge1xuICAgICAgICAgICAgLy8gU3RyaW5ncyBhcmUgZG91YmxlLXF1b3RlZCBhbmQgZXNjYXBlZC5cbiAgICAgICAgICAgIHJldHVybiBxdW90ZShcIlwiICsgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGlzIGlzIGEgbGluZWFyIHNlYXJjaDsgcGVyZm9ybWFuY2VcbiAgICAgICAgICAgIC8vIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZiB1bmlxdWUgbmVzdGVkIG9iamVjdHMuXG4gICAgICAgICAgICBmb3IgKGxlbmd0aCA9IHN0YWNrLmxlbmd0aDsgbGVuZ3RoLS07KSB7XG4gICAgICAgICAgICAgIGlmIChzdGFja1tsZW5ndGhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIEN5Y2xpYyBzdHJ1Y3R1cmVzIGNhbm5vdCBiZSBzZXJpYWxpemVkIGJ5IGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgICAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBpbmRlbnRhdGlvbiBsZXZlbCBhbmQgaW5kZW50IG9uZSBhZGRpdGlvbmFsIGxldmVsLlxuICAgICAgICAgICAgcHJlZml4ID0gaW5kZW50YXRpb247XG4gICAgICAgICAgICBpbmRlbnRhdGlvbiArPSB3aGl0ZXNwYWNlO1xuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBhcnJheSBlbGVtZW50cy5cbiAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gc2VyaWFsaXplKGluZGV4LCB2YWx1ZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGVsZW1lbnQgPT09IHVuZGVmID8gXCJudWxsXCIgOiBlbGVtZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzLmxlbmd0aCA/ICh3aGl0ZXNwYWNlID8gXCJbXFxuXCIgKyBpbmRlbnRhdGlvbiArIHJlc3VsdHMuam9pbihcIixcXG5cIiArIGluZGVudGF0aW9uKSArIFwiXFxuXCIgKyBwcmVmaXggKyBcIl1cIiA6IChcIltcIiArIHJlc3VsdHMuam9pbihcIixcIikgKyBcIl1cIikpIDogXCJbXVwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VyaWFsaXplIG9iamVjdCBtZW1iZXJzLiBNZW1iZXJzIGFyZSBzZWxlY3RlZCBmcm9tXG4gICAgICAgICAgICAgIC8vIGVpdGhlciBhIHVzZXItc3BlY2lmaWVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMsIG9yIHRoZSBvYmplY3RcbiAgICAgICAgICAgICAgLy8gaXRzZWxmLlxuICAgICAgICAgICAgICBmb3JFYWNoKHByb3BlcnRpZXMgfHwgdmFsdWUsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2VyaWFsaXplKHByb3BlcnR5LCB2YWx1ZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT09IHVuZGVmKSB7XG4gICAgICAgICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMzogXCJJZiBgZ2FwYCB7d2hpdGVzcGFjZX1cbiAgICAgICAgICAgICAgICAgIC8vIGlzIG5vdCB0aGUgZW1wdHkgc3RyaW5nLCBsZXQgYG1lbWJlcmAge3F1b3RlKHByb3BlcnR5KSArIFwiOlwifVxuICAgICAgICAgICAgICAgICAgLy8gYmUgdGhlIGNvbmNhdGVuYXRpb24gb2YgYG1lbWJlcmAgYW5kIHRoZSBgc3BhY2VgIGNoYXJhY3Rlci5cIlxuICAgICAgICAgICAgICAgICAgLy8gVGhlIFwiYHNwYWNlYCBjaGFyYWN0ZXJcIiByZWZlcnMgdG8gdGhlIGxpdGVyYWwgc3BhY2VcbiAgICAgICAgICAgICAgICAgIC8vIGNoYXJhY3Rlciwgbm90IHRoZSBgc3BhY2VgIHt3aWR0aH0gYXJndW1lbnQgcHJvdmlkZWQgdG9cbiAgICAgICAgICAgICAgICAgIC8vIGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocXVvdGUocHJvcGVydHkpICsgXCI6XCIgKyAod2hpdGVzcGFjZSA/IFwiIFwiIDogXCJcIikgKyBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzLmxlbmd0aCA/ICh3aGl0ZXNwYWNlID8gXCJ7XFxuXCIgKyBpbmRlbnRhdGlvbiArIHJlc3VsdHMuam9pbihcIixcXG5cIiArIGluZGVudGF0aW9uKSArIFwiXFxuXCIgKyBwcmVmaXggKyBcIn1cIiA6IChcIntcIiArIHJlc3VsdHMuam9pbihcIixcIikgKyBcIn1cIikpIDogXCJ7fVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvYmplY3QgZnJvbSB0aGUgdHJhdmVyc2VkIG9iamVjdCBzdGFjay5cbiAgICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHVibGljOiBgSlNPTi5zdHJpbmdpZnlgLiBTZWUgRVMgNS4xIHNlY3Rpb24gMTUuMTIuMy5cbiAgICAgICAgZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoc291cmNlLCBmaWx0ZXIsIHdpZHRoKSB7XG4gICAgICAgICAgdmFyIHdoaXRlc3BhY2UsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCBjbGFzc05hbWU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiBmaWx0ZXIgPT0gXCJvYmplY3RcIiAmJiBmaWx0ZXIpIHtcbiAgICAgICAgICAgIGlmICgoY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbChmaWx0ZXIpKSA9PSBmdW5jdGlvbkNsYXNzKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrID0gZmlsdGVyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcykge1xuICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBwcm9wZXJ0eSBuYW1lcyBhcnJheSBpbnRvIGEgbWFrZXNoaWZ0IHNldC5cbiAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGZpbHRlci5sZW5ndGgsIHZhbHVlOyBpbmRleCA8IGxlbmd0aDsgdmFsdWUgPSBmaWx0ZXJbaW5kZXgrK10sICgoY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSkpLCBjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MgfHwgY2xhc3NOYW1lID09IG51bWJlckNsYXNzKSAmJiAocHJvcGVydGllc1t2YWx1ZV0gPSAxKSl7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHdpZHRoKSB7XG4gICAgICAgICAgICBpZiAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwod2lkdGgpKSA9PSBudW1iZXJDbGFzcykge1xuICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBgd2lkdGhgIHRvIGFuIGludGVnZXIgYW5kIGNyZWF0ZSBhIHN0cmluZyBjb250YWluaW5nXG4gICAgICAgICAgICAgIC8vIGB3aWR0aGAgbnVtYmVyIG9mIHNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgIGlmICgod2lkdGggLT0gd2lkdGggJSAxKSA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHdoaXRlc3BhY2UgPSBcIlwiLCB3aWR0aCA+IDEwICYmICh3aWR0aCA9IDEwKTsgd2hpdGVzcGFjZS5sZW5ndGggPCB3aWR0aDsgd2hpdGVzcGFjZSArPSBcIiBcIil7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MpIHtcbiAgICAgICAgICAgICAgd2hpdGVzcGFjZSA9IHdpZHRoLmxlbmd0aCA8PSAxMCA/IHdpZHRoIDogd2lkdGguc2xpY2UoMCwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgZGlzY2FyZHMgdGhlIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggZW1wdHkgc3RyaW5nIGtleXNcbiAgICAgICAgICAvLyAoYFwiXCJgKSBvbmx5IGlmIHRoZXkgYXJlIHVzZWQgZGlyZWN0bHkgd2l0aGluIGFuIG9iamVjdCBtZW1iZXIgbGlzdFxuICAgICAgICAgIC8vIChlLmcuLCBgIShcIlwiIGluIHsgXCJcIjogMX0pYCkuXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShcIlwiLCAodmFsdWUgPSB7fSwgdmFsdWVbXCJcIl0gPSBzb3VyY2UsIHZhbHVlKSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIFwiXCIsIFtdKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gUHVibGljOiBQYXJzZXMgYSBKU09OIHNvdXJjZSBzdHJpbmcuXG4gICAgICBpZiAoIWhhcyhcImpzb24tcGFyc2VcIikpIHtcbiAgICAgICAgdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IEEgbWFwIG9mIGVzY2FwZWQgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCB0aGVpciB1bmVzY2FwZWRcbiAgICAgICAgLy8gZXF1aXZhbGVudHMuXG4gICAgICAgIHZhciBVbmVzY2FwZXMgPSB7XG4gICAgICAgICAgOTI6IFwiXFxcXFwiLFxuICAgICAgICAgIDM0OiAnXCInLFxuICAgICAgICAgIDQ3OiBcIi9cIixcbiAgICAgICAgICA5ODogXCJcXGJcIixcbiAgICAgICAgICAxMTY6IFwiXFx0XCIsXG4gICAgICAgICAgMTEwOiBcIlxcblwiLFxuICAgICAgICAgIDEwMjogXCJcXGZcIixcbiAgICAgICAgICAxMTQ6IFwiXFxyXCJcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogU3RvcmVzIHRoZSBwYXJzZXIgc3RhdGUuXG4gICAgICAgIHZhciBJbmRleCwgU291cmNlO1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZXNldHMgdGhlIHBhcnNlciBzdGF0ZSBhbmQgdGhyb3dzIGEgYFN5bnRheEVycm9yYC5cbiAgICAgICAgdmFyIGFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIEluZGV4ID0gU291cmNlID0gbnVsbDtcbiAgICAgICAgICB0aHJvdyBTeW50YXhFcnJvcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZXR1cm5zIHRoZSBuZXh0IHRva2VuLCBvciBgXCIkXCJgIGlmIHRoZSBwYXJzZXIgaGFzIHJlYWNoZWRcbiAgICAgICAgLy8gdGhlIGVuZCBvZiB0aGUgc291cmNlIHN0cmluZy4gQSB0b2tlbiBtYXkgYmUgYSBzdHJpbmcsIG51bWJlciwgYG51bGxgXG4gICAgICAgIC8vIGxpdGVyYWwsIG9yIEJvb2xlYW4gbGl0ZXJhbC5cbiAgICAgICAgdmFyIGxleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gU291cmNlLCBsZW5ndGggPSBzb3VyY2UubGVuZ3RoLCB2YWx1ZSwgYmVnaW4sIHBvc2l0aW9uLCBpc1NpZ25lZCwgY2hhckNvZGU7XG4gICAgICAgICAgd2hpbGUgKEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgIHN3aXRjaCAoY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuICAgICAgICAgICAgICAgIC8vIFNraXAgd2hpdGVzcGFjZSB0b2tlbnMsIGluY2x1ZGluZyB0YWJzLCBjYXJyaWFnZSByZXR1cm5zLCBsaW5lXG4gICAgICAgICAgICAgICAgLy8gZmVlZHMsIGFuZCBzcGFjZSBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTIzOiBjYXNlIDEyNTogY2FzZSA5MTogY2FzZSA5MzogY2FzZSA1ODogY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBhIHB1bmN0dWF0b3IgdG9rZW4gKGB7YCwgYH1gLCBgW2AsIGBdYCwgYDpgLCBvciBgLGApIGF0XG4gICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjaGFySW5kZXhCdWdneSA/IHNvdXJjZS5jaGFyQXQoSW5kZXgpIDogc291cmNlW0luZGV4XTtcbiAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICAvLyBgXCJgIGRlbGltaXRzIGEgSlNPTiBzdHJpbmc7IGFkdmFuY2UgdG8gdGhlIG5leHQgY2hhcmFjdGVyIGFuZFxuICAgICAgICAgICAgICAgIC8vIGJlZ2luIHBhcnNpbmcgdGhlIHN0cmluZy4gU3RyaW5nIHRva2VucyBhcmUgcHJlZml4ZWQgd2l0aCB0aGVcbiAgICAgICAgICAgICAgICAvLyBzZW50aW5lbCBgQGAgY2hhcmFjdGVyIHRvIGRpc3Rpbmd1aXNoIHRoZW0gZnJvbSBwdW5jdHVhdG9ycyBhbmRcbiAgICAgICAgICAgICAgICAvLyBlbmQtb2Ytc3RyaW5nIHRva2Vucy5cbiAgICAgICAgICAgICAgICBmb3IgKHZhbHVlID0gXCJAXCIsIEluZGV4Kys7IEluZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPCAzMikge1xuICAgICAgICAgICAgICAgICAgICAvLyBVbmVzY2FwZWQgQVNDSUkgY29udHJvbCBjaGFyYWN0ZXJzICh0aG9zZSB3aXRoIGEgY29kZSB1bml0XG4gICAgICAgICAgICAgICAgICAgIC8vIGxlc3MgdGhhbiB0aGUgc3BhY2UgY2hhcmFjdGVyKSBhcmUgbm90IHBlcm1pdHRlZC5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPT0gOTIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSByZXZlcnNlIHNvbGlkdXMgKGBcXGApIG1hcmtzIHRoZSBiZWdpbm5pbmcgb2YgYW4gZXNjYXBlZFxuICAgICAgICAgICAgICAgICAgICAvLyBjb250cm9sIGNoYXJhY3RlciAoaW5jbHVkaW5nIGBcImAsIGBcXGAsIGFuZCBgL2ApIG9yIFVuaWNvZGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA5MjogY2FzZSAzNDogY2FzZSA0NzogY2FzZSA5ODogY2FzZSAxMTY6IGNhc2UgMTEwOiBjYXNlIDEwMjogY2FzZSAxMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXZpdmUgZXNjYXBlZCBjb250cm9sIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBVbmVzY2FwZXNbY2hhckNvZGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE3OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYFxcdWAgbWFya3MgdGhlIGJlZ2lubmluZyBvZiBhIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSB0byB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCB2YWxpZGF0ZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvdXItZGlnaXQgY29kZSBwb2ludC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gKytJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocG9zaXRpb24gPSBJbmRleCArIDQ7IEluZGV4IDwgcG9zaXRpb247IEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgdmFsaWQgc2VxdWVuY2UgY29tcHJpc2VzIGZvdXIgaGV4ZGlnaXRzIChjYXNlLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnNlbnNpdGl2ZSkgdGhhdCBmb3JtIGEgc2luZ2xlIGhleGFkZWNpbWFsIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1NyB8fCBjaGFyQ29kZSA+PSA5NyAmJiBjaGFyQ29kZSA8PSAxMDIgfHwgY2hhckNvZGUgPj0gNjUgJiYgY2hhckNvZGUgPD0gNzApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXZpdmUgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gZnJvbUNoYXJDb2RlKFwiMHhcIiArIHNvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEFuIHVuZXNjYXBlZCBkb3VibGUtcXVvdGUgY2hhcmFjdGVyIG1hcmtzIHRoZSBlbmQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgLy8gc3RyaW5nLlxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBPcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiBjYXNlIHdoZXJlIGEgc3RyaW5nIGlzIHZhbGlkLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hhckNvZGUgPj0gMzIgJiYgY2hhckNvZGUgIT0gOTIgJiYgY2hhckNvZGUgIT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgc3RyaW5nIGFzLWlzLlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSB0byB0aGUgbmV4dCBjaGFyYWN0ZXIgYW5kIHJldHVybiB0aGUgcmV2aXZlZCBzdHJpbmcuXG4gICAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBVbnRlcm1pbmF0ZWQgc3RyaW5nLlxuICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgbnVtYmVycyBhbmQgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgYmVnaW4gPSBJbmRleDtcbiAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHBhc3QgdGhlIG5lZ2F0aXZlIHNpZ24sIGlmIG9uZSBpcyBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQ1KSB7XG4gICAgICAgICAgICAgICAgICBpc1NpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBhbiBpbnRlZ2VyIG9yIGZsb2F0aW5nLXBvaW50IHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nykge1xuICAgICAgICAgICAgICAgICAgLy8gTGVhZGluZyB6ZXJvZXMgYXJlIGludGVycHJldGVkIGFzIG9jdGFsIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQ4ICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCArIDEpKSwgY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgb2N0YWwgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlzU2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgaW50ZWdlciBjb21wb25lbnQuXG4gICAgICAgICAgICAgICAgICBmb3IgKDsgSW5kZXggPCBsZW5ndGggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgSW5kZXgrKyl7IH1cbiAgICAgICAgICAgICAgICAgIC8vIEZsb2F0cyBjYW5ub3QgY29udGFpbiBhIGxlYWRpbmcgZGVjaW1hbCBwb2ludDsgaG93ZXZlciwgdGhpc1xuICAgICAgICAgICAgICAgICAgLy8gY2FzZSBpcyBhbHJlYWR5IGFjY291bnRlZCBmb3IgYnkgdGhlIHBhcnNlci5cbiAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChJbmRleCkgPT0gNDYpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSArK0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgZGVjaW1hbCBjb21wb25lbnQuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBwb3NpdGlvbiA8IGxlbmd0aCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQocG9zaXRpb24pKSwgY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpOyBwb3NpdGlvbisrKXsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT0gSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIHRyYWlsaW5nIGRlY2ltYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBJbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgZXhwb25lbnRzLiBUaGUgYGVgIGRlbm90aW5nIHRoZSBleHBvbmVudCBpc1xuICAgICAgICAgICAgICAgICAgLy8gY2FzZS1pbnNlbnNpdGl2ZS5cbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDEwMSB8fCBjaGFyQ29kZSA9PSA2OSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIHBhc3QgdGhlIHNpZ24gZm9sbG93aW5nIHRoZSBleHBvbmVudCwgaWYgb25lIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQzIHx8IGNoYXJDb2RlID09IDQ1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgZXhwb25lbnRpYWwgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHBvc2l0aW9uID0gSW5kZXg7IHBvc2l0aW9uIDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbikpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IHBvc2l0aW9uKyspeyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PSBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgZW1wdHkgZXhwb25lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBJbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gQ29lcmNlIHRoZSBwYXJzZWQgdmFsdWUgdG8gYSBKYXZhU2NyaXB0IG51bWJlci5cbiAgICAgICAgICAgICAgICAgIHJldHVybiArc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEEgbmVnYXRpdmUgc2lnbiBtYXkgb25seSBwcmVjZWRlIG51bWJlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGlzU2lnbmVkKSB7XG4gICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBgdHJ1ZWAsIGBmYWxzZWAsIGFuZCBgbnVsbGAgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA0KSA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnNsaWNlKEluZGV4LCBJbmRleCArIDUpID09IFwiZmFsc2VcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA0KSA9PSBcIm51bGxcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBVbnJlY29nbml6ZWQgdG9rZW4uXG4gICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZW50aW5lbCBgJGAgY2hhcmFjdGVyIGlmIHRoZSBwYXJzZXIgaGFzIHJlYWNoZWQgdGhlIGVuZFxuICAgICAgICAgIC8vIG9mIHRoZSBzb3VyY2Ugc3RyaW5nLlxuICAgICAgICAgIHJldHVybiBcIiRcIjtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUGFyc2VzIGEgSlNPTiBgdmFsdWVgIHRva2VuLlxuICAgICAgICB2YXIgZ2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHMsIGhhc01lbWJlcnM7XG4gICAgICAgICAgaWYgKHZhbHVlID09IFwiJFwiKSB7XG4gICAgICAgICAgICAvLyBVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dC5cbiAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKChjaGFySW5kZXhCdWdneSA/IHZhbHVlLmNoYXJBdCgwKSA6IHZhbHVlWzBdKSA9PSBcIkBcIikge1xuICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHNlbnRpbmVsIGBAYCBjaGFyYWN0ZXIuXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBhcnNlIG9iamVjdCBhbmQgYXJyYXkgbGl0ZXJhbHMuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJbXCIpIHtcbiAgICAgICAgICAgICAgLy8gUGFyc2VzIGEgSlNPTiBhcnJheSwgcmV0dXJuaW5nIGEgbmV3IEphdmFTY3JpcHQgYXJyYXkuXG4gICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yICg7OyBoYXNNZW1iZXJzIHx8IChoYXNNZW1iZXJzID0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgIC8vIEEgY2xvc2luZyBzcXVhcmUgYnJhY2tldCBtYXJrcyB0aGUgZW5kIG9mIHRoZSBhcnJheSBsaXRlcmFsLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIl1cIikge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhcnJheSBsaXRlcmFsIGNvbnRhaW5zIGVsZW1lbnRzLCB0aGUgY3VycmVudCB0b2tlblxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBhIGNvbW1hIHNlcGFyYXRpbmcgdGhlIHByZXZpb3VzIGVsZW1lbnQgZnJvbSB0aGVcbiAgICAgICAgICAgICAgICAvLyBuZXh0LlxuICAgICAgICAgICAgICAgIGlmIChoYXNNZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiXVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gVW5leHBlY3RlZCB0cmFpbGluZyBgLGAgaW4gYXJyYXkgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIGAsYCBtdXN0IHNlcGFyYXRlIGVhY2ggYXJyYXkgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRWxpc2lvbnMgYW5kIGxlYWRpbmcgY29tbWFzIGFyZSBub3QgcGVybWl0dGVkLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGdldCh2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBcIntcIikge1xuICAgICAgICAgICAgICAvLyBQYXJzZXMgYSBKU09OIG9iamVjdCwgcmV0dXJuaW5nIGEgbmV3IEphdmFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAgICAgICByZXN1bHRzID0ge307XG4gICAgICAgICAgICAgIGZvciAoOzsgaGFzTWVtYmVycyB8fCAoaGFzTWVtYmVycyA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAvLyBBIGNsb3NpbmcgY3VybHkgYnJhY2UgbWFya3MgdGhlIGVuZCBvZiB0aGUgb2JqZWN0IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBsaXRlcmFsIGNvbnRhaW5zIG1lbWJlcnMsIHRoZSBjdXJyZW50IHRva2VuXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGEgY29tbWEgc2VwYXJhdG9yLlxuICAgICAgICAgICAgICAgIGlmIChoYXNNZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gVW5leHBlY3RlZCB0cmFpbGluZyBgLGAgaW4gb2JqZWN0IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBgLGAgbXVzdCBzZXBhcmF0ZSBlYWNoIG9iamVjdCBtZW1iZXIuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgY29tbWFzIGFyZSBub3QgcGVybWl0dGVkLCBvYmplY3QgcHJvcGVydHkgbmFtZXMgbXVzdCBiZVxuICAgICAgICAgICAgICAgIC8vIGRvdWJsZS1xdW90ZWQgc3RyaW5ncywgYW5kIGEgYDpgIG11c3Qgc2VwYXJhdGUgZWFjaCBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIC8vIG5hbWUgYW5kIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIiB8fCB0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIiB8fCAoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5jaGFyQXQoMCkgOiB2YWx1ZVswXSkgIT0gXCJAXCIgfHwgbGV4KCkgIT0gXCI6XCIpIHtcbiAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdHNbdmFsdWUuc2xpY2UoMSldID0gZ2V0KGxleCgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdG9rZW4gZW5jb3VudGVyZWQuXG4gICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFVwZGF0ZXMgYSB0cmF2ZXJzZWQgb2JqZWN0IG1lbWJlci5cbiAgICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gd2Fsayhzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjayk7XG4gICAgICAgICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmKSB7XG4gICAgICAgICAgICBkZWxldGUgc291cmNlW3Byb3BlcnR5XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc291cmNlW3Byb3BlcnR5XSA9IGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSB0cmF2ZXJzZXMgYSBwYXJzZWQgSlNPTiBvYmplY3QsIGludm9raW5nIHRoZVxuICAgICAgICAvLyBgY2FsbGJhY2tgIGZ1bmN0aW9uIGZvciBlYWNoIHZhbHVlLiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICAgICAgICAvLyBgV2Fsayhob2xkZXIsIG5hbWUpYCBvcGVyYXRpb24gZGVmaW5lZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS4xMi4yLlxuICAgICAgICB2YXIgd2FsayA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eV0sIGxlbmd0aDtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGBmb3JFYWNoYCBjYW4ndCBiZSB1c2VkIHRvIHRyYXZlcnNlIGFuIGFycmF5IGluIE9wZXJhIDw9IDguNTRcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgaXRzIGBPYmplY3QjaGFzT3duUHJvcGVydHlgIGltcGxlbWVudGF0aW9uIHJldHVybnMgYGZhbHNlYFxuICAgICAgICAgICAgLy8gZm9yIGFycmF5IGluZGljZXMgKGUuZy4sIGAhWzEsIDIsIDNdLmhhc093blByb3BlcnR5KFwiMFwiKWApLlxuICAgICAgICAgICAgaWYgKGdldENsYXNzLmNhbGwodmFsdWUpID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgZm9yIChsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGxlbmd0aC0tOykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSh2YWx1ZSwgbGVuZ3RoLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSh2YWx1ZSwgcHJvcGVydHksIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHNvdXJjZSwgcHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQdWJsaWM6IGBKU09OLnBhcnNlYC4gU2VlIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjIuXG4gICAgICAgIGV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc291cmNlLCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciByZXN1bHQsIHZhbHVlO1xuICAgICAgICAgIEluZGV4ID0gMDtcbiAgICAgICAgICBTb3VyY2UgPSBcIlwiICsgc291cmNlO1xuICAgICAgICAgIHJlc3VsdCA9IGdldChsZXgoKSk7XG4gICAgICAgICAgLy8gSWYgYSBKU09OIHN0cmluZyBjb250YWlucyBtdWx0aXBsZSB0b2tlbnMsIGl0IGlzIGludmFsaWQuXG4gICAgICAgICAgaWYgKGxleCgpICE9IFwiJFwiKSB7XG4gICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXNldCB0aGUgcGFyc2VyIHN0YXRlLlxuICAgICAgICAgIEluZGV4ID0gU291cmNlID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sgJiYgZ2V0Q2xhc3MuY2FsbChjYWxsYmFjaykgPT0gZnVuY3Rpb25DbGFzcyA/IHdhbGsoKHZhbHVlID0ge30sIHZhbHVlW1wiXCJdID0gcmVzdWx0LCB2YWx1ZSksIFwiXCIsIGNhbGxiYWNrKSA6IHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnRzW1wicnVuSW5Db250ZXh0XCJdID0gcnVuSW5Db250ZXh0O1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9XG5cbiAgaWYgKGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgIWlzTG9hZGVyKSB7XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBlbnZpcm9ubWVudHMuXG4gICAgcnVuSW5Db250ZXh0KHJvb3QsIGV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIC8vIEV4cG9ydCBmb3Igd2ViIGJyb3dzZXJzIGFuZCBKYXZhU2NyaXB0IGVuZ2luZXMuXG4gICAgdmFyIG5hdGl2ZUpTT04gPSByb290LkpTT047XG4gICAgdmFyIEpTT04zID0gcnVuSW5Db250ZXh0KHJvb3QsIChyb290W1wiSlNPTjNcIl0gPSB7XG4gICAgICAvLyBQdWJsaWM6IFJlc3RvcmVzIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgZ2xvYmFsIGBKU09OYCBvYmplY3QgYW5kXG4gICAgICAvLyByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBgSlNPTjNgIG9iamVjdC5cbiAgICAgIFwibm9Db25mbGljdFwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJvb3QuSlNPTiA9IG5hdGl2ZUpTT047XG4gICAgICAgIHJldHVybiBKU09OMztcbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICByb290LkpTT04gPSB7XG4gICAgICBcInBhcnNlXCI6IEpTT04zLnBhcnNlLFxuICAgICAgXCJzdHJpbmdpZnlcIjogSlNPTjMuc3RyaW5naWZ5XG4gICAgfTtcbiAgfVxufShjb21tb25qc0dsb2JhbCkpO1xufSk7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBNYWtlIHN1cmUgYE9iamVjdC5rZXlzYCB3b3JrIGZvciBgdW5kZWZpbmVkYFxuICogdmFsdWVzIHRoYXQgYXJlIHN0aWxsIHRoZXJlLCBsaWtlIGBkb2N1bWVudC5hbGxgLlxuICogaHR0cDovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvcHVibGljLWh0bWwvMjAwOUp1bi8wNTQ2Lmh0bWxcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBvYmplY3RLZXlzJDEodmFsKXtcbiAgaWYgKE9iamVjdC5rZXlzKSB7IHJldHVybiBPYmplY3Qua2V5cyh2YWwpOyB9XG4gIHJldHVybiBvYmplY3RLZXlzKHZhbCk7XG59XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxudmFyIHV0aWxJbnNwZWN0ID0gaW5zcGVjdDtcblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqIEBsaWNlbnNlIE1JVCAowqkgSm95ZW50KVxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSB7IGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTsgfVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSB7IGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107IH1cbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIF9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIHsgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTsgfVxuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgeyBjdHguZGVwdGggPSAyOyB9XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgeyBjdHguY29sb3JzID0gZmFsc2U7IH1cbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgeyBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7IH1cbiAgaWYgKGN0eC5jb2xvcnMpIHsgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yOyB9XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24kMShhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGFzT3duJDQob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgZm9yZWFjaChhcnJheSwgZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093biQ0KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGZvcmVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uJDEodmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzJDEodmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4gJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChpbmRleG9mKGtleXMsICdtZXNzYWdlJykgPj0gMCB8fCBpbmRleG9mKGtleXMsICdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24kMSh2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uJDEodmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBhcnJheU1hcChrZXlzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCBkZXNjO1xuICB9XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd24kNCh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoaW5kZXhvZihjdHguc2VlbiwgZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gYXJyYXlNYXAoc3RyLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIGFycmF5TWFwKHN0ci5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IGpzb24zLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHsgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7IH1cbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIGpzb24zLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICB7IHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7IH1cbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgeyByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTsgfVxuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHsgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTsgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbGVuZ3RoID0gYXJyYXlSZWR1Y2Uob3V0cHV0LCBmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIDtcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZChvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSB7IHJldHVybiBvcmlnaW47IH1cblxuICB2YXIga2V5cyA9IG9iamVjdEtleXMkMShhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59XG5cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCQxIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwJDEgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyQ0ICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duJDUgKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0cmluZyBjb250YWluaW5nIHN0YXRpYyBrZXlzIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyAobW9kdWxlcykge1xuICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGtleXMsIG0pIHtcbiAgICByZXR1cm4ga2V5cy5jb25jYXQobS5zdGF0aWNLZXlzIHx8IFtdKVxuICB9LCBbXSkuam9pbignLCcpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QkMShhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0JDEoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlciA9IGZhbHNlO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCQxKHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duJDUodmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093biQ1KHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093biQ1KHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiwgdXBkYXRlOiBkZWYgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24kNShwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24kNShhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093biQ1KGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duJDUoYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24kNShwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24kNShwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24kNShwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QkMShkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4kMShleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyBleHBlY3RlZFZhbHVlO1xuICB9XG4gIG1lc3NhZ2UgKz0gXCIsIGdvdCBcIiArIHJlY2VpdmVkVHlwZSArIFwiIFwiO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIndpdGggdmFsdWUgXCIgKyByZWNlaXZlZFZhbHVlICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICB2YXIgZXhwbGljaXRUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW07IH0pXG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbiQxICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG59IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuICAvLyBUZWNoaW5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0JDEodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMkMSA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzJDEgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhcyQxW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzJDFbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXMkMVtpZF0gPT0gbnVsbCkge1xuICAgIGhhcyQxW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMSA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQxOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QkMSh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24kNShhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093biQ1KGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093biQ1KGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duJDUobWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093biQ1KHByb3BzLCBrZXkpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBkYXRhIGdldHRlcnNcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIHJldHVybiBkYXRhLmNhbGwodm0sIHZtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgIHJldHVybiB7fVxuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG4gIHZhciBpc1NTUiA9IGlzU2VydmVyUmVuZGVyaW5nKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YS5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMucHJvcHMgJiYga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duJDUocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24kNShzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB1aWQkMiA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDIrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgaWYgKEN0b3Iuc3VwZXIpIHtcbiAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9uc1xuICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgbW9kaWZpZWQ7XG4gIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCQxKHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdCQxKGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgbm9kZXMgPSBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QkMSh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWljYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZyQ0O1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duJDUocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QkMShDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QkMShkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdCQxKGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1ZXMgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdCQxKGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdCQxKHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybiBpc1JlZ0V4cCQxKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZikge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZikgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKCFvbGRWbm9kZS5kYXRhLmF0dHJzICYmICF2bm9kZS5kYXRhLmF0dHJzKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoYXR0cnMuX19vYl9fKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChhdHRyc1trZXldID09IG51bGwpIHtcbiAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0JDEodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgICFkYXRhLnN0YXRpY0NsYXNzICYmXG4gICAgIWRhdGEuY2xhc3MgJiZcbiAgICAoIW9sZERhdGEgfHwgKCFvbGREYXRhLnN0YXRpY0NsYXNzICYmICFvbGREYXRhLmNsYXNzKSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBjbGFzc18gPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gYWRkJDEoZXZlbnQsIGhhbmRsZXIsIG9uY2UsIGNhcHR1cmUpIHtcbiAgaWYgKGNhcHR1cmUpIHtcbiAgICBjb25zb2xlLmxvZygnYnViYmxlIHBoYXNlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAob25jZSkge1xuICAgIHZhciBvbGRIYW5kbGVyID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciByZXMgPSBvbGRIYW5kbGVyLmNhbGwuYXBwbHkob2xkSGFuZGxlciwgWyBudWxsIF0uY29uY2F0KCBhcmdzICkpO1xuICAgICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgICByZW1vdmUkMihldmVudCwgbnVsbCwgbnVsbCwgdGFyZ2V0JDEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KSB7XG4gIGlmICggX3RhcmdldCA9PT0gdm9pZCAwICkgX3RhcmdldCA9IHRhcmdldCQxO1xuXG4gIF90YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKCFvbGRWbm9kZS5kYXRhLm9uICYmICF2bm9kZS5kYXRhLm9uKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgdm5vZGUuY29udGV4dCk7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChjYW1lbGl6ZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlKG9sZFZub2RlLCB2bm9kZSkge1xuICAvLyBjb25zb2xlLmxvZyhgXFx0XFx0ID09PT4gY3JlYXRlU3R5bGUoJHtvbGRWbm9kZX0sICR7dm5vZGV9KWApXG4gIGlmICghdm5vZGUuZGF0YS5zdGF0aWNTdHlsZSkge1xuICAgIHVwZGF0ZVN0eWxlKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIHN0YXRpY1N0eWxlID0gdm5vZGUuZGF0YS5zdGF0aWNTdHlsZTtcbiAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNTdHlsZSkge1xuICAgIGlmIChzdGF0aWNTdHlsZVtuYW1lXSkge1xuICAgICAgZWxtLnNldFN0eWxlKG5vcm1hbGl6ZShuYW1lKSwgc3RhdGljU3R5bGVbbmFtZV0pO1xuICAgIH1cbiAgfVxuICB1cGRhdGVTdHlsZShvbGRWbm9kZSwgdm5vZGUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZShvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKCFvbGRWbm9kZS5kYXRhLnN0eWxlICYmICF2bm9kZS5kYXRhLnN0eWxlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0eWxlID0gb2xkVm5vZGUuZGF0YS5zdHlsZSB8fCB7fTtcbiAgdmFyIHN0eWxlID0gdm5vZGUuZGF0YS5zdHlsZSB8fCB7fTtcblxuICB2YXIgbmVlZENsb25lID0gc3R5bGUuX19vYl9fO1xuXG4gIC8vIGhhbmRsZSBhcnJheSBzeW50YXhcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgc3R5bGUgPSB2bm9kZS5kYXRhLnN0eWxlID0gdG9PYmplY3QkMShzdHlsZSk7XG4gIH1cblxuICAvLyBjbG9uZSB0aGUgc3R5bGUgZm9yIGZ1dHVyZSB1cGRhdGVzLFxuICAvLyBpbiBjYXNlIHRoZSB1c2VyIG11dGF0ZXMgdGhlIHN0eWxlIG9iamVjdCBpbi1wbGFjZS5cbiAgaWYgKG5lZWRDbG9uZSkge1xuICAgIHN0eWxlID0gdm5vZGUuZGF0YS5zdHlsZSA9IGV4dGVuZCh7fSwgc3R5bGUpO1xuICB9XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKCFzdHlsZVtuYW1lXSkge1xuICAgICAgZWxtLnNldFN0eWxlKG5vcm1hbGl6ZShuYW1lKSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICBjdXIgPSBzdHlsZVtuYW1lXTtcbiAgICBlbG0uc2V0U3R5bGUobm9ybWFsaXplKG5hbWUpLCBjdXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvT2JqZWN0JDEoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiBjcmVhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZikge1xuICBpZiAoIWRlZikge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZi5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkgO1xuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIDtcbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIGVudGVyKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzcyA/IGFwcGVhckNsYXNzIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID1cbiAgICBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzcyA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXIgPyBiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyB0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nXG4gICAgICA/IGFwcGVhclxuICAgICAgOiBlbnRlclxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyID8gYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlciA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QkMShkdXJhdGlvbikgPyBkdXJhdGlvbi5lbnRlciA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlO1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSAoZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPVxuICAgICAgICBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKFxuICAgICAgICBwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlO1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdCQxKGR1cmF0aW9uKSA/IGR1cmF0aW9uLmxlYXZlIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IChlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbihlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVtcbiAgICAgICAgdm5vZGUua2V5XG4gICAgICBdID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24odmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpID8gaW52b2tlckZuc1swXSA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW2F0dHJzLCBjbGFzc18sIGV2ZW50cywgc3R5bGUsIHRyYW5zaXRpb25dO1xuXG52YXIgYWN0aW9uQmFyID0ge1xuICB0ZW1wbGF0ZTogXCJcXG4gICAgPE5hdGl2ZUFjdGlvbkJhciB+YWN0aW9uQmFyIHYtYmluZD1cXFwiJGF0dHJzXFxcIiB2LW9uPVxcXCIkbGlzdGVuZXJzXFxcIj5cXG4gICAgICA8c2xvdCAvPlxcbiAgICA8L05hdGl2ZUFjdGlvbkJhcj5cXG4gIFwiXG59O1xuXG52YXIgYW5kcm9pZCA9IHtcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCwgcmVmKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgaWYgKHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm0nKS5pc0FuZHJvaWQpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlblxuICAgIH1cbiAgfVxufTtcblxudmFyIGZyYW1lcyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gc2V0RnJhbWUoaWQsIGZyYW1lKSB7XG4gIHJldHVybiBmcmFtZXMuc2V0KGlkLCBmcmFtZSlcbn1cblxuZnVuY3Rpb24gZ2V0RnJhbWUoaWQpIHtcbiAgcmV0dXJuIGZyYW1lcy5nZXQoaWQpXG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUZyYW1lKGlkKSB7XG4gIHJldHVybiBmcmFtZXMuZGVsZXRlKGlkKVxufVxuXG52YXIgaG1yQ2hlY2tpbmcgPSBmYWxzZTtcblxudmFyIGlzSE1SQ2hlY2tpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBobXJDaGVja2luZ1xufTtcblxudmFyIHJlc2V0SE1SQ2hlY2tpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGhtckNoZWNraW5nID0gZmFsc2U7XG59O1xuXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFkZFN0YXR1c0hhbmRsZXIoZnVuY3Rpb24gKHN0YXR1cykge1xuICAgIGlmIChzdGF0dXMgPT09ICdjaGVjaycpIHtcbiAgICAgIGhtckNoZWNraW5nID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgaWRDb3VudGVyID0gMTtcblxudmFyIGZyYW1lID0ge1xuICBwcm9wczoge1xuICAgIGlkOiB7XG4gICAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgICB9LFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICAnaW9zOnRyYW5zaXRpb24nOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgJ2FuZHJvaWQ6dHJhbnNpdGlvbic6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICAvLyBpbmplY3RlZCBieSB0aGUgdGVtcGxhdGUgY29tcGlsZXJcbiAgICBoYXNSb3V0ZXJWaWV3OiB7XG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvcGVydGllczoge31cbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcblxuICAgIGlmIChnZXRGcmFtZSh0aGlzLiRwcm9wcy5pZCkpIHtcbiAgICAgIHByb3BlcnRpZXMuaWQgPSB0aGlzLiRwcm9wcy5pZCArIGlkQ291bnRlcisrO1xuICAgIH1cblxuICAgIHRoaXMucHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuJGF0dHJzLCB0aGlzLiRwcm9wcywgcHJvcGVydGllcyk7XG5cbiAgICBzZXRGcmFtZSh0aGlzLnByb3BlcnRpZXMuaWQsIHRoaXMpO1xuICB9LFxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCgpIHtcbiAgICBkZWxldGVGcmFtZSh0aGlzLnByb3BlcnRpZXMuaWQpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlRnJhbWUnLFxuICAgICAge1xuICAgICAgICBhdHRyczogdGhpcy5wcm9wZXJ0aWVzLFxuICAgICAgICBvbjogdGhpcy4kbGlzdGVuZXJzXG4gICAgICB9LFxuICAgICAgdGhpcy4kc2xvdHMuZGVmYXVsdFxuICAgIClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIF9nZXRGcmFtZTogZnVuY3Rpb24gX2dldEZyYW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLm5hdGl2ZVZpZXdcbiAgICB9LFxuXG4gICAgX2Vuc3VyZVRyYW5zaXRpb25PYmplY3Q6IGZ1bmN0aW9uIF9lbnN1cmVUcmFuc2l0aW9uT2JqZWN0KHRyYW5zaXRpb24pIHtcbiAgICAgIGlmICh0eXBlb2YgdHJhbnNpdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHsgbmFtZTogdHJhbnNpdGlvbiB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblxuICAgIH0sXG5cbiAgICBfY29tcG9zZVRyYW5zaXRpb246IGZ1bmN0aW9uIF9jb21wb3NlVHJhbnNpdGlvbihlbnRyeSkge1xuICAgICAgdmFyIGlzQW5kcm9pZCA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm0nKS5pc0FuZHJvaWQ7XG4gICAgICB2YXIgcGxhdGZvcm1FbnRyeVByb3AgPSBcInRyYW5zaXRpb25cIiArIChpc0FuZHJvaWQgPyAnQW5kcm9pZCcgOiAnaU9TJyk7XG4gICAgICB2YXIgZW50cnlQcm9wID0gZW50cnlbcGxhdGZvcm1FbnRyeVByb3BdXG4gICAgICAgID8gcGxhdGZvcm1FbnRyeVByb3BcbiAgICAgICAgOiAndHJhbnNpdGlvbic7XG4gICAgICB2YXIgcGxhdGZvcm1Qcm9wID0gKGlzQW5kcm9pZCA/ICdhbmRyb2lkJyA6ICdpb3MnKSArIFwiOnRyYW5zaXRpb25cIjtcbiAgICAgIHZhciBwcm9wID0gdGhpc1twbGF0Zm9ybVByb3BdID8gcGxhdGZvcm1Qcm9wIDogJ3RyYW5zaXRpb24nO1xuXG4gICAgICBpZiAoZW50cnlbZW50cnlQcm9wXSkge1xuICAgICAgICBlbnRyeVtlbnRyeVByb3BdID0gdGhpcy5fZW5zdXJlVHJhbnNpdGlvbk9iamVjdChlbnRyeVtlbnRyeVByb3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpc1twcm9wXSkge1xuICAgICAgICBlbnRyeVtlbnRyeVByb3BdID0gdGhpcy5fZW5zdXJlVHJhbnNpdGlvbk9iamVjdCh0aGlzW3Byb3BdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVudHJ5XG4gICAgfSxcblxuICAgIG5vdGlmeVBhZ2VNb3VudGVkOiBmdW5jdGlvbiBub3RpZnlQYWdlTW91bnRlZChwYWdlVm0pIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYWdlVm0uJGVsLm5hdGl2ZVZpZXc7IH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzSE1SQ2hlY2tpbmcoKSkge1xuICAgICAgICAgIHRoaXMkMS5yZXBsYWNlKG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMkMS5uYXZpZ2F0ZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlcGxhY2U6IGZ1bmN0aW9uIHJlcGxhY2UoZW50cnkpIHtcbiAgICAgIHZhciBmcmFtZSA9IHRoaXMuX2dldEZyYW1lKCk7XG4gICAgICB2YXIgcGFnZSA9IGVudHJ5LmNyZWF0ZSgpO1xuICAgICAgZW50cnkuY3JlYXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFnZTsgfTtcblxuICAgICAgdmFyIGJhY2tzdGFja0VudHJ5ID0ge1xuICAgICAgICBlbnRyeTogZW50cnksXG4gICAgICAgIHJlc29sdmVkUGFnZTogcGFnZSxcbiAgICAgICAgbmF2RGVwdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgZnJhZ21lbnRUYWc6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIC8vIFRPRE86IHRoaXMgc2hvdWxkIGJlIGluIGEgc3BlY2lmaWMgTlMgRnJhbWUgbWV0aG9kXG4gICAgICBpZiAocmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy9wbGF0Zm9ybScpLmlzSU9TKSB7XG4gICAgICAgIHZhciB2aWV3Q29udHJvbGxlciA9IGJhY2tzdGFja0VudHJ5LnJlc29sdmVkUGFnZS5pb3M7XG4gICAgICAgIGlmICghdmlld0NvbnRyb2xsZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnUmVxdWlyZWQgcGFnZSBkb2VzIG5vdCBoYXZlIGEgdmlld0NvbnRyb2xsZXIgY3JlYXRlZC4nXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHZpZXdDb250cm9sbGVyWydfdHJhbnNpdGlvbiddID0geyBuYW1lOiAnbm9uLWFuaW1hdGVkJyB9O1xuICAgICAgICB2aWV3Q29udHJvbGxlclsnX2RlbGVnYXRlJ10gPSBudWxsO1xuICAgICAgICBmcmFtZS5faW9zLmNvbnRyb2xsZXIuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICB2aWV3Q29udHJvbGxlclsnX2VudHJ5J10gPSBiYWNrc3RhY2tFbnRyeTtcblxuICAgICAgICBpZiAocmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91dGlscy91dGlscycpLmlvcy5NYWpvclZlcnNpb24gPiAxMCkge1xuICAgICAgICAgIC8vIFJlc2V0IGJhY2sgYnV0dG9uIHRpdGxlIGJlZm9yZSBwdXNoaW5nIHZpZXcgY29udHJvbGxlciB0byBwcmV2ZW50XG4gICAgICAgICAgLy8gZGlzcGxheWluZyBkZWZhdWx0ICdiYWNrJyB0aXRsZSAod2hlbiBOYXZpZ2F0aW9uQnV0dG9uIGN1c3RvbSB0aXRsZSBpcyBzZXQpLlxuICAgICAgICAgIHZhciBiYXJCdXR0b25JdGVtID0gVUlCYXJCdXR0b25JdGVtLmFsbG9jKCkuaW5pdFdpdGhUaXRsZVN0eWxlVGFyZ2V0QWN0aW9uKFxuICAgICAgICAgICAgJycsXG4gICAgICAgICAgICBVSUJhckJ1dHRvbkl0ZW1TdHlsZS5QbGFpbixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2aWV3Q29udHJvbGxlci5uYXZpZ2F0aW9uSXRlbS5iYWNrQmFyQnV0dG9uSXRlbSA9IGJhckJ1dHRvbkl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV3Q29udHJvbGxlcnMgPSBOU011dGFibGVBcnJheS5hbGxvYygpLmluaXRXaXRoQXJyYXkoXG4gICAgICAgICAgZnJhbWUuX2lvcy5jb250cm9sbGVyLnZpZXdDb250cm9sbGVyc1xuICAgICAgICApO1xuICAgICAgICBpZiAobmV3Q29udHJvbGxlcnMuY291bnQgPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIGNvbnRyb2xsZXJzIGNvdW50LicpXG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgY29kZSBiZWxvdyBmaXhlcyBhIHBoYW50b20gYW5pbWF0aW9uIHRoYXQgYXBwZWFycyBvbiB0aGUgQmFjayBidXR0b24gaW4gdGhpcyBjYXNlXG4gICAgICAgIHZpZXdDb250cm9sbGVyLm5hdmlnYXRpb25JdGVtLmhpZGVzQmFja0J1dHRvbiA9XG4gICAgICAgICAgZnJhbWUuYmFja1N0YWNrLmxlbmd0aCA9PT0gMDtcblxuICAgICAgICAvLyBzd2FwIHRoZSB0b3AgZW50cnkgd2l0aCB0aGUgbmV3IG9uZVxuICAgICAgICB2YXIgc2tpcHBlZE5hdkNvbnRyb2xsZXIgPSBuZXdDb250cm9sbGVycy5sYXN0T2JqZWN0O1xuICAgICAgICBza2lwcGVkTmF2Q29udHJvbGxlci5pc0JhY2tzdGFja1NraXBwZWQgPSB0cnVlO1xuICAgICAgICBuZXdDb250cm9sbGVycy5yZW1vdmVMYXN0T2JqZWN0KCk7XG4gICAgICAgIG5ld0NvbnRyb2xsZXJzLmFkZE9iamVjdCh2aWV3Q29udHJvbGxlcik7XG5cbiAgICAgICAgLy8gcmVwbGFjZSB0aGUgY29udHJvbGxlcnMgaW5zdGVhZCBvZiBwdXNoaW5nIGRpcmVjdGx5XG4gICAgICAgIGZyYW1lLl9pb3MuY29udHJvbGxlci5zZXRWaWV3Q29udHJvbGxlcnNBbmltYXRlZChuZXdDb250cm9sbGVycywgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGZyYW1lSWQgPSBmcmFtZS5fYW5kcm9pZC5mcmFtZUlkO1xuICAgICAgICBmcmFtZS5faXNCYWNrID0gZmFsc2U7XG4gICAgICAgIGJhY2tzdGFja0VudHJ5LmZyYW1lSWQgPSBmcmFtZUlkO1xuXG4gICAgICAgIHZhciBtYW5hZ2VyID0gZnJhbWUuX2dldEZyYWdtZW50TWFuYWdlcigpO1xuICAgICAgICB2YXIgY3VycmVudEVudHJ5ID0gZnJhbWUuX2N1cnJlbnRFbnRyeTtcblxuICAgICAgICB2YXIgbmV3RnJhZ21lbnRUYWcgPSBcImZyYWdtZW50XCIgKyBmcmFtZUlkICsgXCJbLTFdXCI7XG4gICAgICAgIHZhciBuZXdGcmFnbWVudCA9IGZyYW1lLmNyZWF0ZUZyYWdtZW50KGJhY2tzdGFja0VudHJ5LCBuZXdGcmFnbWVudFRhZyk7XG4gICAgICAgIHZhciBhbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgbmF2aWdhdGlvblRyYW5zaXRpb24gPSBudWxsO1xuXG4gICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IG1hbmFnZXIuYmVnaW5UcmFuc2FjdGlvbigpO1xuICAgICAgICByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lL2ZyYWdtZW50LnRyYW5zaXRpb25zJykuX3NldEFuZHJvaWRGcmFnbWVudFRyYW5zaXRpb25zKFxuICAgICAgICAgIGFuaW1hdGVkLFxuICAgICAgICAgIG5hdmlnYXRpb25UcmFuc2l0aW9uLFxuICAgICAgICAgIGN1cnJlbnRFbnRyeSxcbiAgICAgICAgICBiYWNrc3RhY2tFbnRyeSxcbiAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICBmcmFtZUlkXG4gICAgICAgICk7XG4gICAgICAgIHRyYW5zYWN0aW9uLnJlbW92ZShjdXJyZW50RW50cnkuZnJhZ21lbnQpO1xuICAgICAgICB0cmFuc2FjdGlvbi5yZXBsYWNlKGZyYW1lLmNvbnRhaW5lclZpZXdJZCwgbmV3RnJhZ21lbnQsIG5ld0ZyYWdtZW50VGFnKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uY29tbWl0QWxsb3dpbmdTdGF0ZUxvc3MoKTtcbiAgICAgIH1cbiAgICAgIHJlc2V0SE1SQ2hlY2tpbmcoKTtcbiAgICB9LFxuXG4gICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKGVudHJ5LCBiYWNrKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgIGlmICggYmFjayA9PT0gdm9pZCAwICkgYmFjayA9IGZhbHNlO1xuXG4gICAgICB2YXIgZnJhbWUgPSB0aGlzLl9nZXRGcmFtZSgpO1xuXG4gICAgICBpZiAoYmFjaykge1xuICAgICAgICByZXR1cm4gZnJhbWUuZ29CYWNrKGVudHJ5KVxuICAgICAgfVxuXG4gICAgICAvLyByZXNvbHZlIHRoZSBwYWdlIGZyb20gdGhlIGVudHJ5IGFuZCBhdHRhY2ggYSBuYXZpZ2F0ZWRUbyBsaXN0ZW5lclxuICAgICAgLy8gdG8gZmlyZSB0aGUgZnJhbWUgZXZlbnRzXG4gICAgICB2YXIgcGFnZSA9IGVudHJ5LmNyZWF0ZSgpO1xuICAgICAgcGFnZS5vbmNlKCduYXZpZ2F0ZWRUbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcyQxLiRlbWl0KCduYXZpZ2F0ZWQnLCBlbnRyeSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICBpZiAoYXJncy5pc0JhY2tOYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgcGFnZS5vZmYoJ25hdmlnYXRlZEZyb20nLCBoYW5kbGVyKTtcblxuICAgICAgICAgIHRoaXMkMS4kZW1pdCgnbmF2aWdhdGVkQmFjaycsIGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHBhZ2Uub24oJ25hdmlnYXRlZEZyb20nLCBoYW5kbGVyKTtcblxuICAgICAgZW50cnkuY3JlYXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFnZTsgfTtcblxuICAgICAgdGhpcy5fY29tcG9zZVRyYW5zaXRpb24oZW50cnkpO1xuICAgICAgZnJhbWUubmF2aWdhdGUoZW50cnkpO1xuICAgIH0sXG5cbiAgICBiYWNrOiBmdW5jdGlvbiBiYWNrKGJhY2tzdGFja0VudHJ5KSB7XG4gICAgICBpZiAoIGJhY2tzdGFja0VudHJ5ID09PSB2b2lkIDAgKSBiYWNrc3RhY2tFbnRyeSA9IG51bGw7XG5cbiAgICAgIHRoaXMubmF2aWdhdGUoYmFja3N0YWNrRW50cnksIHRydWUpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGlvcyA9IHtcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCwgcmVmKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgaWYgKHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm0nKS5pc0lPUykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgfVxuICB9XG59O1xuXG52YXIgVlVFX1ZJRVcgPSAnX192dWVWTm9kZVJlZl9fJztcblxudmFyIHRpZCA9IDA7XG52YXIgdlRlbXBsYXRlID0ge1xuICBwcm9wczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG4gICAgaWY6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIGlmICghdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy4kdGVtcGxhdGVzID0gdGhpcy4kZWwucGFyZW50Tm9kZS4kdGVtcGxhdGVzID0gdGhpcy4kcGFyZW50LiR0ZW1wbGF0ZXMgPVxuICAgICAgdGhpcy4kcGFyZW50LiR0ZW1wbGF0ZXMgfHwgbmV3IFRlbXBsYXRlQmFnKCk7XG4gICAgdGhpcy4kdGVtcGxhdGVzLnJlZ2lzdGVyVGVtcGxhdGUoXG4gICAgICB0aGlzLiRwcm9wcy5uYW1lIHx8ICh0aGlzLiRwcm9wcy5pZiA/IChcInYtdGVtcGxhdGUtXCIgKyAodGlkKyspKSA6ICdkZWZhdWx0JyksXG4gICAgICB0aGlzLiRwcm9wcy5pZixcbiAgICAgIHRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHRcbiAgICApO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHt9XG59O1xuXG52YXIgVGVtcGxhdGVCYWcgPSBmdW5jdGlvbiBUZW1wbGF0ZUJhZygpIHtcbiAgdGhpcy5fdGVtcGxhdGVNYXAgPSBuZXcgTWFwKCk7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IHNlbGVjdG9yRm46IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLnJlZ2lzdGVyVGVtcGxhdGUgPSBmdW5jdGlvbiByZWdpc3RlclRlbXBsYXRlIChuYW1lLCBjb25kaXRpb24sIHNjb3BlZEZuKSB7XG4gIHRoaXMuX3RlbXBsYXRlTWFwLnNldChuYW1lLCB7XG4gICAgc2NvcGVkRm46IHNjb3BlZEZuLFxuICAgIGNvbmRpdGlvbkZuOiB0aGlzLmdldENvbmRpdGlvbkZuKGNvbmRpdGlvbiksXG4gICAga2V5ZWRUZW1wbGF0ZTogbmV3IFZ1ZUtleWVkVGVtcGxhdGUobmFtZSwgc2NvcGVkRm4pXG4gIH0pO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEuc2VsZWN0b3JGbi5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uIHRlbXBsYXRlU2VsZWN0b3JGbihpdGVtKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gc2VsZi5fdGVtcGxhdGVNYXAuZW50cmllcygpO1xuICAgIHZhciBjdXJyO1xuICAgIHdoaWxlICgoY3VyciA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gY3VyclswXTtcbiAgICAgICAgdmFyIGNvbmRpdGlvbkZuID0gY3VyclsxXS5jb25kaXRpb25GbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChjb25kaXRpb25GbihpdGVtKSkge1xuICAgICAgICAgIHJldHVybiBuYW1lXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICB9XG4gICAgcmV0dXJuICdkZWZhdWx0J1xuICB9XG59O1xuXG5UZW1wbGF0ZUJhZy5wcm90b3R5cGUuZ2V0Q29uZGl0aW9uRm4gPSBmdW5jdGlvbiBnZXRDb25kaXRpb25GbiAoY29uZGl0aW9uKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ2N0eCcsIChcIndpdGgoY3R4KSB7IHJldHVybiAhIShcIiArIGNvbmRpdGlvbiArIFwiKSB9XCIpKVxufTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLmdldEtleWVkVGVtcGxhdGUgPSBmdW5jdGlvbiBnZXRLZXllZFRlbXBsYXRlIChuYW1lKSB7XG4gIHJldHVybiB0aGlzLl90ZW1wbGF0ZU1hcC5nZXQobmFtZSkua2V5ZWRUZW1wbGF0ZVxufTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLnBhdGNoVGVtcGxhdGUgPSBmdW5jdGlvbiBwYXRjaFRlbXBsYXRlIChuYW1lLCBjb250ZXh0LCBvbGRWbm9kZSkge1xuICB2YXIgdm5vZGUgPSB0aGlzLl90ZW1wbGF0ZU1hcC5nZXQobmFtZSkuc2NvcGVkRm4oY29udGV4dCk7XG4gIC8vIGluIDIuNiBzY29wZWRGbiByZXR1cm5zIGFuIGFycmF5IVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2bm9kZSA9IHZub2RlWzBdO1xuICB9XG5cbiAgdmFyIG5hdGl2ZVZpZXcgPSBwYXRjaChvbGRWbm9kZSwgdm5vZGUpLm5hdGl2ZVZpZXc7XG4gIG5hdGl2ZVZpZXdbVlVFX1ZJRVddID0gdm5vZGU7XG5cbiAgcmV0dXJuIG5hdGl2ZVZpZXdcbn07XG5cblRlbXBsYXRlQmFnLnByb3RvdHlwZS5nZXRBdmFpbGFibGUgPSBmdW5jdGlvbiBnZXRBdmFpbGFibGUgKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl90ZW1wbGF0ZU1hcC5rZXlzKCkpXG59O1xuXG5UZW1wbGF0ZUJhZy5wcm90b3R5cGUuZ2V0S2V5ZWRUZW1wbGF0ZXMgPSBmdW5jdGlvbiBnZXRLZXllZFRlbXBsYXRlcyAoKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX3RlbXBsYXRlTWFwLnZhbHVlcygpKS5tYXAoXG4gICAgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIga2V5ZWRUZW1wbGF0ZSA9IHJlZi5rZXllZFRlbXBsYXRlO1xuXG4gICAgICAgIHJldHVybiBrZXllZFRlbXBsYXRlO1xuICAgIH1cbiAgKVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFRlbXBsYXRlQmFnLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxudmFyIFZ1ZUtleWVkVGVtcGxhdGUgPSBmdW5jdGlvbiBWdWVLZXllZFRlbXBsYXRlKGtleSwgc2NvcGVkRm4pIHtcbiAgdGhpcy5fa2V5ID0ga2V5O1xuICB0aGlzLl9zY29wZWRGbiA9IHNjb3BlZEZuO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxJDEgPSB7IGtleTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMSQxLmtleS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9rZXlcbn07XG5cblZ1ZUtleWVkVGVtcGxhdGUucHJvdG90eXBlLmNyZWF0ZVZpZXcgPSBmdW5jdGlvbiBjcmVhdGVWaWV3ICgpIHtcbiAgLy8gd2UgYXJlIHJldHVybmluZyBudWxsIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGUgZGF0YSBoZXJlXG4gIC8vIHRoZSB2aWV3IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGUgYHBhdGNoVGVtcGxhdGVgIG1ldGhvZCBhYm92ZS5cbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uYXRpdmVzY3JpcHQtdnVlL25hdGl2ZXNjcmlwdC12dWUvaXNzdWVzLzIyOSNpc3N1ZWNvbW1lbnQtMzkwMzMwNDc0XG4gIHJldHVybiBudWxsXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlS2V5ZWRUZW1wbGF0ZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxJDEgKTtcblxudmFyIGxpc3RWaWV3ID0ge1xuICBwcm9wczoge1xuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBbQXJyYXksIE9iamVjdF0sXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFyIE9ic2VydmFibGVBcnJheSA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlLWFycmF5JylcbiAgICAgICAgICAuT2JzZXJ2YWJsZUFycmF5O1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIE9ic2VydmFibGVBcnJheVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICAnK2FsaWFzJzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2l0ZW0nXG4gICAgfSxcbiAgICAnK2luZGV4Jzoge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfVxuICB9LFxuXG4gIHRlbXBsYXRlOiBcIlxcbiAgICA8TmF0aXZlTGlzdFZpZXdcXG4gICAgICByZWY9XFxcImxpc3RWaWV3XFxcIlxcbiAgICAgIDppdGVtcz1cXFwiaXRlbXNcXFwiXFxuICAgICAgdi1iaW5kPVxcXCIkYXR0cnNcXFwiXFxuICAgICAgdi1vbj1cXFwibGlzdGVuZXJzXFxcIlxcbiAgICAgIEBpdGVtVGFwPVxcXCJvbkl0ZW1UYXBcXFwiXFxuICAgICAgQGl0ZW1Mb2FkaW5nPVxcXCJvbkl0ZW1Mb2FkaW5nXFxcIlxcbiAgICA+XFxuICAgICAgPHNsb3QgLz5cXG4gICAgPC9OYXRpdmVMaXN0Vmlldz5cXG4gIFwiLFxuXG4gIHdhdGNoOiB7XG4gICAgaXRlbXM6IHtcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIobmV3VmFsKSB7XG4gICAgICAgIHRoaXMuJHJlZnMubGlzdFZpZXcuc2V0QXR0cmlidXRlKCdpdGVtcycsIG5ld1ZhbCk7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgfSxcbiAgICAgIGRlZXA6IHRydWVcbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgaXRlbVRhcCBoYW5kbGVyIGZyb20gYSBjbG9uZSBvZiB0aGUgJGxpc3RlbmVyc1xuICAgIC8vIG9iamVjdCBiZWNhdXNlIHdlIGFyZSBlbWl0dGluZyB0aGUgZXZlbnQgb3Vyc2VsdmVzIHdpdGggYWRkZWQgZGF0YS5cbiAgICB2YXIgbGlzdGVuZXJzID0gZXh0ZW5kKHt9LCB0aGlzLiRsaXN0ZW5lcnMpO1xuICAgIGRlbGV0ZSBsaXN0ZW5lcnMuaXRlbVRhcDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVycztcblxuICAgIHRoaXMuZ2V0SXRlbUNvbnRleHQgPSBnZXRJdGVtQ29udGV4dC5iaW5kKHRoaXMpO1xuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuJHRlbXBsYXRlcykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy4kcmVmcy5saXN0Vmlldy5zZXRBdHRyaWJ1dGUoXG4gICAgICAnX2l0ZW1UZW1wbGF0ZXNJbnRlcm5hbCcsXG4gICAgICB0aGlzLiR0ZW1wbGF0ZXMuZ2V0S2V5ZWRUZW1wbGF0ZXMoKVxuICAgICk7XG4gICAgdGhpcy4kcmVmcy5saXN0Vmlldy5zZXRBdHRyaWJ1dGUoJ19pdGVtVGVtcGxhdGVTZWxlY3RvcicsIGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMkMS4kdGVtcGxhdGVzLnNlbGVjdG9yRm4odGhpcyQxLmdldEl0ZW1Db250ZXh0KGl0ZW0sIGluZGV4KSlcbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgb25JdGVtVGFwOiBmdW5jdGlvbiBvbkl0ZW1UYXAoYXJncykge1xuICAgICAgdGhpcy4kZW1pdCgnaXRlbVRhcCcsIGV4dGVuZCh7IGl0ZW06IHRoaXMuZ2V0SXRlbShhcmdzLmluZGV4KSB9LCBhcmdzKSk7XG4gICAgfSxcbiAgICBvbkl0ZW1Mb2FkaW5nOiBmdW5jdGlvbiBvbkl0ZW1Mb2FkaW5nKGFyZ3MpIHtcbiAgICAgIGlmICghdGhpcy4kdGVtcGxhdGVzKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSBhcmdzLmluZGV4O1xuICAgICAgdmFyIGl0ZW1zID0gYXJncy5vYmplY3QuaXRlbXM7XG5cbiAgICAgIHZhciBjdXJyZW50SXRlbSA9IHRoaXMuZ2V0SXRlbShpbmRleCk7XG5cbiAgICAgIHZhciBuYW1lID0gYXJncy5vYmplY3QuX2l0ZW1UZW1wbGF0ZVNlbGVjdG9yKGN1cnJlbnRJdGVtLCBpbmRleCwgaXRlbXMpO1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldEl0ZW1Db250ZXh0KGN1cnJlbnRJdGVtLCBpbmRleCk7XG4gICAgICB2YXIgb2xkVm5vZGUgPSBhcmdzLnZpZXcgJiYgYXJncy52aWV3W1ZVRV9WSUVXXTtcblxuICAgICAgYXJncy52aWV3ID0gdGhpcy4kdGVtcGxhdGVzLnBhdGNoVGVtcGxhdGUobmFtZSwgY29udGV4dCwgb2xkVm5vZGUpO1xuICAgIH0sXG4gICAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHRoaXMuJHJlZnMubGlzdFZpZXcubmF0aXZlVmlldy5yZWZyZXNoKCk7XG4gICAgfSxcbiAgICBnZXRJdGVtOiBmdW5jdGlvbiBnZXRJdGVtKGlkeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLml0ZW1zLmdldEl0ZW0gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB0aGlzLml0ZW1zLmdldEl0ZW0oaWR4KVxuICAgICAgICA6IHRoaXMuaXRlbXNbaWR4XVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0SXRlbUNvbnRleHQoXG4gIGl0ZW0sXG4gIGluZGV4LFxuICBhbGlhcyxcbiAgaW5kZXhfYWxpYXNcbikge1xuICB2YXIgb2JqO1xuXG4gIGlmICggYWxpYXMgPT09IHZvaWQgMCApIGFsaWFzID0gdGhpcy4kcHJvcHNbJythbGlhcyddO1xuICBpZiAoIGluZGV4X2FsaWFzID09PSB2b2lkIDAgKSBpbmRleF9hbGlhcyA9IHRoaXMuJHByb3BzWycraW5kZXgnXTtcbiAgcmV0dXJuICggb2JqID0ge30sIG9ialthbGlhc10gPSBpdGVtLCBvYmpbaW5kZXhfYWxpYXMgfHwgJyRpbmRleCddID0gaW5kZXgsIG9iai4kZXZlbiA9IGluZGV4ICUgMiA9PT0gMCwgb2JqLiRvZGQgPSBpbmRleCAlIDIgIT09IDAsIG9iaiApXG59XG5cbmZ1bmN0aW9uIGdldEZyYW1lSW5zdGFuY2UoZnJhbWUpIHtcbiAgLy8gZ2V0IHRoZSBmcmFtZSB0aGF0IHdlIG5lZWQgdG8gbmF2aWdhdGVcbiAgLy8gdGhpcyBjYW4gYmUgYSBmcmFtZSBpZCAoU3RyaW5nKVxuICAvLyBhIFZ1ZSByZWYgdG8gYSBmcmFtZVxuICAvLyBhIEZyYW1lIFZpZXdOb2RlXG4gIC8vIG9yIGEgRnJhbWUgaW5zdGFuY2VcbiAgaWYgKGlzT2JqZWN0JDEoZnJhbWUpICYmIGlzRGVmKGZyYW1lLiRlbCkpIHtcbiAgICBmcmFtZSA9IGZyYW1lLiRlbC5uYXRpdmVWaWV3O1xuICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGZyYW1lKSkge1xuICAgIGZyYW1lID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9mcmFtZScpLmdldEZyYW1lQnlJZChmcmFtZSk7XG4gIH0gZWxzZSBpZiAoaXNEZWYoZnJhbWUubmF0aXZlVmlldykpIHtcbiAgICBmcmFtZSA9IGZyYW1lLm5hdGl2ZVZpZXc7XG4gIH1cbiAgLy8gZmluYWxseSBnZXQgdGhlIGNvbXBvbmVudCBpbnN0YW5jZSBmb3IgdGhpcyBmcmFtZVxuICByZXR1cm4gZ2V0RnJhbWUoZnJhbWUuaWQpXG59XG5cbmZ1bmN0aW9uIGZpbmRQYXJlbnROYXZpZ2F0aW9uRW50cnkodm0pIHtcbiAgaWYgKCF2bSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIGVudHJ5ID0gdm0uJHBhcmVudDtcbiAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LiRvcHRpb25zLm5hbWUgIT09ICdOYXZpZ2F0aW9uRW50cnknKSB7XG4gICAgZW50cnkgPSBlbnRyeS4kcGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5XG59XG5cbnZhciBOYXZpZ2F0b3JQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgVnVlLnByb3RvdHlwZS4kbmF2aWdhdGVCYWNrID0gZnVuY3Rpb24ob3B0aW9ucywgYmFja3N0YWNrRW50cnkpIHtcbiAgICAgIGlmICggYmFja3N0YWNrRW50cnkgPT09IHZvaWQgMCApIGJhY2tzdGFja0VudHJ5ID0gbnVsbDtcblxuICAgICAgdmFyIG5hdkVudHJ5ID0gZmluZFBhcmVudE5hdmlnYXRpb25FbnRyeSh0aGlzKTtcbiAgICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgZnJhbWU6IG5hdkVudHJ5ID8gbmF2RW50cnkuJG9wdGlvbnMuZnJhbWUgOiAnZGVmYXVsdCdcbiAgICAgIH07XG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgdmFyIGZyYW1lID0gZ2V0RnJhbWVJbnN0YW5jZShvcHRpb25zLmZyYW1lKTtcblxuICAgICAgZnJhbWUuYmFjayhiYWNrc3RhY2tFbnRyeSk7XG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJG5hdmlnYXRlVG8gPSBmdW5jdGlvbihjb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgIGZyYW1lOiAnZGVmYXVsdCdcbiAgICAgIH07XG4gICAgICAvLyBidWlsZCBvcHRpb25zIG9iamVjdCB3aXRoIGRlZmF1bHRzXG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGZyYW1lID0gZ2V0RnJhbWVJbnN0YW5jZShvcHRpb25zLmZyYW1lKTtcbiAgICAgICAgdmFyIG5hdkVudHJ5SW5zdGFuY2UgPSBuZXcgVnVlKHtcbiAgICAgICAgICBuYW1lOiAnTmF2aWdhdGlvbkVudHJ5JyxcbiAgICAgICAgICBwYXJlbnQ6IHRoaXMkMS4kcm9vdCxcbiAgICAgICAgICBmcmFtZTogZnJhbWUsXG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGZyYW1lOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IGZyYW1lLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChoKSB7IHJldHVybiBoKGNvbXBvbmVudCwgeyBwcm9wczogb3B0aW9ucy5wcm9wcyB9KTsgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBhZ2UgPSBuYXZFbnRyeUluc3RhbmNlLiRtb3VudCgpLiRlbC5uYXRpdmVWaWV3O1xuXG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICBpZiAoYXJncy5pc0JhY2tOYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgICBwYWdlLm9mZignbmF2aWdhdGVkRnJvbScsIGhhbmRsZXIpO1xuICAgICAgICAgICAgbmF2RW50cnlJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcGFnZS5vbignbmF2aWdhdGVkRnJvbScsIGhhbmRsZXIpO1xuXG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBuYXZFbnRyeUluc3RhbmNlIHZ1ZSBpbnN0YW5jZSBpcyBkZXN0cm95ZWQgd2hlbiB0aGVcbiAgICAgICAgLy8gcGFnZSBpcyBkaXNwb3NlZCAoY2xlYXJIaXN0b3J5OiB0cnVlIGZvciBleGFtcGxlKVxuICAgICAgICB2YXIgZGlzcG9zZSA9IHBhZ2UuZGlzcG9zZU5hdGl2ZVZpZXc7XG4gICAgICAgIHBhZ2UuZGlzcG9zZU5hdGl2ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgbmF2RW50cnlJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICAgIGRpc3Bvc2UuY2FsbChwYWdlLCBhcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmcmFtZS5uYXZpZ2F0ZShPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGNyZWF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFnZTsgfSB9KSk7XG4gICAgICAgIHJlc29sdmUocGFnZSk7XG4gICAgICB9KVxuICAgIH07XG4gIH1cbn07XG5cbnZhciBQQUdFX1JFRiA9ICdfX3Z1ZVBhZ2VSZWZfXyc7XG5cbnZhciBwYWdlID0ge1xuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlUGFnZScsXG4gICAgICB7XG4gICAgICAgIGF0dHJzOiB0aGlzLiRhdHRycyxcbiAgICAgICAgb246IHRoaXMuJGxpc3RlbmVyc1xuICAgICAgfSxcbiAgICAgIHRoaXMuJHNsb3RzLmRlZmF1bHRcbiAgICApXG4gIH0sXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbC5uYXRpdmVWaWV3W1BBR0VfUkVGXSA9IHRoaXM7XG5cbiAgICB2YXIgZnJhbWUgPSBudWxsO1xuXG4gICAgaWYgKGlzSE1SQ2hlY2tpbmcoKSAmJiAhcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy9wbGF0Zm9ybScpLmlzQW5kcm9pZCkge1xuICAgICAgdmFyIG5hdkVudHJ5ID0gZmluZFBhcmVudE5hdmlnYXRpb25FbnRyeSh0aGlzKTtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBmcmFtZTogbmF2RW50cnkgPyBuYXZFbnRyeS4kb3B0aW9ucy5mcmFtZSA6ICdkZWZhdWx0J1xuICAgICAgfTtcbiAgICAgIGZyYW1lID0gZ2V0RnJhbWVJbnN0YW5jZShvcHRpb25zLmZyYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhbWUgPSB0aGlzLl9maW5kUGFyZW50RnJhbWUoKTtcbiAgICB9XG5cbiAgICBpZiAoZnJhbWUpIHtcbiAgICAgIGZyYW1lLm5vdGlmeVBhZ2VNb3VudGVkKHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmlzQmFja05hdmlnYXRpb24pIHtcbiAgICAgICAgdGhpcyQxLiRlbC5uYXRpdmVWaWV3Lm9mZignbmF2aWdhdGVkRnJvbScsIGhhbmRsZXIpO1xuICAgICAgICB0aGlzJDEuJHBhcmVudC4kZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLiRlbC5uYXRpdmVWaWV3Lm9uKCduYXZpZ2F0ZWRGcm9tJywgaGFuZGxlcik7XG5cbiAgICAvLyBlbnN1cmUgdGhhdCB0aGUgcGFyZW50IHZ1ZSBpbnN0YW5jZSBpcyBkZXN0cm95ZWQgd2hlbiB0aGVcbiAgICAvLyBwYWdlIGlzIGRpc3Bvc2VkIChjbGVhckhpc3Rvcnk6IHRydWUgZm9yIGV4YW1wbGUpXG4gICAgdmFyIGRpc3Bvc2UgPSB0aGlzLiRlbC5uYXRpdmVWaWV3LmRpc3Bvc2VOYXRpdmVWaWV3O1xuICAgIHRoaXMuJGVsLm5hdGl2ZVZpZXcuZGlzcG9zZU5hdGl2ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdGhpcyQxLiRwYXJlbnQuJGRlc3Ryb3koKTtcbiAgICAgIGRpc3Bvc2UuY2FsbCh0aGlzJDEuJGVsLm5hdGl2ZVZpZXcsIGFyZ3MpO1xuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBfZmluZFBhcmVudEZyYW1lOiBmdW5jdGlvbiBfZmluZFBhcmVudEZyYW1lKCkge1xuICAgICAgdmFyIGZyYW1lID0gdGhpcy4kcGFyZW50O1xuXG4gICAgICB3aGlsZSAoZnJhbWUgJiYgZnJhbWUuJG9wdGlvbnMubmFtZSAhPT0gJ0ZyYW1lJykge1xuICAgICAgICBmcmFtZSA9IGZyYW1lLiRwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmcmFtZVxuICAgIH1cbiAgfVxufTtcblxudmFyIHRhYlZpZXcgPSB7XG4gIG1vZGVsOiB7XG4gICAgcHJvcDogJ3NlbGVjdGVkSW5kZXgnLFxuICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlVGFiVmlldycsXG4gICAgICB7XG4gICAgICAgIG9uOiB0aGlzLiRsaXN0ZW5lcnMsXG4gICAgICAgIGF0dHJzOiB0aGlzLiRhdHRyc1xuICAgICAgfSxcbiAgICAgIHRoaXMuJHNsb3RzLmRlZmF1bHRcbiAgICApXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIHJlZ2lzdGVyVGFiOiBmdW5jdGlvbiByZWdpc3RlclRhYih0YWJWaWV3KSB7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLiRlbC5uYXRpdmVWaWV3Lml0ZW1zIHx8IFtdO1xuXG4gICAgICB0aGlzLiRlbC5zZXRBdHRyaWJ1dGUoJ2l0ZW1zJywgaXRlbXMuY29uY2F0KFt0YWJWaWV3XSkpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRhYlZpZXdJdGVtID0ge1xuICB0ZW1wbGF0ZTogXCI8TmF0aXZlVGFiVmlld0l0ZW0+PHNsb3QgLz48L05hdGl2ZVRhYlZpZXdJdGVtPlwiLFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgaWYgKHRoaXMuJGVsLmNoaWxkTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgd2FybignVGFiVmlld0l0ZW0gc2hvdWxkIGNvbnRhaW4gb25seSAxIHJvb3QgZWxlbWVudCcsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBfbmF0aXZlVmlldyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXc7XG4gICAgX25hdGl2ZVZpZXcudmlldyA9IHRoaXMuJGVsLmNoaWxkTm9kZXNbMF0ubmF0aXZlVmlldztcbiAgICB0aGlzLiRwYXJlbnQucmVnaXN0ZXJUYWIoX25hdGl2ZVZpZXcpO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbnZhciBlbGVtZW50TWFwID0ge307XG52YXIgbmF0aXZlUmVnRXhwID0gL05hdGl2ZS9naTtcbnZhciBkYXNoUmVnRXhwID0gLy0vZztcblxudmFyIGRlZmF1bHRWaWV3TWV0YSA9IHtcbiAgc2tpcEFkZFRvRG9tOiBmYWxzZSxcbiAgaXNVbmFyeVRhZzogZmFsc2UsXG4gIHRhZ05hbWVzcGFjZTogJycsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGZhbHNlLFxuICBtb2RlbDogbnVsbCxcbiAgY29tcG9uZW50OiBudWxsXG59O1xuXG5mdW5jdGlvbiBub3JtYWxpemVFbGVtZW50TmFtZShlbGVtZW50TmFtZSkge1xuICByZXR1cm4gKFwibmF0aXZlXCIgKyAoZWxlbWVudE5hbWVcbiAgICAucmVwbGFjZShuYXRpdmVSZWdFeHAsICcnKVxuICAgIC5yZXBsYWNlKGRhc2hSZWdFeHAsICcnKVxuICAgIC50b0xvd2VyQ2FzZSgpKSlcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KGVsZW1lbnROYW1lLCByZXNvbHZlciwgbWV0YSkge1xuICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemVFbGVtZW50TmFtZShlbGVtZW50TmFtZSk7XG5cbiAgbWV0YSA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRWaWV3TWV0YSwgbWV0YSk7XG5cbiAgaWYgKGVsZW1lbnRNYXBbbm9ybWFsaXplZE5hbWVdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKChcIkVsZW1lbnQgZm9yIFwiICsgZWxlbWVudE5hbWUgKyBcIiBhbHJlYWR5IHJlZ2lzdGVyZWQuXCIpKVxuICB9XG5cbiAgaWYgKCFtZXRhLmNvbXBvbmVudCkge1xuICAgIC8vIGlmIG5vIFZ1ZSBjb21wb25lbnQgaXMgcGFzc2VkLCB3cmFwIHRoZSBzaW1wbGVyIHZ1ZSBjb21wb25lbnRcbiAgICAvLyB3aGljaCBiaW5kIHRoZSBldmVudHMgYW5kIGF0dHJpYnV0ZXMgdG8gdGhlIE5TIG9uZVxuICAgIG1ldGEuY29tcG9uZW50ID0ge1xuICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgICAgIG1vZGVsOiBtZXRhLm1vZGVsLFxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoaCwgcmVmKSB7XG4gICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcblxuICAgICAgICByZXR1cm4gaChub3JtYWxpemVkTmFtZSwgZGF0YSwgY2hpbGRyZW4pXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBtZXRhLmNvbXBvbmVudC5uYW1lID0gZWxlbWVudE5hbWU7XG5cbiAgdmFyIGVudHJ5ID0ge1xuICAgIHJlc29sdmVyOiByZXNvbHZlcixcbiAgICBtZXRhOiBtZXRhXG4gIH07XG4gIGVsZW1lbnRNYXBbbm9ybWFsaXplZE5hbWVdID0gZW50cnk7XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRNYXAoKSB7XG4gIHJldHVybiBlbGVtZW50TWFwXG59XG5cbmZ1bmN0aW9uIGdldFZpZXdDbGFzcyhlbGVtZW50TmFtZSkge1xuICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemVFbGVtZW50TmFtZShlbGVtZW50TmFtZSk7XG4gIHZhciBlbnRyeSA9IGVsZW1lbnRNYXBbbm9ybWFsaXplZE5hbWVdO1xuXG4gIGlmICghZW50cnkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKChcIk5vIGtub3duIGNvbXBvbmVudCBmb3IgZWxlbWVudCBcIiArIGVsZW1lbnROYW1lICsgXCIuXCIpKVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cnkucmVzb2x2ZXIoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoXCJDb3VsZCBub3QgbG9hZCB2aWV3IGZvcjogXCIgKyBlbGVtZW50TmFtZSArIFwiLiBcIiArIGUpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdNZXRhKGVsZW1lbnROYW1lKSB7XG4gIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZUVsZW1lbnROYW1lKGVsZW1lbnROYW1lKTtcblxuICB2YXIgbWV0YSA9IGRlZmF1bHRWaWV3TWV0YTtcbiAgdmFyIGVudHJ5ID0gZWxlbWVudE1hcFtub3JtYWxpemVkTmFtZV07XG5cbiAgaWYgKGVudHJ5ICYmIGVudHJ5Lm1ldGEpIHtcbiAgICBtZXRhID0gZW50cnkubWV0YTtcbiAgfVxuXG4gIHJldHVybiBtZXRhXG59XG5cbmZ1bmN0aW9uIGlzS25vd25WaWV3KGVsZW1lbnROYW1lKSB7XG4gIHJldHVybiBlbGVtZW50TWFwW25vcm1hbGl6ZUVsZW1lbnROYW1lKGVsZW1lbnROYW1lKV1cbn1cblxucmVnaXN0ZXJFbGVtZW50KFxuICAnQWN0aW9uQmFyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9hY3Rpb24tYmFyJykuQWN0aW9uQmFyOyB9LFxuICB7XG4gICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcmVudC5uYXRpdmVWaWV3Ll9yZW1vdmVWaWV3KGNoaWxkLm5hdGl2ZVZpZXcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZ25vcmUgZXhjZXB0aW9uIC0gY2hpbGQgaXMgbGlrZWx5IGFscmVhZHkgcmVtb3ZlZC9yZXBsYWNlZFxuICAgICAgICAvLyBmaXhlcyAjNzZcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBvbmVudDogYWN0aW9uQmFyXG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0FjdGlvbkl0ZW0nLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2FjdGlvbi1iYXInKS5BY3Rpb25JdGVtOyB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoJ2FuZHJvaWQnLCBudWxsLCB7XG4gIGNvbXBvbmVudDogYW5kcm9pZFxufSk7XG5cbnJlZ2lzdGVyRWxlbWVudCgnaW9zJywgbnVsbCwge1xuICBjb21wb25lbnQ6IGlvc1xufSk7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0xpc3RWaWV3JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9saXN0LXZpZXcnKS5MaXN0VmlldzsgfSxcbiAge1xuICAgIGNvbXBvbmVudDogbGlzdFZpZXdcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnTmF2aWdhdGlvbkJ1dHRvbicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYWN0aW9uLWJhcicpLk5hdmlnYXRpb25CdXR0b247IH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RhYlZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RhYi12aWV3JykuVGFiVmlldzsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgICBldmVudDogJ3NlbGVjdGVkSW5kZXhDaGFuZ2UnXG4gICAgfSxcbiAgICBjb21wb25lbnQ6IHRhYlZpZXdcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnVGFiVmlld0l0ZW0nLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RhYi12aWV3JykuVGFiVmlld0l0ZW07IH0sXG4gIHtcbiAgICBza2lwQWRkVG9Eb206IHRydWUsXG4gICAgY29tcG9uZW50OiB0YWJWaWV3SXRlbVxuICB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoJ3RyYW5zaXRpb24nLCBudWxsLCB7XG4gIGNvbXBvbmVudDogVHJhbnNpdGlvblxufSk7XG5cbnJlZ2lzdGVyRWxlbWVudCgndi10ZW1wbGF0ZScsIG51bGwsIHtcbiAgY29tcG9uZW50OiB2VGVtcGxhdGVcbn0pO1xuXG4vLyBOUyBjb21wb25lbnRzIHdoaWNoIHVzZXMgdGhlIGF1dG9tYXRpYyByZWdpc3RlckVsZW1lbnQgVnVlIHdyYXBwZXJcbi8vIGFzIHRoZXkgZG8gbm90IG5lZWQgYW55IHNwZWNpYWwgbG9naWNcblxucmVnaXN0ZXJFbGVtZW50KCdMYWJlbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGFiZWwnKS5MYWJlbDsgfSwge1xuICBtb2RlbDoge1xuICAgIHByb3A6ICd0ZXh0JyxcbiAgICBldmVudDogJ3RleHRDaGFuZ2UnXG4gIH1cbn0pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdEYXRlUGlja2VyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9kYXRlLXBpY2tlcicpLkRhdGVQaWNrZXI7IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ2RhdGUnLFxuICAgICAgZXZlbnQ6ICdkYXRlQ2hhbmdlJ1xuICAgIH1cbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnQWJzb2x1dGVMYXlvdXQnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvYWJzb2x1dGUtbGF5b3V0JykuQWJzb2x1dGVMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdBY3Rpdml0eUluZGljYXRvcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYWN0aXZpdHktaW5kaWNhdG9yJykuQWN0aXZpdHlJbmRpY2F0b3I7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ0JvcmRlcicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYm9yZGVyJykuQm9yZGVyOyB9KTtcbnJlZ2lzdGVyRWxlbWVudCgnQnV0dG9uJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9idXR0b24nKS5CdXR0b247IH0pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnQ29udGVudFZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2NvbnRlbnQtdmlldycpLkNvbnRlbnRWaWV3OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnRG9ja0xheW91dCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9kb2NrLWxheW91dCcpLkRvY2tMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdHcmlkTGF5b3V0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2dyaWQtbGF5b3V0JykuR3JpZExheW91dDsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0h0bWxWaWV3JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9odG1sLXZpZXcnKS5IdG1sVmlldzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnSW1hZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlJykuSW1hZ2U7IH0pO1xucmVnaXN0ZXJFbGVtZW50KCdpbWcnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlJykuSW1hZ2U7IH0pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnTGlzdFBpY2tlcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGlzdC1waWNrZXInKS5MaXN0UGlja2VyOyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICdzZWxlY3RlZEluZGV4JyxcbiAgICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ1BhZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UnKS5QYWdlOyB9LCB7XG4gIHNraXBBZGRUb0RvbTogdHJ1ZSxcbiAgY29tcG9uZW50OiBwYWdlXG59KTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnUGxhY2Vob2xkZXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3BsYWNlaG9sZGVyJykuUGxhY2Vob2xkZXI7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdQcm9ncmVzcycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcHJvZ3Jlc3MnKS5Qcm9ncmVzczsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAndmFsdWUnLFxuICAgICAgZXZlbnQ6ICd2YWx1ZUNoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdQcm94eVZpZXdDb250YWluZXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3Byb3h5LXZpZXctY29udGFpbmVyJykuUHJveHlWaWV3Q29udGFpbmVyOyB9XG4pO1xuLy8gcmVnaXN0ZXJFbGVtZW50KFxuLy8gICAnUmVwZWF0ZXInLFxuLy8gICAoKSA9PiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3JlcGVhdGVyJykuUmVwZWF0ZXJcbi8vIClcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1Njcm9sbFZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3Njcm9sbC12aWV3JykuU2Nyb2xsVmlldzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1NlYXJjaEJhcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvc2VhcmNoLWJhcicpLlNlYXJjaEJhcjsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAndGV4dCcsXG4gICAgICBldmVudDogJ3RleHRDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnU2VnbWVudGVkQmFyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zZWdtZW50ZWQtYmFyJykuU2VnbWVudGVkQmFyOyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICdzZWxlY3RlZEluZGV4JyxcbiAgICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdTZWdtZW50ZWRCYXJJdGVtJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zZWdtZW50ZWQtYmFyJykuU2VnbWVudGVkQmFySXRlbTsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnU2xpZGVyJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zbGlkZXInKS5TbGlkZXI7IH0sIHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAndmFsdWUnLFxuICAgIGV2ZW50OiAndmFsdWVDaGFuZ2UnXG4gIH1cbn0pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnU3RhY2tMYXlvdXQnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvc3RhY2stbGF5b3V0JykuU3RhY2tMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdGbGV4Ym94TGF5b3V0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2ZsZXhib3gtbGF5b3V0JykuRmxleGJveExheW91dDsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnU3dpdGNoJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zd2l0Y2gnKS5Td2l0Y2g7IH0sIHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAnY2hlY2tlZCcsXG4gICAgZXZlbnQ6ICdjaGVja2VkQ2hhbmdlJ1xuICB9XG59KTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnVGV4dEZpZWxkJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS90ZXh0LWZpZWxkJykuVGV4dEZpZWxkOyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICd0ZXh0JyxcbiAgICAgIGV2ZW50OiAndGV4dENoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdUZXh0VmlldycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGV4dC12aWV3JykuVGV4dFZpZXc7IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ3RleHQnLFxuICAgICAgZXZlbnQ6ICd0ZXh0Q2hhbmdlJ1xuICAgIH1cbiAgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RpbWVQaWNrZXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RpbWUtcGlja2VyJykuVGltZVBpY2tlcjsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAndGltZScsXG4gICAgICBldmVudDogJ3RpbWVDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnV2ViVmlldycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvd2ViLXZpZXcnKS5XZWJWaWV3OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnV3JhcExheW91dCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy93cmFwLWxheW91dCcpLldyYXBMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdGb3JtYXR0ZWRTdHJpbmcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3RleHQvZm9ybWF0dGVkLXN0cmluZycpLkZvcm1hdHRlZFN0cmluZzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnU3BhbicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdGV4dC9zcGFuJykuU3BhbjsgfSk7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0RldGFjaGVkQ29udGFpbmVyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wcm94eS12aWV3LWNvbnRhaW5lcicpLlByb3h5Vmlld0NvbnRhaW5lcjsgfSxcbiAge1xuICAgIHNraXBBZGRUb0RvbTogdHJ1ZVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnRGV0YWNoZWRUZXh0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wbGFjZWhvbGRlcicpLlBsYWNlaG9sZGVyOyB9LFxuICB7XG4gICAgc2tpcEFkZFRvRG9tOiB0cnVlXG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdDb21tZW50JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wbGFjZWhvbGRlcicpLlBsYWNlaG9sZGVyOyB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdEb2N1bWVudCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcHJveHktdmlldy1jb250YWluZXInKS5Qcm94eVZpZXdDb250YWluZXI7IH0sXG4gIHtcbiAgICBza2lwQWRkVG9Eb206IHRydWVcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KCdGcmFtZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWUnKS5GcmFtZTsgfSwge1xuICBpbnNlcnRDaGlsZDogZnVuY3Rpb24gaW5zZXJ0Q2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBhdEluZGV4KSB7XG4gICAgLy8gaWYgKG5vcm1hbGl6ZUVsZW1lbnROYW1lKGNoaWxkTm9kZS50YWdOYW1lKSA9PT0gJ25hdGl2ZXBhZ2UnKSB7XG4gICAgLy8gcGFyZW50Tm9kZS5uYXRpdmVWaWV3Lm5hdmlnYXRlKHsgY3JlYXRlOiAoKSA9PiBjaGlsZE5vZGUubmF0aXZlVmlldyB9KVxuICAgIC8vIH1cbiAgfSxcbiAgY29tcG9uZW50OiBmcmFtZVxufSk7XG5cbi8qIVxuICogaXNvYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG52YXIgaXNvYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodmFsKSA9PT0gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiBpc09iamVjdE9iamVjdChvKSB7XG4gIHJldHVybiBpc29iamVjdChvKSA9PT0gdHJ1ZVxuICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbnZhciBpc1BsYWluT2JqZWN0JDEgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgdmFyIGN0b3IscHJvdDtcblxuICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBjb25zdHJ1Y3RvclxuICBjdG9yID0gby5jb25zdHJ1Y3RvcjtcbiAgaWYgKHR5cGVvZiBjdG9yICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBwcm90b3R5cGVcbiAgcHJvdCA9IGN0b3IucHJvdG90eXBlO1xuICBpZiAoaXNPYmplY3RPYmplY3QocHJvdCkgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuICBpZiAocHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gc2V0JDEodGFyZ2V0LCBwYXRoLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIWlzT2JqZWN0JDIodGFyZ2V0KSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShwYXRoKTtcbiAgaWYgKCFpc0FycmF5ICYmIHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICB2YXIgbWVyZ2UgPSBvcHRzLm1lcmdlO1xuICBpZiAobWVyZ2UgJiYgdHlwZW9mIG1lcmdlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgbWVyZ2UgPSBPYmplY3QuYXNzaWduO1xuICB9XG5cbiAgdmFyIGtleXMgPSBpc0FycmF5ID8gcGF0aCA6IHNwbGl0KHBhdGgsIG9wdHMpO1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gIHZhciBvcmlnID0gdGFyZ2V0O1xuXG4gIGlmICghb3B0aW9ucyAmJiBrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJlc3VsdCh0YXJnZXQsIGtleXNbMF0sIHZhbHVlLCBtZXJnZSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IGtleXNbaV07XG5cbiAgICBpZiAoIWlzT2JqZWN0JDIodGFyZ2V0W3Byb3BdKSkge1xuICAgICAgdGFyZ2V0W3Byb3BdID0ge307XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IGxlbiAtIDEpIHtcbiAgICAgIHJlc3VsdCh0YXJnZXQsIHByb3AsIHZhbHVlLCBtZXJnZSk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0YXJnZXQgPSB0YXJnZXRbcHJvcF07XG4gIH1cblxuICByZXR1cm4gb3JpZztcbn1cblxuZnVuY3Rpb24gcmVzdWx0KHRhcmdldCwgcGF0aCwgdmFsdWUsIG1lcmdlKSB7XG4gIGlmIChtZXJnZSAmJiBpc1BsYWluT2JqZWN0JDEodGFyZ2V0W3BhdGhdKSAmJiBpc1BsYWluT2JqZWN0JDEodmFsdWUpKSB7XG4gICAgdGFyZ2V0W3BhdGhdID0gbWVyZ2Uoe30sIHRhcmdldFtwYXRoXSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFtwYXRoXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0KHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGlkID0gY3JlYXRlS2V5KHBhdGgsIG9wdGlvbnMpO1xuICBpZiAoc2V0JDEubWVtb1tpZF0pIHsgcmV0dXJuIHNldCQxLm1lbW9baWRdOyB9XG5cbiAgdmFyIGNoYXIgPSAob3B0aW9ucyAmJiBvcHRpb25zLnNlcGFyYXRvcikgPyBvcHRpb25zLnNlcGFyYXRvciA6ICcuJztcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuXG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnNwbGl0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAga2V5cyA9IG9wdGlvbnMuc3BsaXQocGF0aCk7XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IHBhdGguc3BsaXQoY2hhcik7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IGtleXNbaV07XG4gICAgd2hpbGUgKHByb3AgJiYgcHJvcC5zbGljZSgtMSkgPT09ICdcXFxcJyAmJiBrZXlzW2kgKyAxXSkge1xuICAgICAgcHJvcCA9IHByb3Auc2xpY2UoMCwgLTEpICsgY2hhciArIGtleXNbKytpXTtcbiAgICB9XG4gICAgcmVzLnB1c2gocHJvcCk7XG4gIH1cbiAgc2V0JDEubWVtb1tpZF0gPSByZXM7XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleShwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBpZCA9IHBhdHRlcm47XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gaWQgKyAnJztcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZCArPSAnOycgKyBrZXkgKyAnPScgKyBTdHJpbmcob3B0aW9uc1trZXldKTtcbiAgfVxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0JDIodmFsKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbCkge1xuICAgIGNhc2UgJ251bGwnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbnNldCQxLm1lbW8gPSB7fTtcbnZhciBzZXRWYWx1ZSA9IHNldCQxO1xuXG5mdW5jdGlvbiBpc1ZpZXcodmlldykge1xuICByZXR1cm4gdmlldyBpbnN0YW5jZW9mIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvY29yZS92aWV3JykuVmlld1xufVxuXG5mdW5jdGlvbiBpc0xheW91dCh2aWV3KSB7XG4gIHJldHVybiAoXG4gICAgdmlldyBpbnN0YW5jZW9mXG4gICAgcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2xheW91dC1iYXNlJykuTGF5b3V0QmFzZVxuICApXG59XG5cbmZ1bmN0aW9uIGlzQ29udGVudFZpZXcodmlldykge1xuICByZXR1cm4gdmlldyBpbnN0YW5jZW9mIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvY29udGVudC12aWV3JykuQ29udGVudFZpZXdcbn1cblxuZnVuY3Rpb24gaW5zZXJ0Q2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBhdEluZGV4KSB7XG4gIGlmICggYXRJbmRleCA9PT0gdm9pZCAwICkgYXRJbmRleCA9IC0xO1xuXG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHBhcmVudE5vZGUubWV0YSAmJiB0eXBlb2YgcGFyZW50Tm9kZS5tZXRhLmluc2VydENoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHBhcmVudE5vZGUubWV0YS5pbnNlcnRDaGlsZChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGF0SW5kZXgpXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLm1ldGEuc2tpcEFkZFRvRG9tKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgcGFyZW50VmlldyA9IHBhcmVudE5vZGUubmF0aXZlVmlldztcbiAgdmFyIGNoaWxkVmlldyA9IGNoaWxkTm9kZS5uYXRpdmVWaWV3O1xuXG4gIGlmIChpc0xheW91dChwYXJlbnRWaWV3KSkge1xuICAgIGlmIChjaGlsZFZpZXcucGFyZW50ID09PSBwYXJlbnRWaWV3KSB7XG4gICAgICB2YXIgaW5kZXggPSBwYXJlbnRWaWV3LmdldENoaWxkSW5kZXgoY2hpbGRWaWV3KTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcGFyZW50Vmlldy5yZW1vdmVDaGlsZChjaGlsZFZpZXcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXRJbmRleCAhPT0gLTEpIHtcbiAgICAgIHBhcmVudFZpZXcuaW5zZXJ0Q2hpbGQoY2hpbGRWaWV3LCBhdEluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Vmlldy5hZGRDaGlsZChjaGlsZFZpZXcpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NvbnRlbnRWaWV3KHBhcmVudFZpZXcpKSB7XG4gICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgcGFyZW50Vmlldy5fYWRkVmlldyhjaGlsZFZpZXcsIGF0SW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRWaWV3LmNvbnRlbnQgPSBjaGlsZFZpZXc7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmVudFZpZXcgJiYgcGFyZW50Vmlldy5fYWRkQ2hpbGRGcm9tQnVpbGRlcikge1xuICAgIHBhcmVudFZpZXcuX2FkZENoaWxkRnJvbUJ1aWxkZXIoXG4gICAgICBjaGlsZE5vZGUuX25hdGl2ZVZpZXcuY29uc3RydWN0b3IubmFtZSxcbiAgICAgIGNoaWxkVmlld1xuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlKSB7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHBhcmVudE5vZGUubWV0YSAmJiB0eXBlb2YgcGFyZW50Tm9kZS5tZXRhLnJlbW92ZUNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHBhcmVudE5vZGUubWV0YS5yZW1vdmVDaGlsZChwYXJlbnROb2RlLCBjaGlsZE5vZGUpXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLm1ldGEuc2tpcEFkZFRvRG9tKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgcGFyZW50VmlldyA9IHBhcmVudE5vZGUubmF0aXZlVmlldztcbiAgdmFyIGNoaWxkVmlldyA9IGNoaWxkTm9kZS5uYXRpdmVWaWV3O1xuXG4gIGlmIChpc0xheW91dChwYXJlbnRWaWV3KSkge1xuICAgIHBhcmVudFZpZXcucmVtb3ZlQ2hpbGQoY2hpbGRWaWV3KTtcbiAgfSBlbHNlIGlmIChpc0NvbnRlbnRWaWV3KHBhcmVudFZpZXcpKSB7XG4gICAgaWYgKHBhcmVudFZpZXcuY29udGVudCA9PT0gY2hpbGRWaWV3KSB7XG4gICAgICBwYXJlbnRWaWV3LmNvbnRlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgIHBhcmVudFZpZXcuX3JlbW92ZVZpZXcoY2hpbGRWaWV3KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNWaWV3KHBhcmVudFZpZXcpKSB7XG4gICAgcGFyZW50Vmlldy5fcmVtb3ZlVmlldyhjaGlsZFZpZXcpO1xuICB9XG59XG5cbnZhciBYTUxfQVRUUklCVVRFUyA9IE9iamVjdC5mcmVlemUoW1xuICAnc3R5bGUnLFxuICAncm93cycsXG4gICdjb2x1bW5zJyxcbiAgJ2ZvbnRBdHRyaWJ1dGVzJ1xuXSk7XG5cbnZhciBWaWV3Tm9kZSA9IGZ1bmN0aW9uIFZpZXdOb2RlKCkge1xuICB0aGlzLm5vZGVUeXBlID0gbnVsbDtcbiAgdGhpcy5fdGFnTmFtZSA9IG51bGw7XG4gIHRoaXMucGFyZW50Tm9kZSA9IG51bGw7XG4gIHRoaXMuY2hpbGROb2RlcyA9IFtdO1xuICB0aGlzLnByZXZTaWJsaW5nID0gbnVsbDtcbiAgdGhpcy5uZXh0U2libGluZyA9IG51bGw7XG5cbiAgdGhpcy5fb3duZXJEb2N1bWVudCA9IG51bGw7XG4gIHRoaXMuX25hdGl2ZVZpZXcgPSBudWxsO1xuICB0aGlzLl9tZXRhID0gbnVsbDtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgKiBtYWtlIHZ1ZSBoYXBweSA6KVxuICAgKi9cbiAgdGhpcy5oYXNBdHRyaWJ1dGUgPSB0aGlzLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9O1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQyID0geyB0YWdOYW1lOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGZpcnN0Q2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbGFzdENoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG5hdGl2ZVZpZXc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbWV0YTogeyBjb25maWd1cmFibGU6IHRydWUgfSxvd25lckRvY3VtZW50OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5WaWV3Tm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHJldHVybiAoKHRoaXMuY29uc3RydWN0b3IubmFtZSkgKyBcIihcIiArICh0aGlzLnRhZ05hbWUpICsgXCIpXCIpXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi50YWdOYW1lLnNldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHRoaXMuX3RhZ05hbWUgPSBub3JtYWxpemVFbGVtZW50TmFtZShuYW1lKTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLnRhZ05hbWUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fdGFnTmFtZVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIuZmlyc3RDaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoID8gdGhpcy5jaGlsZE5vZGVzWzBdIDogbnVsbFxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIubGFzdENoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGhcbiAgICA/IHRoaXMuY2hpbGROb2Rlc1t0aGlzLmNoaWxkTm9kZXMubGVuZ3RoIC0gMV1cbiAgICA6IG51bGxcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLm5hdGl2ZVZpZXcuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fbmF0aXZlVmlld1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIubmF0aXZlVmlldy5zZXQgPSBmdW5jdGlvbiAodmlldykge1xuICBpZiAodGhpcy5fbmF0aXZlVmlldykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IG92ZXJyaWRlIG5hdGl2ZSB2aWV3LlwiKVxuICB9XG5cbiAgdGhpcy5fbmF0aXZlVmlldyA9IHZpZXc7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5tZXRhLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX21ldGEpIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YVxuICB9XG5cbiAgcmV0dXJuICh0aGlzLl9tZXRhID0gZ2V0Vmlld01ldGEodGhpcy50YWdOYW1lKSlcbn07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5vd25lckRvY3VtZW50LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX293bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fb3duZXJEb2N1bWVudFxuICB9XG5cbiAgdmFyIGVsID0gdGhpcztcbiAgd2hpbGUgKChlbCA9IGVsLnBhcmVudE5vZGUpLm5vZGVUeXBlICE9PSA5KSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgcmV0dXJuICh0aGlzLl9vd25lckRvY3VtZW50ID0gZWwpXG59O1xuXG5WaWV3Tm9kZS5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMubmF0aXZlVmlld1trZXldXG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZSAoa2V5LCB2YWx1ZSkge1xuICB2YXIgcmVmID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy9wbGF0Zm9ybScpO1xuICAgIHZhciBpc0FuZHJvaWQgPSByZWYuaXNBbmRyb2lkO1xuICAgIHZhciBpc0lPUyA9IHJlZi5pc0lPUztcbiAgdmFyIG52ID0gdGhpcy5uYXRpdmVWaWV3O1xuXG4gIHRyeSB7XG4gICAgaWYgKFhNTF9BVFRSSUJVVEVTLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgIG52W2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZGV0ZWN0IGV4cGFuZGFibGUgYXR0cnMgZm9yIGJvb2xlYW4gdmFsdWVzXG4gICAgICAvLyBTZWUgaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy1wcm9wcy5odG1sI1Bhc3NpbmctYS1Cb29sZWFuXG4gICAgICBpZiAoXG4gICAgICAgIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdXRpbHMvdHlwZXMnKS5pc0Jvb2xlYW4obnZba2V5XSkgJiZcbiAgICAgICAgdmFsdWUgPT09ICcnXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNBbmRyb2lkICYmIGtleS5zdGFydHNXaXRoKCdhbmRyb2lkOicpKSB7XG4gICAgICAgIHNldFZhbHVlKG52LCBrZXkuc3Vic3RyKDgpLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzSU9TICYmIGtleS5zdGFydHNXaXRoKCdpb3M6JykpIHtcbiAgICAgICAgc2V0VmFsdWUobnYsIGtleS5zdWJzdHIoNCksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5LmVuZHNXaXRoKCcuZGVjb2RlJykpIHtcbiAgICAgICAgc2V0VmFsdWUoXG4gICAgICAgICAgbnYsXG4gICAgICAgICAga2V5LnNsaWNlKDAsIC03KSxcbiAgICAgICAgICByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3htbCcpLlhtbFBhcnNlci5fZGVyZWZlcmVuY2VFbnRpdGllcyhcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VmFsdWUobnYsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZVxuICB9XG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnNldFN0eWxlID0gZnVuY3Rpb24gc2V0U3R5bGUgKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAoISh2YWx1ZSA9IHZhbHVlLnRyaW0oKSkubGVuZ3RoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAocHJvcGVydHkuZW5kc1dpdGgoJ0FsaWduJykpIHtcbiAgICAvLyBOYXRpdmVTY3JpcHQgdXNlcyBBbGlnbm1lbnQgaW5zdGVhZCBvZiBBbGlnbiwgdGhpcyBlbnN1cmVzIHRoYXQgdGV4dC1hbGlnbiB3b3Jrc1xuICAgIHByb3BlcnR5ICs9ICdtZW50JztcbiAgfVxuICB0aGlzLm5hdGl2ZVZpZXcuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnNldFRleHQgPSBmdW5jdGlvbiBzZXRUZXh0ICh0ZXh0KSB7XG4gIGlmICh0aGlzLm5vZGVUeXBlID09PSAzKSB7XG4gICAgdGhpcy5wYXJlbnROb2RlLnNldFRleHQodGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3RleHQnLCB0ZXh0KTtcbiAgfVxufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblZpZXdOb2RlLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lciAoZXZlbnQsIGhhbmRsZXIpIHtcbiAgdGhpcy5uYXRpdmVWaWV3Lm9uKGV2ZW50LCBoYW5kbGVyKTtcbn07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5WaWV3Tm9kZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIgKGV2ZW50KSB7XG4gIHRoaXMubmF0aXZlVmlldy5vZmYoZXZlbnQpO1xufTtcblxuVmlld05vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZSAoY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIGlmICghY2hpbGROb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgaW5zZXJ0IGNoaWxkLlwiKVxuICB9XG5cbiAgLy8gaW4gc29tZSByYXJlIGNhc2VzIGluc2VydEJlZm9yZSBpcyBjYWxsZWQgd2l0aCBhIG51bGwgcmVmZXJlbmNlTm9kZVxuICAvLyB0aGlzIG1ha2VzIHN1cmUgdGhhdCBpdCBnZXQncyBhcHBlbmRlZCBhcyB0aGUgbGFzdCBjaGlsZFxuICBpZiAoIXJlZmVyZW5jZU5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjaGlsZE5vZGUpXG4gIH1cblxuICBpZiAocmVmZXJlbmNlTm9kZS5wYXJlbnROb2RlICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDYW4ndCBpbnNlcnQgY2hpbGQsIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBub2RlIGhhcyBhIGRpZmZlcmVudCBwYXJlbnQuXCJcbiAgICApXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLnBhcmVudE5vZGUgJiYgY2hpbGROb2RlLnBhcmVudE5vZGUgIT09IHRoaXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNhbid0IGluc2VydCBjaGlsZCwgYmVjYXVzZSBpdCBhbHJlYWR5IGhhcyBhIGRpZmZlcmVudCBwYXJlbnQuXCJcbiAgICApXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLnBhcmVudE5vZGUgPT09IHRoaXMpIDtcblxuICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihyZWZlcmVuY2VOb2RlKTtcblxuICBjaGlsZE5vZGUucGFyZW50Tm9kZSA9IHRoaXM7XG4gIGNoaWxkTm9kZS5uZXh0U2libGluZyA9IHJlZmVyZW5jZU5vZGU7XG4gIGNoaWxkTm9kZS5wcmV2U2libGluZyA9IHRoaXMuY2hpbGROb2Rlc1tpbmRleCAtIDFdO1xuXG4gIHJlZmVyZW5jZU5vZGUucHJldlNpYmxpbmcgPSBjaGlsZE5vZGU7XG4gIHRoaXMuY2hpbGROb2Rlcy5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkTm9kZSk7XG5cbiAgaW5zZXJ0Q2hpbGQodGhpcywgY2hpbGROb2RlLCBpbmRleCk7XG59O1xuXG5WaWV3Tm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiBhcHBlbmRDaGlsZCAoY2hpbGROb2RlKSB7XG4gIGlmICghY2hpbGROb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgYXBwZW5kIGNoaWxkLlwiKVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5wYXJlbnROb2RlICYmIGNoaWxkTm9kZS5wYXJlbnROb2RlICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDYW4ndCBhcHBlbmQgY2hpbGQsIGJlY2F1c2UgaXQgYWxyZWFkeSBoYXMgYSBkaWZmZXJlbnQgcGFyZW50LlwiXG4gICAgKVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5wYXJlbnROb2RlID09PSB0aGlzKSA7XG5cbiAgY2hpbGROb2RlLnBhcmVudE5vZGUgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmxhc3RDaGlsZCkge1xuICAgIGNoaWxkTm9kZS5wcmV2U2libGluZyA9IHRoaXMubGFzdENoaWxkO1xuICAgIHRoaXMubGFzdENoaWxkLm5leHRTaWJsaW5nID0gY2hpbGROb2RlO1xuICB9XG5cbiAgdGhpcy5jaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcblxuICBpbnNlcnRDaGlsZCh0aGlzLCBjaGlsZE5vZGUsIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGggLSAxKTtcbn07XG5cblZpZXdOb2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkJDEgKGNoaWxkTm9kZSkge1xuICBpZiAoIWNoaWxkTm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlbW92ZSBjaGlsZC5cIilcbiAgfVxuXG4gIGlmICghY2hpbGROb2RlLnBhcmVudE5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCByZW1vdmUgY2hpbGQsIGJlY2F1c2UgaXQgaGFzIG5vIHBhcmVudC5cIilcbiAgfVxuXG4gIGlmIChjaGlsZE5vZGUucGFyZW50Tm9kZSAhPT0gdGhpcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlbW92ZSBjaGlsZCwgYmVjYXVzZSBpdCBoYXMgYSBkaWZmZXJlbnQgcGFyZW50LlwiKVxuICB9XG5cbiAgY2hpbGROb2RlLnBhcmVudE5vZGUgPSBudWxsO1xuXG4gIGlmIChjaGlsZE5vZGUucHJldlNpYmxpbmcpIHtcbiAgICBjaGlsZE5vZGUucHJldlNpYmxpbmcubmV4dFNpYmxpbmcgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gIH1cblxuICBpZiAoY2hpbGROb2RlLm5leHRTaWJsaW5nKSB7XG4gICAgY2hpbGROb2RlLm5leHRTaWJsaW5nLnByZXZTaWJsaW5nID0gY2hpbGROb2RlLnByZXZTaWJsaW5nO1xuICB9XG5cbiAgLy8gcmVzZXQgdGhlIHByZXZTaWJsaW5nIGFuZCBuZXh0U2libGluZy4gSWYgbm90LCBhIGtlZXAtYWxpdmVkIGNvbXBvbmVudCB3aWxsXG4gIC8vIHN0aWxsIGhhdmUgYSBmaWxsZWQgbmV4dFNpYmxpbmcgYXR0cmlidXRlIHNvIHZ1ZSB3aWxsIG5vdFxuICAvLyBpbnNlcnQgdGhlIG5vZGUgYWdhaW4gdG8gdGhlIHBhcmVudC4gU2VlICMyMjBcbiAgY2hpbGROb2RlLnByZXZTaWJsaW5nID0gbnVsbDtcbiAgY2hpbGROb2RlLm5leHRTaWJsaW5nID0gbnVsbDtcblxuICB0aGlzLmNoaWxkTm9kZXMgPSB0aGlzLmNoaWxkTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlICE9PSBjaGlsZE5vZGU7IH0pO1xuXG4gIHJlbW92ZUNoaWxkKHRoaXMsIGNoaWxkTm9kZSk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVmlld05vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMiApO1xuXG52YXIgVlVFX0VMRU1FTlRfUkVGID0gJ19fdnVlX2VsZW1lbnRfcmVmX18nO1xuXG52YXIgRWxlbWVudE5vZGUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChWaWV3Tm9kZSkge1xuICBmdW5jdGlvbiBFbGVtZW50Tm9kZSh0YWdOYW1lKSB7XG4gICAgVmlld05vZGUuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSAxO1xuICAgIHRoaXMudGFnTmFtZSA9IHRhZ05hbWU7XG5cbiAgICB2YXIgdmlld0NsYXNzID0gZ2V0Vmlld0NsYXNzKHRhZ05hbWUpO1xuICAgIHRoaXMuX25hdGl2ZVZpZXcgPSBuZXcgdmlld0NsYXNzKCk7XG4gICAgdGhpcy5fbmF0aXZlVmlld1tWVUVfRUxFTUVOVF9SRUZdID0gdGhpcztcbiAgfVxuXG4gIGlmICggVmlld05vZGUgKSBFbGVtZW50Tm9kZS5fX3Byb3RvX18gPSBWaWV3Tm9kZTtcbiAgRWxlbWVudE5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVmlld05vZGUgJiYgVmlld05vZGUucHJvdG90eXBlICk7XG4gIEVsZW1lbnROb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVsZW1lbnROb2RlO1xuXG4gIEVsZW1lbnROb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIGFwcGVuZENoaWxkIChjaGlsZE5vZGUpIHtcbiAgICBWaWV3Tm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQuY2FsbCh0aGlzLCBjaGlsZE5vZGUpO1xuXG4gICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgdGhpcy5zZXRUZXh0KGNoaWxkTm9kZS50ZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgRWxlbWVudE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZSAoY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgVmlld05vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZS5jYWxsKHRoaXMsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSk7XG5cbiAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICB0aGlzLnNldFRleHQoY2hpbGROb2RlLnRleHQpO1xuICAgIH1cbiAgfTtcblxuICBFbGVtZW50Tm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoY2hpbGROb2RlKSB7XG4gICAgVmlld05vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkLmNhbGwodGhpcywgY2hpbGROb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHRoaXMuc2V0VGV4dCgnJyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBFbGVtZW50Tm9kZTtcbn0oVmlld05vZGUpKTtcblxudmFyIENvbW1lbnROb2RlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRWxlbWVudE5vZGUpIHtcbiAgZnVuY3Rpb24gQ29tbWVudE5vZGUodGV4dCkge1xuICAgIEVsZW1lbnROb2RlLmNhbGwodGhpcywgJ2NvbW1lbnQnKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSA4O1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gIH1cblxuICBpZiAoIEVsZW1lbnROb2RlICkgQ29tbWVudE5vZGUuX19wcm90b19fID0gRWxlbWVudE5vZGU7XG4gIENvbW1lbnROb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEVsZW1lbnROb2RlICYmIEVsZW1lbnROb2RlLnByb3RvdHlwZSApO1xuICBDb21tZW50Tm9kZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb21tZW50Tm9kZTtcblxuICByZXR1cm4gQ29tbWVudE5vZGU7XG59KEVsZW1lbnROb2RlKSk7XG5cbnZhciBUZXh0Tm9kZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFZpZXdOb2RlKSB7XG4gIGZ1bmN0aW9uIFRleHROb2RlKHRleHQpIHtcbiAgICBWaWV3Tm9kZS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5ub2RlVHlwZSA9IDM7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcblxuICAgIHRoaXMuX21ldGEgPSB7XG4gICAgICBza2lwQWRkVG9Eb206IHRydWVcbiAgICB9O1xuICB9XG5cbiAgaWYgKCBWaWV3Tm9kZSApIFRleHROb2RlLl9fcHJvdG9fXyA9IFZpZXdOb2RlO1xuICBUZXh0Tm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBWaWV3Tm9kZSAmJiBWaWV3Tm9kZS5wcm90b3R5cGUgKTtcbiAgVGV4dE5vZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dE5vZGU7XG5cbiAgVGV4dE5vZGUucHJvdG90eXBlLnNldFRleHQgPSBmdW5jdGlvbiBzZXRUZXh0ICh0ZXh0KSB7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLnBhcmVudE5vZGUuc2V0VGV4dCh0ZXh0KTtcbiAgfTtcblxuICByZXR1cm4gVGV4dE5vZGU7XG59KFZpZXdOb2RlKSk7XG5cbnZhciBEb2N1bWVudE5vZGUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChWaWV3Tm9kZSkge1xuICBmdW5jdGlvbiBEb2N1bWVudE5vZGUoKSB7XG4gICAgVmlld05vZGUuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSA5O1xuICAgIHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbmV3IEVsZW1lbnROb2RlKCdkb2N1bWVudCcpO1xuXG4gICAgLy8gbWFrZSBzdGF0aWMgbWV0aG9kcyBhY2Nlc3NpYmxlIHZpYSB0aGlzXG4gICAgdGhpcy5jcmVhdGVDb21tZW50ID0gdGhpcy5jb25zdHJ1Y3Rvci5jcmVhdGVDb21tZW50O1xuICAgIHRoaXMuY3JlYXRlRWxlbWVudCA9IHRoaXMuY29uc3RydWN0b3IuY3JlYXRlRWxlbWVudDtcbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnROUyA9IHRoaXMuY29uc3RydWN0b3IuY3JlYXRlRWxlbWVudE5TO1xuICAgIHRoaXMuY3JlYXRlVGV4dE5vZGUgPSB0aGlzLmNvbnN0cnVjdG9yLmNyZWF0ZVRleHROb2RlO1xuICB9XG5cbiAgaWYgKCBWaWV3Tm9kZSApIERvY3VtZW50Tm9kZS5fX3Byb3RvX18gPSBWaWV3Tm9kZTtcbiAgRG9jdW1lbnROb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFZpZXdOb2RlICYmIFZpZXdOb2RlLnByb3RvdHlwZSApO1xuICBEb2N1bWVudE5vZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9jdW1lbnROb2RlO1xuXG4gIERvY3VtZW50Tm9kZS5jcmVhdGVDb21tZW50ID0gZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICAgIHJldHVybiBuZXcgQ29tbWVudE5vZGUodGV4dClcbiAgfTtcblxuICBEb2N1bWVudE5vZGUuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKHRhZ05hbWUpIHtcbiAgICByZXR1cm4gbmV3IEVsZW1lbnROb2RlKHRhZ05hbWUpXG4gIH07XG5cbiAgRG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnROUyA9IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBFbGVtZW50Tm9kZShuYW1lc3BhY2UgKyAnOicgKyB0YWdOYW1lKVxuICB9O1xuXG4gIERvY3VtZW50Tm9kZS5jcmVhdGVUZXh0Tm9kZSA9IGZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0Tm9kZSh0ZXh0KVxuICB9O1xuXG4gIHJldHVybiBEb2N1bWVudE5vZGU7XG59KFZpZXdOb2RlKSk7XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gbWFrZU1hcCgndGVtcGxhdGUnLCB0cnVlKTtcblxudmFyIF9WdWU7XG5cbmZ1bmN0aW9uIHNldFZ1ZShWdWUpIHtcbiAgX1Z1ZSA9IFZ1ZTtcbn1cblxudmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBmdW5jdGlvbihlbCkge1xuICByZXR1cm4gZ2V0Vmlld01ldGEoZWwpLmNhbkJlTGVmdE9wZW5UYWdcbn07XG5cbnZhciBpc1VuYXJ5VGFnID0gZnVuY3Rpb24oZWwpIHtcbiAgcmV0dXJuIGdldFZpZXdNZXRhKGVsKS5pc1VuYXJ5VGFnXG59O1xuXG5mdW5jdGlvbiBtdXN0VXNlUHJvcCgpIHtcbiAgLy8gY29uc29sZS5sb2coJ211c3RVc2VQcm9wJylcbn1cblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlKGVsKSB7XG4gIHJldHVybiBnZXRWaWV3TWV0YShlbCkudGFnTmFtZXNwYWNlXG59XG5cbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQoZWwpIHtcbiAgcmV0dXJuICFpc0tub3duVmlldyhlbClcbn1cblxudmFyIFZVRV9WRVJTSU9OID0gcHJvY2Vzcy5lbnYuVlVFX1ZFUlNJT04gfHwgJzIuNi4xMCc7XG52YXIgTlNfVlVFX1ZFUlNJT04gPSBwcm9jZXNzLmVudi5OU19WVUVfVkVSU0lPTiB8fCAnMi4zLjAnO1xuXG52YXIgaW5mb1RyYWNlID0gb25jZShmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKFxuICAgIFwiTmF0aXZlU2NyaXB0LVZ1ZSBoYXMgXFxcIlZ1ZS5jb25maWcuc2lsZW50XFxcIiBzZXQgdG8gdHJ1ZSwgdG8gc2VlIG91dHB1dCBsb2dzIHNldCBpdCB0byBmYWxzZS5cIlxuICApO1xufSk7XG5cbmZ1bmN0aW9uIHRyYWNlKG1lc3NhZ2UpIHtcbiAgaWYgKF9WdWUgJiYgX1Z1ZS5jb25maWcuc2lsZW50KSB7XG4gICAgcmV0dXJuIGluZm9UcmFjZSgpXG4gIH1cblxuICBjb25zb2xlLmxvZyhcbiAgICAoXCJ7TlNWdWUgKFZ1ZTogXCIgKyBWVUVfVkVSU0lPTiArIFwiIHwgTlNWdWU6IFwiICsgTlNfVlVFX1ZFUlNJT04gKyBcIil9IC0+IFwiICsgbWVzc2FnZSlcbiAgKTtcbn1cblxudmFyIG5hbWVzcGFjZU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEodGFnTmFtZSwgdm5vZGUpIHtcbiAgdHJhY2UoKFwiQ3JlYXRlRWxlbWVudChcIiArIHRhZ05hbWUgKyBcIilcIikpO1xuICByZXR1cm4gRG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICB0cmFjZSgoXCJDcmVhdGVFbGVtZW50TlMoXCIgKyBuYW1lc3BhY2UgKyBcIiNcIiArIHRhZ05hbWUgKyBcIilcIikpO1xuICByZXR1cm4gRG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKHRleHQpIHtcbiAgdHJhY2UoKFwiQ3JlYXRlVGV4dE5vZGUoXCIgKyB0ZXh0ICsgXCIpXCIpKTtcbiAgcmV0dXJuIERvY3VtZW50Tm9kZS5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50KHRleHQpIHtcbiAgdHJhY2UoKFwiQ3JlYXRlQ29tbWVudChcIiArIHRleHQgKyBcIilcIikpO1xuXG4gIHJldHVybiBEb2N1bWVudE5vZGUuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICB0cmFjZSgoXCJJbnNlcnRCZWZvcmUoXCIgKyBwYXJlbnROb2RlICsgXCIsIFwiICsgbmV3Tm9kZSArIFwiLCBcIiArIHJlZmVyZW5jZU5vZGUgKyBcIilcIikpO1xuICByZXR1cm4gcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSlcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQkMShub2RlLCBjaGlsZCkge1xuICB0cmFjZSgoXCJSZW1vdmVDaGlsZChcIiArIG5vZGUgKyBcIiwgXCIgKyBjaGlsZCArIFwiKVwiKSk7XG4gIHJldHVybiBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKVxufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZChub2RlLCBjaGlsZCkge1xuICB0cmFjZSgoXCJBcHBlbmRDaGlsZChcIiArIG5vZGUgKyBcIiwgXCIgKyBjaGlsZCArIFwiKVwiKSk7XG5cbiAgcmV0dXJuIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpXG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUobm9kZSkge1xuICB0cmFjZSgoXCJQYXJlbnROb2RlKFwiICsgbm9kZSArIFwiKSAtPiBcIiArIChub2RlLnBhcmVudE5vZGUpKSk7XG5cbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyhub2RlKSB7XG4gIHRyYWNlKChcIk5leHRTaWJsaW5nKFwiICsgbm9kZSArIFwiKSAtPiBcIiArIChub2RlLm5leHRTaWJsaW5nKSkpO1xuXG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUoZWxlbWVudE5vZGUpIHtcbiAgdHJhY2UoKFwiVGFnTmFtZShcIiArIGVsZW1lbnROb2RlICsgXCIpIC0+IFwiICsgKGVsZW1lbnROb2RlLnRhZ05hbWUpKSk7XG5cbiAgcmV0dXJuIGVsZW1lbnROb2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQobm9kZSwgdGV4dCkge1xuICB0cmFjZSgoXCJTZXRUZXh0Q29udGVudChcIiArIG5vZGUgKyBcIiwgXCIgKyB0ZXh0ICsgXCIpXCIpKTtcblxuICBub2RlLnNldFRleHQodGV4dCk7XG59XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShub2RlLCBrZXksIHZhbCkge1xuICB0cmFjZSgoXCJTZXRBdHRyaWJ1dGUoXCIgKyBub2RlICsgXCIsIFwiICsga2V5ICsgXCIsIFwiICsgdmFsICsgXCIpXCIpKTtcblxuICBub2RlLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgIG5hbWVzcGFjZU1hcDogbmFtZXNwYWNlTWFwLFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gICAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQkMSxcbiAgICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gICAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gICAgc2V0QXR0cmlidXRlOiBzZXRBdHRyaWJ1dGUsXG4gICAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oe1xuICBub2RlT3BzOiBub2RlT3BzLFxuICBtb2R1bGVzOiBtb2R1bGVzXG59KTtcblxudmFyIGhlID0ge1xuICBkZWNvZGU6IGRlY29kZVxufTtcblxuZnVuY3Rpb24gZGVjb2RlKGh0bWwpIHtcbiAgLy8gdG9kbz9cbiAgcmV0dXJuIGh0bWxcbn1cblxuLyogICovXG5cbnZhciBpc1VuYXJ5VGFnJDEgPSBtYWtlTWFwKFxuICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicidcbik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuLy8gKGFuZCB3aGljaCBjbG9zZSB0aGVtc2VsdmVzKVxudmFyIGNhbkJlTGVmdE9wZW5UYWckMSA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJ1xuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG52YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0sJyArXG4gICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICtcbiAgJ3RpdGxlLHRyLHRyYWNrJ1xuKTtcblxuLyoqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cbiAqL1xuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBhdHRyaWJ1dGUgPSAvXlxccyooW15cXHNcIic8PlxcLz1dKykoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIG5jbmFtZSA9IFwiW2EtekEtWl9dW1xcXFwtXFxcXC4wLTlfYS16QS1aXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKlwiO1xudmFyIHFuYW1lQ2FwdHVyZSA9IFwiKCg/OlwiICsgbmNuYW1lICsgXCJcXFxcOik/XCIgKyBuY25hbWUgKyBcIilcIjtcbnZhciBzdGFydFRhZ09wZW4gPSBuZXcgUmVnRXhwKChcIl48XCIgKyBxbmFtZUNhcHR1cmUpKTtcbnZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG52YXIgZW5kVGFnID0gbmV3IFJlZ0V4cCgoXCJePFxcXFwvXCIgKyBxbmFtZUNhcHR1cmUgKyBcIltePl0qPlwiKSk7XG52YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xuLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxudmFyIGNvbW1lbnQgPSAvXjwhXFwtLS87XG52YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxcWy87XG5cbi8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxudmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGRlY29kaW5nTWFwID0ge1xuICAnJmx0Oyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJmFtcDsnOiAnJicsXG4gICcmIzEwOyc6ICdcXG4nLFxuICAnJiM5Oyc6ICdcXHQnLFxuICAnJiMzOTsnOiBcIidcIlxufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbnZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7XG5cbi8vICM1OTkyXG52YXIgaXNJZ25vcmVOZXdsaW5lVGFnID0gbWFrZU1hcCgncHJlLHRleHRhcmVhJywgdHJ1ZSk7XG52YXIgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gZnVuY3Rpb24gKHRhZywgaHRtbCkgeyByZXR1cm4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgdmFyIHJlID0gc2hvdWxkRGVjb2RlTmV3bGluZXMgPyBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA6IGVuY29kZWRBdHRyO1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG4gIHZhciBpc1VuYXJ5VGFnID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICB2YXIgY2FuQmVMZWZ0T3BlblRhZyA9IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHBsYWludGV4dCBjb250ZW50IGVsZW1lbnQgbGlrZSBzY3JpcHQvc3R5bGVcbiAgICBpZiAoIWxhc3RUYWcgfHwgIWlzUGxhaW5UZXh0RWxlbWVudChsYXN0VGFnKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRLZWVwQ29tbWVudCkge1xuICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YXJ0VGFnTWF0Y2gudGFnTmFtZSwgaHRtbCkpIHtcbiAgICAgICAgICAgIGFkdmFuY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCA9ICh2b2lkIDApLCBuZXh0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAodGV4dEVuZCA+PSAwKSB7XG4gICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyA8IGluIHBsYWluIHRleHQsIGJlIGZvcmdpdmluZyBhbmQgdHJlYXQgaXQgYXMgdGV4dFxuICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcbiAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgYWR2YW5jZSh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0LCBpbmRleCAtIHRleHQubGVuZ3RoLCBpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlbmRUYWdMZW5ndGggPSAwO1xuICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICB2YXIgcmVzdCQxID0gaHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZywgZnVuY3Rpb24gKGFsbCwgdGV4dCwgZW5kVGFnKSB7XG4gICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKSAvLyAjNzI5OFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFja2VkVGFnLCB0ZXh0KSkge1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0pO1xuICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0JDEubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3QkMTtcbiAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT09IGxhc3QpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMgJiYgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7XG4gICAgICAgIG9wdGlvbnMud2FybigoXCJNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFxcXCJcIiArIGh0bWwgKyBcIlxcXCJcIiksIHsgc3RhcnQ6IGluZGV4ICsgaHRtbC5sZW5ndGggfSk7XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChkeW5hbWljQXJnQXR0cmlidXRlKSB8fCBodG1sLm1hdGNoKGF0dHJpYnV0ZSkpKSB7XG4gICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIGF0dHIuZW5kID0gaW5kZXg7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG1hdGNoLnRhZ05hbWU7XG4gICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBhcmdzWzNdIHx8IGFyZ3NbNF0gfHwgYXJnc1s1XSB8fCAnJztcbiAgICAgIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IHRhZ05hbWUgPT09ICdhJyAmJiBhcmdzWzFdID09PSAnaHJlZidcbiAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZlxuICAgICAgICA6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXM7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKVxuICAgICAgfTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBhcmdzLnN0YXJ0ICsgYXJnc1swXS5tYXRjaCgvXlxccyovKS5sZW5ndGg7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGFyZ3MuZW5kO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzLCBzdGFydDogbWF0Y2guc3RhcnQsIGVuZDogbWF0Y2guZW5kIH0pO1xuICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3MsIGxvd2VyQ2FzZWRUYWdOYW1lO1xuICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgb3BlbmVkIHRhZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgKGkgPiBwb3MgfHwgIXRhZ05hbWUpICYmXG4gICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbnMud2FybihcbiAgICAgICAgICAgIChcInRhZyA8XCIgKyAoc3RhY2tbaV0udGFnKSArIFwiPiBoYXMgbm8gbWF0Y2hpbmcgZW5kIHRhZy5cIiksXG4gICAgICAgICAgICB7IHN0YXJ0OiBzdGFja1tpXS5zdGFydCwgZW5kOiBzdGFja1tpXS5lbmQgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgb3B0aW9ucy5lbmQoc3RhY2tbaV0udGFnLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIG9wZW4gZWxlbWVudHMgZnJvbSB0aGUgc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdicicpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdwJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XG5cbmZ1bmN0aW9uIHBhcnNlRmlsdGVycyAoZXhwKSB7XG4gIHZhciBpblNpbmdsZSA9IGZhbHNlO1xuICB2YXIgaW5Eb3VibGUgPSBmYWxzZTtcbiAgdmFyIGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTtcbiAgdmFyIGluUmVnZXggPSBmYWxzZTtcbiAgdmFyIGN1cmx5ID0gMDtcbiAgdmFyIHNxdWFyZSA9IDA7XG4gIHZhciBwYXJlbiA9IDA7XG4gIHZhciBsYXN0RmlsdGVySW5kZXggPSAwO1xuICB2YXIgYywgcHJldiwgaSwgZXhwcmVzc2lvbiwgZmlsdGVycztcblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJldiA9IGM7XG4gICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChpblNpbmdsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgeyBpblNpbmdsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpbkRvdWJsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1QykgeyBpbkRvdWJsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICBpZiAoYyA9PT0gMHg2MCAmJiBwcmV2ICE9PSAweDVDKSB7IGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5SZWdleCkge1xuICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgeyBpblJlZ2V4ID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYyA9PT0gMHg3QyAmJiAvLyBwaXBlXG4gICAgICBleHAuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiZcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gMHg3QyAmJlxuICAgICAgIWN1cmx5ICYmICFzcXVhcmUgJiYgIXBhcmVuXG4gICAgKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGZpcnN0IGZpbHRlciwgZW5kIG9mIGV4cHJlc3Npb25cbiAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaEZpbHRlcigpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAweDIyOiBpbkRvdWJsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gXCJcbiAgICAgICAgY2FzZSAweDI3OiBpblNpbmdsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gJ1xuICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgXG4gICAgICAgIGNhc2UgMHgyODogcGFyZW4rKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIChcbiAgICAgICAgY2FzZSAweDI5OiBwYXJlbi0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKVxuICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbXG4gICAgICAgIGNhc2UgMHg1RDogc3F1YXJlLS07IGJyZWFrICAgICAgICAgICAgICAgIC8vIF1cbiAgICAgICAgY2FzZSAweDdCOiBjdXJseSsrOyBicmVhayAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgICBpZiAoYyA9PT0gMHgyZikgeyAvLyAvXG4gICAgICAgIHZhciBqID0gaSAtIDE7XG4gICAgICAgIHZhciBwID0gKHZvaWQgMCk7XG4gICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgcHJldiBjaGFyXG4gICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xuICAgICAgICAgIGlmIChwICE9PSAnICcpIHsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcCB8fCAhdmFsaWREaXZpc2lvbkNoYXJSRS50ZXN0KHApKSB7XG4gICAgICAgICAgaW5SZWdleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgcHVzaEZpbHRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgKGZpbHRlcnMgfHwgKGZpbHRlcnMgPSBbXSkpLnB1c2goZXhwLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpKTtcbiAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHByZXNzaW9uXG59XG5cbmZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7XG4gIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXJcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xuICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgbmFtZSArIFwiXFxcIikoXCIgKyBleHAgKyAoYXJncyAhPT0gJyknID8gJywnICsgYXJncyA6IGFyZ3MpKVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxccj9cXG4pKz8pXFx9XFx9L2c7XG52YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbnZhciBidWlsZFJlZ2V4ID0gY2FjaGVkKGZ1bmN0aW9uIChkZWxpbWl0ZXJzKSB7XG4gIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAob3BlbiArICcoKD86LnxcXFxcbikrPyknICsgY2xvc2UsICdnJylcbn0pO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgdGV4dCxcbiAgZGVsaW1pdGVyc1xuKSB7XG4gIHZhciB0YWdSRSA9IGRlbGltaXRlcnMgPyBidWlsZFJlZ2V4KGRlbGltaXRlcnMpIDogZGVmYXVsdFRhZ1JFO1xuICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciByYXdUb2tlbnMgPSBbXTtcbiAgdmFyIGxhc3RJbmRleCA9IHRhZ1JFLmxhc3RJbmRleCA9IDA7XG4gIHZhciBtYXRjaCwgaW5kZXgsIHRva2VuVmFsdWU7XG4gIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgIGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gcHVzaCB0ZXh0IHRva2VuXG4gICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KSk7XG4gICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gICAgfVxuICAgIC8vIHRhZyB0b2tlblxuICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTtcbiAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgcmF3VG9rZW5zLnB1c2goeyAnQGJpbmRpbmcnOiBleHAgfSk7XG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gIH1cbiAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4KSk7XG4gICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSxcbiAgICB0b2tlbnM6IHJhd1Rva2Vuc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuXG4gIHZhciBiYXNlVmFsdWVFeHByZXNzaW9uID0gJyQkdic7XG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9XG4gICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgXCI/IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiLnRyaW0oKVwiICtcbiAgICAgIFwiOiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIHZhciBhc3NpZ25tZW50ID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG5cbiAgZWwubW9kZWwgPSB7XG4gICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgIGV4cHJlc3Npb246IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICBjYWxsYmFjazogKFwiZnVuY3Rpb24gKFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKSB7XCIgKyBhc3NpZ25tZW50ICsgXCJ9XCIpXG4gIH07XG59XG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlIChcbiAgdmFsdWUsXG4gIGFzc2lnbm1lbnRcbikge1xuICB2YXIgcmVzID0gcGFyc2VNb2RlbCh2YWx1ZSk7XG4gIGlmIChyZXMua2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiJHNldChcIiArIChyZXMuZXhwKSArIFwiLCBcIiArIChyZXMua2V5KSArIFwiLCBcIiArIGFzc2lnbm1lbnQgKyBcIilcIilcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGEgdi1tb2RlbCBleHByZXNzaW9uIGludG8gYSBiYXNlIHBhdGggYW5kIGEgZmluYWwga2V5IHNlZ21lbnQuXG4gKiBIYW5kbGVzIGJvdGggZG90LXBhdGggYW5kIHBvc3NpYmxlIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBQb3NzaWJsZSBjYXNlczpcbiAqXG4gKiAtIHRlc3RcbiAqIC0gdGVzdFtrZXldXG4gKiAtIHRlc3RbdGVzdDFba2V5XV1cbiAqIC0gdGVzdFtcImFcIl1ba2V5XVxuICogLSB4eHgudGVzdFthW2FdLnRlc3QxW2tleV1dXG4gKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFba2V5XV1cbiAqXG4gKi9cblxudmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvcHVsbC83NzMwXG4gIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICB2YWwgPSB2YWwudHJpbSgpO1xuICBsZW4gPSB2YWwubGVuZ3RoO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICBpbmRleCQxID0gdmFsLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgaWYgKGluZGV4JDEgPiAtMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwuc2xpY2UoMCwgaW5kZXgkMSksXG4gICAgICAgIGtleTogJ1wiJyArIHZhbC5zbGljZShpbmRleCQxICsgMSkgKyAnXCInXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLFxuICAgICAgICBrZXk6IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdHIgPSB2YWw7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cDogdmFsLnNsaWNlKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnLCByYW5nZSkge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgY29tcGlsZXJdOiBcIiArIG1zZykpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtW2tleV07IH0pLmZpbHRlcihmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfSlcbiAgICA6IFtdXG59XG5cbmZ1bmN0aW9uIGFkZFByb3AgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpXG4gICAgOiAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKTtcbiAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG5mdW5jdGlvbiBhZGRSYXdBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlKSB7XG4gIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7XG4gIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgaXNEeW5hbWljQXJnLFxuICBtb2RpZmllcnMsXG4gIHJhbmdlXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd05hbWU6IHJhd05hbWUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGFyZzogYXJnLFxuICAgIGlzRHluYW1pY0FyZzogaXNEeW5hbWljQXJnLFxuICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7XG4gIHJldHVybiBkeW5hbWljXG4gICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgOiBzeW1ib2wgKyBuYW1lIC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICBlbCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIG1vZGlmaWVycyxcbiAgaW1wb3J0YW50LFxuICB3YXJuLFxuICByYW5nZSxcbiAgZHluYW1pY1xuKSB7XG4gIG1vZGlmaWVycyA9IG1vZGlmaWVycyB8fCBlbXB0eU9iamVjdDtcbiAgLy8gd2FybiBwcmV2ZW50IGFuZCBwYXNzaXZlIG1vZGlmaWVyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuICYmXG4gICAgbW9kaWZpZXJzLnByZXZlbnQgJiYgbW9kaWZpZXJzLnBhc3NpdmVcbiAgKSB7XG4gICAgd2FybihcbiAgICAgICdwYXNzaXZlIGFuZCBwcmV2ZW50IGNhblxcJ3QgYmUgdXNlZCB0b2dldGhlci4gJyArXG4gICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cblxuICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmVcbiAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBicm93c2VyLXNwZWNpZmljLCBidXQgYXQgbGVhc3QgZm9yIG5vdyBicm93c2VycyBhcmVcbiAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gIGlmIChtb2RpZmllcnMucmlnaHQpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J2NvbnRleHRtZW51JzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ2NvbnRleHRtZW51JztcbiAgICAgIGRlbGV0ZSBtb2RpZmllcnMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vZGlmaWVycy5taWRkbGUpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J21vdXNldXAnOihcIiArIG5hbWUgKyBcIilcIjtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnbW91c2V1cCc7XG4gICAgfVxuICB9XG5cbiAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICBpZiAobW9kaWZpZXJzLmNhcHR1cmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignIScsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIGlmIChtb2RpZmllcnMub25jZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCd+JywgbmFtZSwgZHluYW1pYyk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChtb2RpZmllcnMucGFzc2l2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMucGFzc2l2ZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCcmJywgbmFtZSwgZHluYW1pYyk7XG4gIH1cblxuICB2YXIgZXZlbnRzO1xuICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMubmF0aXZlO1xuICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50cyA9IGVsLmV2ZW50cyB8fCAoZWwuZXZlbnRzID0ge30pO1xuICB9XG5cbiAgdmFyIG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKTtcbiAgaWYgKG1vZGlmaWVycyAhPT0gZW1wdHlPYmplY3QpIHtcbiAgICBuZXdIYW5kbGVyLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgfVxuXG4gIHZhciBoYW5kbGVycyA9IGV2ZW50c1tuYW1lXTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgIGltcG9ydGFudCA/IGhhbmRsZXJzLnVuc2hpZnQobmV3SGFuZGxlcikgOiBoYW5kbGVycy5wdXNoKG5ld0hhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7XG4gICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjtcbiAgfVxuXG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFJhd0JpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWVcbikge1xuICByZXR1cm4gZWwucmF3QXR0cnNNYXBbJzonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFsndi1iaW5kOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwW25hbWVdXG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vLyBub3RlOiB0aGlzIG9ubHkgcmVtb3ZlcyB0aGUgYXR0ciBmcm9tIHRoZSBBcnJheSAoYXR0cnNMaXN0KSBzbyB0aGF0IGl0XG4vLyBkb2Vzbid0IGdldCBwcm9jZXNzZWQgYnkgcHJvY2Vzc0F0dHJzLlxuLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4vLyBuZWVkZWQgZHVyaW5nIGNvZGVnZW4uXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJlbW92ZUZyb21NYXBcbikge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJlbW92ZUZyb21NYXApIHtcbiAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGxpc3RbaV07XG4gICAgaWYgKG5hbWUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybiBhdHRyXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmdlU2V0SXRlbSAoXG4gIGl0ZW0sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICB9XG4gICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICBpdGVtLmVuZCA9IHJhbmdlLmVuZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1cbn1cblxuLyogICovXG5cbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgZGlyUkUgPSAvXnYtfF5AfF46LztcbnZhciBmb3JBbGlhc1JFID0gLyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC87XG52YXIgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcbnZhciBkeW5hbWljQXJnUkUgPSAvXlxcWy4qXFxdJC87XG5cbnZhciBhcmdSRSA9IC86KC4qKSQvO1xudmFyIGJpbmRSRSA9IC9eOnxeXFwufF52LWJpbmQ6LztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLlxcXV0rKD89W15cXF1dKiQpL2c7XG5cbnZhciBzbG90UkUgPSAvXnYtc2xvdCg6fCQpfF4jLztcblxudmFyIGxpbmVCcmVha1JFID0gL1tcXHJcXG5dLztcbnZhciB3aGl0ZXNwYWNlUkUkMSA9IC9cXHMrL2c7XG5cbnZhciBpbnZhbGlkQXR0cmlidXRlUkUgPSAvW1xcc1wiJzw+XFwvPV0vO1xuXG52YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChoZS5kZWNvZGUpO1xuXG52YXIgZW1wdHlTbG90U2NvcGVUb2tlbiA9IFwiX2VtcHR5X1wiO1xuXG4vLyBjb25maWd1cmFibGUgc3RhdGVcbnZhciB3YXJuJDE7XG52YXIgZGVsaW1pdGVycztcbnZhciB0cmFuc2Zvcm1zO1xudmFyIHByZVRyYW5zZm9ybXM7XG52YXIgcG9zdFRyYW5zZm9ybXM7XG52YXIgcGxhdGZvcm1Jc1ByZVRhZztcbnZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xudmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO1xudmFyIG1heWJlQ29tcG9uZW50O1xuXG5mdW5jdGlvbiBjcmVhdGVBU1RFbGVtZW50IChcbiAgdGFnLFxuICBhdHRycyxcbiAgcGFyZW50XG4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxLFxuICAgIHRhZzogdGFnLFxuICAgIGF0dHJzTGlzdDogYXR0cnMsXG4gICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgcmF3QXR0cnNNYXA6IHt9LFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDEgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cbiAgcGxhdGZvcm1Jc1ByZVRhZyA9IG9wdGlvbnMuaXNQcmVUYWcgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgbWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG5cbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlO1xuICB2YXIgcm9vdDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgdmFyIGluUHJlID0gZmFsc2U7XG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB3YXJuT25jZSAobXNnLCByYW5nZSkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgd2FybiQxKG1zZywgcmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpO1xuICAgIGlmICghaW5WUHJlICYmICFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyB0cmVlIG1hbmFnZW1lbnRcbiAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgIGlmIChyb290LmlmICYmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwge1xuICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiBcIiArXG4gICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50LnNsb3RTY29wZSkge1xuICAgICAgICAgIC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgLy8gZmluZCBpdCBhcyB0aGUgcHJldiBub2RlLlxuICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdcImRlZmF1bHRcIidcbiAgICAgICAgICA7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwXG4gICAgLy8gZmlsdGVyIG91dCBzY29wZWQgc2xvdHNcbiAgICBlbGVtZW50LmNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuICEoYykuc2xvdFNjb3BlOyB9KTtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG5cbiAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgIGluVlByZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgIGluUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBvc3RUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW1FbmRpbmdXaGl0ZXNwYWNlIChlbCkge1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICBpZiAoIWluUHJlKSB7XG4gICAgICB2YXIgbGFzdE5vZGU7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIChsYXN0Tm9kZSA9IGVsLmNoaWxkcmVuW2VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdKSAmJlxuICAgICAgICBsYXN0Tm9kZS50eXBlID09PSAzICYmXG4gICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLicsXG4gICAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcbiAgICAgICAgJ2l0IHJlbmRlcnMgbXVsdGlwbGUgZWxlbWVudHMuJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VIVE1MKHRlbXBsYXRlLCB7XG4gICAgd2Fybjogd2FybiQxLFxuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgY2FuQmVMZWZ0T3BlblRhZzogb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsXG4gICAgb3V0cHV0U291cmNlUmFuZ2U6IG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSwgc3RhcnQkMSwgZW5kKSB7XG4gICAgICAvLyBjaGVjayBuYW1lc3BhY2UuXG4gICAgICAvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cbiAgICAgIC8vIGhhbmRsZSBJRSBzdmcgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmIG5zID09PSAnc3ZnJykge1xuICAgICAgICBhdHRycyA9IGd1YXJkSUVTVkdCdWcoYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUFTVEVsZW1lbnQodGFnLCBhdHRycywgY3VycmVudFBhcmVudCk7XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGVsZW1lbnQuc3RhcnQgPSBzdGFydCQxO1xuICAgICAgICAgIGVsZW1lbnQuZW5kID0gZW5kO1xuICAgICAgICAgIGVsZW1lbnQucmF3QXR0cnNNYXAgPSBlbGVtZW50LmF0dHJzTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGN1bXVsYXRlZCwgYXR0cikge1xuICAgICAgICAgICAgY3VtdWxhdGVkW2F0dHIubmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgcmV0dXJuIGN1bXVsYXRlZFxuICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgaWYgKGludmFsaWRBdHRyaWJ1dGVSRS50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJJbnZhbGlkIGR5bmFtaWMgYXJndW1lbnQgZXhwcmVzc2lvbjogYXR0cmlidXRlIG5hbWVzIGNhbm5vdCBjb250YWluIFwiICtcbiAgICAgICAgICAgICAgXCJzcGFjZXMsIHF1b3RlcywgPCwgPiwgLyBvciA9LlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUuaW5kZXhPZihcIltcIiksXG4gICAgICAgICAgICAgICAgZW5kOiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZvcmJpZGRlblRhZyhlbGVtZW50KSAmJiAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSkge1xuICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQxKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgICAvLyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXNcbiAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzT25jZShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdW5hcnkpIHtcbiAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGVuZDogZnVuY3Rpb24gZW5kICh0YWcsIHN0YXJ0LCBlbmQkMSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGVsZW1lbnQuZW5kID0gZW5kJDE7XG4gICAgICB9XG4gICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LicsXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmICgodGV4dCA9IHRleHQudHJpbSgpKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgIChcInRleHQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBvdXRzaWRlIHJvb3QgZWxlbWVudCB3aWxsIGJlIGlnbm9yZWQuXCIpLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuO1xuICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7XG4gICAgICAgIHRleHQgPSBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnXG4gICAgICAgIHRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZU9wdGlvbikge1xuICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGluIGNvbmRlbnNlIG1vZGUsIHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBub2RlIGlmIGl0IGNvbnRhaW5zXG4gICAgICAgICAgLy8gbGluZSBicmVhaywgb3RoZXJ3aXNlIGNvbmRlbnNlIHRvIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ID0gJyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gcHJlc2VydmVXaGl0ZXNwYWNlID8gJyAnIDogJyc7XG4gICAgICB9XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBpZiAoIWluUHJlICYmIHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBjb25kZW5zZSBjb25zZWN1dGl2ZSB3aGl0ZXNwYWNlcyBpbnRvIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2hpdGVzcGFjZVJFJDEsICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKHJlcyA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiByZXMuZXhwcmVzc2lvbixcbiAgICAgICAgICAgIHRva2VuczogcmVzLnRva2VucyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCAhY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50ICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAvLyBhZGRpbmcgYW55dGluZyBhcyBhIHNpYmxpbmcgdG8gdGhlIHJvb3Qgbm9kZSBpcyBmb3JiaWRkZW5cbiAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZFxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkID0ge1xuICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBpc0NvbW1lbnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgaWYgKGxlbikge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZm9yKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGVsLml0ZXJhdG9yMiB8fCBlbC5pdGVyYXRvcjE7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgXCJ0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLlwiLFxuICAgICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKSxcbiAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbC5rZXkgPSBleHA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JlZiAoZWwpIHtcbiAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gIGlmIChyZWYpIHtcbiAgICBlbC5yZWYgPSByZWY7XG4gICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICB2YXIgZXhwO1xuICBpZiAoKGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpKSkge1xuICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGV4dGVuZChlbCwgcmVzKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgcmVzLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKS50cmltKCk7XG4gICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgIGlmIChpdGVyYXRvck1hdGNoWzJdKSB7XG4gICAgICByZXMuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICB2YXIgZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnKTtcbiAgaWYgKGV4cCkge1xuICAgIGVsLmlmID0gZXhwO1xuICAgIGFkZElmQ29uZGl0aW9uKGVsLCB7XG4gICAgICBleHA6IGV4cCxcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgZWwuZWxzZSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7XG4gIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcbiAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICBleHA6IGVsLmVsc2VpZixcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDEoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgY2hpbGRyZW5baV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbi8vIGhhbmRsZSBjb250ZW50IGJlaW5nIHBhc3NlZCB0byBhIGNvbXBvbmVudCBhcyBzbG90LFxuLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG5mdW5jdGlvbiBwcm9jZXNzU2xvdENvbnRlbnQgKGVsKSB7XG4gIHZhciBzbG90U2NvcGU7XG4gIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICBzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2NvcGUnKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90U2NvcGUpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCJ0aGUgXFxcInNjb3BlXFxcIiBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBzbG90cyBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgXCIgK1xuICAgICAgICBcInJlcGxhY2VkIGJ5IFxcXCJzbG90LXNjb3BlXFxcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXFxcInNsb3Qtc2NvcGVcXFwiIGF0dHJpYnV0ZSBcIiArXG4gICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgXCJkZW5vdGUgc2NvcGVkIHNsb3RzLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gIH0gZWxzZSBpZiAoKHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJykpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPFwiICsgKGVsLnRhZykgKyBcIj4gXCIgK1xuICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2xvdC1zY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7XG4gIH1cblxuICAvLyBzbG90PVwieHh4XCJcbiAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGVsLnNsb3RUYXJnZXQgfHwgZWwuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5wYXJlbnQgJiYgIW1heWJlQ29tcG9uZW50KGVsLnBhcmVudCkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGUgdi1zbG90PiBjYW4gb25seSBhcHBlYXIgYXQgdGhlIHJvb3QgbGV2ZWwgaW5zaWRlIFwiICtcbiAgICAgICAgICAgICAgXCJ0aGUgcmVjZWl2aW5nIHRoZSBjb21wb25lbnRcIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyk7XG4gICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljID0gcmVmLmR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RUYXJnZXQgPSBuYW1lO1xuICAgICAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47IC8vIGZvcmNlIGl0IGludG8gYSBzY29wZWQgc2xvdCBmb3IgcGVyZlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB2LXNsb3Qgb24gY29tcG9uZW50LCBkZW5vdGVzIGRlZmF1bHQgc2xvdFxuICAgICAgdmFyIHNsb3RCaW5kaW5nJDEgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZyQxKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFtYXliZUNvbXBvbmVudChlbCkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJ2LXNsb3QgY2FuIG9ubHkgYmUgdXNlZCBvbiBjb21wb25lbnRzIG9yIDx0ZW1wbGF0ZT4uXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zbG90U2NvcGUgfHwgZWwuc2xvdFRhcmdldCkge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJUbyBhdm9pZCBzY29wZSBhbWJpZ3VpdHksIHRoZSBkZWZhdWx0IHNsb3Qgc2hvdWxkIGFsc28gdXNlIFwiICtcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGU+IHN5bnRheCB3aGVuIHRoZXJlIGFyZSBvdGhlciBuYW1lZCBzbG90cy5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiB0byBpdHMgZGVmYXVsdCBzbG90XG4gICAgICAgIHZhciBzbG90cyA9IGVsLnNjb3BlZFNsb3RzIHx8IChlbC5zY29wZWRTbG90cyA9IHt9KTtcbiAgICAgICAgdmFyIHJlZiQxID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmckMSk7XG4gICAgICAgIHZhciBuYW1lJDEgPSByZWYkMS5uYW1lO1xuICAgICAgICB2YXIgZHluYW1pYyQxID0gcmVmJDEuZHluYW1pYztcbiAgICAgICAgdmFyIHNsb3RDb250YWluZXIgPSBzbG90c1tuYW1lJDFdID0gY3JlYXRlQVNURWxlbWVudCgndGVtcGxhdGUnLCBbXSwgZWwpO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXQgPSBuYW1lJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICBpZiAoIWMuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICBjLnBhcmVudCA9IHNsb3RDb250YWluZXI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmckMS52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuO1xuICAgICAgICAvLyByZW1vdmUgY2hpbGRyZW4gYXMgdGhleSBhcmUgcmV0dXJuZWQgZnJvbSBzY29wZWRTbG90cyBub3dcbiAgICAgICAgZWwuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgLy8gbWFyayBlbCBub24tcGxhaW4gc28gZGF0YSBnZXRzIGdlbmVyYXRlZFxuICAgICAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTbG90TmFtZSAoYmluZGluZykge1xuICB2YXIgbmFtZSA9IGJpbmRpbmcubmFtZS5yZXBsYWNlKHNsb3RSRSwgJycpO1xuICBpZiAoIW5hbWUpIHtcbiAgICBpZiAoYmluZGluZy5uYW1lWzBdICE9PSAnIycpIHtcbiAgICAgIG5hbWUgPSAnZGVmYXVsdCc7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwidi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuXCIsXG4gICAgICAgIGJpbmRpbmdcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkeW5hbWljQXJnUkUudGVzdChuYW1lKVxuICAgIC8vIGR5bmFtaWMgW25hbWVdXG4gICAgPyB7IG5hbWU6IG5hbWUuc2xpY2UoMSwgLTEpLCBkeW5hbWljOiB0cnVlIH1cbiAgICAvLyBzdGF0aWMgbmFtZVxuICAgIDogeyBuYW1lOiAoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpLCBkeW5hbWljOiBmYWxzZSB9XG59XG5cbi8vIGhhbmRsZSA8c2xvdC8+IG91dGxldHNcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmtleSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgXCIgK1xuICAgICAgICBcImFuZCBjYW4gcG9zc2libHkgZXhwYW5kIGludG8gbXVsdGlwbGUgZWxlbWVudHMuIFwiICtcbiAgICAgICAgXCJVc2UgdGhlIGtleSBvbiBhIHdyYXBwaW5nIGVsZW1lbnQgaW5zdGVhZC5cIixcbiAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NvbXBvbmVudCAoZWwpIHtcbiAgdmFyIGJpbmRpbmc7XG4gIGlmICgoYmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnaXMnKSkpIHtcbiAgICBlbC5jb21wb25lbnQgPSBiaW5kaW5nO1xuICB9XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAnaW5saW5lLXRlbXBsYXRlJykgIT0gbnVsbCkge1xuICAgIGVsLmlubGluZVRlbXBsYXRlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgaSwgbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIG1vZGlmaWVycywgc3luY0dlbiwgaXNEeW5hbWljO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUucmVwbGFjZShkaXJSRSwgJycpKTtcbiAgICAgIC8vIHN1cHBvcnQgLmZvbyBzaG9ydGhhbmQgc3ludGF4IGZvciB0aGUgLnByb3AgbW9kaWZpZXJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIChcIlRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFxcXCJ2LWJpbmQ6XCIgKyBuYW1lICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc3luYykge1xuICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKTtcbiAgICAgICAgICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMSxcbiAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChoeXBoZW5hdGUobmFtZSkgIT09IGNhbWVsaXplKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGh5cGhlbmF0ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHdhcm4kMSxcbiAgICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBoYW5kbGVyIHcvIGR5bmFtaWMgZXZlbnQgbmFtZVxuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcIlxcXCJ1cGRhdGU6XFxcIisoXCIgKyBuYW1lICsgXCIpXCIpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDEsXG4gICAgICAgICAgICAgICAgbGlzdFtpXSxcbiAgICAgICAgICAgICAgICB0cnVlIC8vIGR5bmFtaWNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnByb3ApIHx8IChcbiAgICAgICAgICAhZWwuY29tcG9uZW50ICYmIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKVxuICAgICAgICApKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDEsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICB9IGVsc2UgeyAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG4gICAgICAgIC8vIHBhcnNlIGFyZ1xuICAgICAgICB2YXIgYXJnTWF0Y2ggPSBuYW1lLm1hdGNoKGFyZ1JFKTtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ01hdGNoICYmIGFyZ01hdGNoWzFdO1xuICAgICAgICBpc0R5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0FyZ1JFLnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIGlzRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgaXNEeW5hbWljLCBtb2RpZmllcnMsIGxpc3RbaV0pO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgY2hlY2tGb3JBbGlhc01vZGVsKGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicsXG4gICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpLCBsaXN0W2ldKTtcbiAgICAgIC8vICM2ODg3IGZpcmVmb3ggZG9lc24ndCB1cGRhdGUgbXV0ZWQgc3RhdGUgaWYgc2V0IHZpYSBhdHRyaWJ1dGVcbiAgICAgIC8vIGV2ZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgZWxlbWVudCBjcmVhdGlvblxuICAgICAgaWYgKCFlbC5jb21wb25lbnQgJiZcbiAgICAgICAgICBuYW1lID09PSAnbXV0ZWQnICYmXG4gICAgICAgICAgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG4gICAgICAgIGFkZFByb3AoZWwsIG5hbWUsICd0cnVlJywgbGlzdFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzIChuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQxKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbi8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkge1xuICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1N0YXRpY0tleTtcbnZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWc7XG5cbnZhciBnZW5TdGF0aWNLZXlzQ2FjaGVkID0gY2FjaGVkKGdlblN0YXRpY0tleXMkMSk7XG5cbi8qKlxuICogR29hbCBvZiB0aGUgb3B0aW1pemVyOiB3YWxrIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgQVNUIHRyZWVcbiAqIGFuZCBkZXRlY3Qgc3ViLXRyZWVzIHRoYXQgYXJlIHB1cmVseSBzdGF0aWMsIGkuZS4gcGFydHMgb2ZcbiAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG4gKlxuICogT25jZSB3ZSBkZXRlY3QgdGhlc2Ugc3ViLXRyZWVzLCB3ZSBjYW46XG4gKlxuICogMS4gSG9pc3QgdGhlbSBpbnRvIGNvbnN0YW50cywgc28gdGhhdCB3ZSBubyBsb25nZXIgbmVlZCB0b1xuICogICAgY3JlYXRlIGZyZXNoIG5vZGVzIGZvciB0aGVtIG9uIGVhY2ggcmUtcmVuZGVyO1xuICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIG9wdGltaXplIChyb290LCBvcHRpb25zKSB7XG4gIGlmICghcm9vdCkgeyByZXR1cm4gfVxuICBpc1N0YXRpY0tleSA9IGdlblN0YXRpY0tleXNDYWNoZWQob3B0aW9ucy5zdGF0aWNLZXlzIHx8ICcnKTtcbiAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICAvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuICBtYXJrU3RhdGljJDEocm9vdCk7XG4gIC8vIHNlY29uZCBwYXNzOiBtYXJrIHN0YXRpYyByb290cy5cbiAgbWFya1N0YXRpY1Jvb3RzKHJvb3QsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyQxIChrZXlzKSB7XG4gIHJldHVybiBtYWtlTWFwKFxuICAgICd0eXBlLHRhZyxhdHRyc0xpc3QsYXR0cnNNYXAscGxhaW4scGFyZW50LGNoaWxkcmVuLGF0dHJzLHN0YXJ0LGVuZCxyYXdBdHRyc01hcCcgK1xuICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuICApXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMkMSAobm9kZSkge1xuICBub2RlLnN0YXRpYyA9IGlzU3RhdGljKG5vZGUpO1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgLy8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG4gICAgLy8gMS4gY29tcG9uZW50cyBub3QgYWJsZSB0byBtdXRhdGUgc2xvdCBub2Rlc1xuICAgIC8vIDIuIHN0YXRpYyBzbG90IGNvbnRlbnQgZmFpbHMgZm9yIGhvdC1yZWxvYWRpbmdcbiAgICBpZiAoXG4gICAgICAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJlxuICAgICAgbm9kZS50YWcgIT09ICdzbG90JyAmJlxuICAgICAgbm9kZS5hdHRyc01hcFsnaW5saW5lLXRlbXBsYXRlJ10gPT0gbnVsbFxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICBtYXJrU3RhdGljJDEoY2hpbGQpO1xuICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcbiAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgdmFyIGJsb2NrID0gbm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaztcbiAgICAgICAgbWFya1N0YXRpYyQxKGJsb2NrKTtcbiAgICAgICAgaWYgKCFibG9jay5zdGF0aWMpIHtcbiAgICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNSb290cyAobm9kZSwgaXNJbkZvcikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgaWYgKG5vZGUuc3RhdGljIHx8IG5vZGUub25jZSkge1xuICAgICAgbm9kZS5zdGF0aWNJbkZvciA9IGlzSW5Gb3I7XG4gICAgfVxuICAgIC8vIEZvciBhIG5vZGUgdG8gcXVhbGlmeSBhcyBhIHN0YXRpYyByb290LCBpdCBzaG91bGQgaGF2ZSBjaGlsZHJlbiB0aGF0XG4gICAgLy8gYXJlIG5vdCBqdXN0IHN0YXRpYyB0ZXh0LiBPdGhlcndpc2UgdGhlIGNvc3Qgb2YgaG9pc3Rpbmcgb3V0IHdpbGxcbiAgICAvLyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgYW5kIGl0J3MgYmV0dGVyIG9mZiB0byBqdXN0IGFsd2F5cyByZW5kZXIgaXQgZnJlc2guXG4gICAgaWYgKG5vZGUuc3RhdGljICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmICEoXG4gICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAzXG4gICAgKSkge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gdHJ1ZTtcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuY2hpbGRyZW5baV0sIGlzSW5Gb3IgfHwgISFub2RlLmZvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrLCBpc0luRm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTdGF0aWMgKG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMikgeyAvLyBleHByZXNzaW9uXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKG5vZGUudHlwZSA9PT0gMykgeyAvLyB0ZXh0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gISEobm9kZS5wcmUgfHwgKFxuICAgICFub2RlLmhhc0JpbmRpbmdzICYmIC8vIG5vIGR5bmFtaWMgYmluZGluZ3NcbiAgICAhbm9kZS5pZiAmJiAhbm9kZS5mb3IgJiYgLy8gbm90IHYtaWYgb3Igdi1mb3Igb3Igdi1lbHNlXG4gICAgIWlzQnVpbHRJblRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgYnVpbHQtaW5cbiAgICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGNvbXBvbmVudFxuICAgICFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSAmJlxuICAgIE9iamVjdC5rZXlzKG5vZGUpLmV2ZXJ5KGlzU3RhdGljS2V5KVxuICApKVxufVxuXG5mdW5jdGlvbiBpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciAobm9kZSkge1xuICB3aGlsZSAobm9kZS5wYXJlbnQpIHtcbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKG5vZGUudGFnICE9PSAndGVtcGxhdGUnKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbnZhciBmbkV4cFJFID0gL14oW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqKD86W1xcdyRdKyk/XFxzKlxcKC87XG52YXIgZm5JbnZva2VSRSA9IC9cXChbXildKj9cXCk7KiQvO1xudmFyIHNpbXBsZVBhdGhSRSA9IC9eW0EtWmEtel8kXVtcXHckXSooPzpcXC5bQS1aYS16XyRdW1xcdyRdKnxcXFsnW14nXSo/J118XFxbXCJbXlwiXSo/XCJdfFxcW1xcZCtdfFxcW1tBLVphLXpfJF1bXFx3JF0qXSkqJC87XG5cbi8vIEtleWJvYXJkRXZlbnQua2V5Q29kZSBhbGlhc2VzXG52YXIga2V5Q29kZXMgPSB7XG4gIGVzYzogMjcsXG4gIHRhYjogOSxcbiAgZW50ZXI6IDEzLFxuICBzcGFjZTogMzIsXG4gIHVwOiAzOCxcbiAgbGVmdDogMzcsXG4gIHJpZ2h0OiAzOSxcbiAgZG93bjogNDAsXG4gICdkZWxldGUnOiBbOCwgNDZdXG59O1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleSBhbGlhc2VzXG52YXIga2V5TmFtZXMgPSB7XG4gIC8vICM3ODgwOiBJRTExIGFuZCBFZGdlIHVzZSBgRXNjYCBmb3IgRXNjYXBlIGtleSBuYW1lLlxuICBlc2M6IFsnRXNjJywgJ0VzY2FwZSddLFxuICB0YWI6ICdUYWInLFxuICBlbnRlcjogJ0VudGVyJyxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgU3BhY2ViYXJgIGZvciBTcGFjZSBrZXkgbmFtZS5cbiAgc3BhY2U6IFsnICcsICdTcGFjZWJhciddLFxuICAvLyAjNzgwNjogSUUxMSB1c2VzIGtleSBuYW1lcyB3aXRob3V0IGBBcnJvd2AgcHJlZml4IGZvciBhcnJvdyBrZXlzLlxuICB1cDogWydVcCcsICdBcnJvd1VwJ10sXG4gIGxlZnQ6IFsnTGVmdCcsICdBcnJvd0xlZnQnXSxcbiAgcmlnaHQ6IFsnUmlnaHQnLCAnQXJyb3dSaWdodCddLFxuICBkb3duOiBbJ0Rvd24nLCAnQXJyb3dEb3duJ10sXG4gIC8vICM5MTEyOiBJRTExIHVzZXMgYERlbGAgZm9yIERlbGV0ZSBrZXkgbmFtZS5cbiAgJ2RlbGV0ZSc6IFsnQmFja3NwYWNlJywgJ0RlbGV0ZScsICdEZWwnXVxufTtcblxuLy8gIzQ4Njg6IG1vZGlmaWVycyB0aGF0IHByZXZlbnQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgbGlzdGVuZXJcbi8vIG5lZWQgdG8gZXhwbGljaXRseSByZXR1cm4gbnVsbCBzbyB0aGF0IHdlIGNhbiBkZXRlcm1pbmUgd2hldGhlciB0byByZW1vdmVcbi8vIHRoZSBsaXN0ZW5lciBmb3IgLm9uY2VcbnZhciBnZW5HdWFyZCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHsgcmV0dXJuIChcImlmKFwiICsgY29uZGl0aW9uICsgXCIpcmV0dXJuIG51bGw7XCIpOyB9O1xuXG52YXIgbW9kaWZpZXJDb2RlID0ge1xuICBzdG9wOiAnJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOycsXG4gIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuICBzZWxmOiBnZW5HdWFyZChcIiRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0XCIpLFxuICBjdHJsOiBnZW5HdWFyZChcIiEkZXZlbnQuY3RybEtleVwiKSxcbiAgc2hpZnQ6IGdlbkd1YXJkKFwiISRldmVudC5zaGlmdEtleVwiKSxcbiAgYWx0OiBnZW5HdWFyZChcIiEkZXZlbnQuYWx0S2V5XCIpLFxuICBtZXRhOiBnZW5HdWFyZChcIiEkZXZlbnQubWV0YUtleVwiKSxcbiAgbGVmdDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMFwiKSxcbiAgbWlkZGxlOiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAxXCIpLFxuICByaWdodDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMlwiKVxufTtcblxuZnVuY3Rpb24gZ2VuSGFuZGxlcnMgKFxuICBldmVudHMsXG4gIGlzTmF0aXZlXG4pIHtcbiAgdmFyIHByZWZpeCA9IGlzTmF0aXZlID8gJ25hdGl2ZU9uOicgOiAnb246JztcbiAgdmFyIHN0YXRpY0hhbmRsZXJzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNIYW5kbGVycyA9IFwiXCI7XG4gIGZvciAodmFyIG5hbWUgaW4gZXZlbnRzKSB7XG4gICAgdmFyIGhhbmRsZXJDb2RlID0gZ2VuSGFuZGxlcihldmVudHNbbmFtZV0pO1xuICAgIGlmIChldmVudHNbbmFtZV0gJiYgZXZlbnRzW25hbWVdLmR5bmFtaWMpIHtcbiAgICAgIGR5bmFtaWNIYW5kbGVycyArPSBuYW1lICsgXCIsXCIgKyBoYW5kbGVyQ29kZSArIFwiLFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNIYW5kbGVycyArPSBcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCI6XCIgKyBoYW5kbGVyQ29kZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNIYW5kbGVycyA9IFwie1wiICsgKHN0YXRpY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNIYW5kbGVycykge1xuICAgIHJldHVybiBwcmVmaXggKyBcIl9kKFwiICsgc3RhdGljSGFuZGxlcnMgKyBcIixbXCIgKyAoZHluYW1pY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJlZml4ICsgc3RhdGljSGFuZGxlcnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5IYW5kbGVyIChoYW5kbGVyKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiAnZnVuY3Rpb24oKXt9J1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICByZXR1cm4gKFwiW1wiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgXCJdXCIpXG4gIH1cblxuICB2YXIgaXNNZXRob2RQYXRoID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgdmFyIGlzRnVuY3Rpb25JbnZvY2F0aW9uID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZS5yZXBsYWNlKGZuSW52b2tlUkUsICcnKSk7XG5cbiAgaWYgKCFoYW5kbGVyLm1vZGlmaWVycykge1xuICAgIGlmIChpc01ldGhvZFBhdGggfHwgaXNGdW5jdGlvbkV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybiBoYW5kbGVyLnZhbHVlXG4gICAgfVxuICAgIHJldHVybiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgKGlzRnVuY3Rpb25JbnZvY2F0aW9uID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpKSA6IGhhbmRsZXIudmFsdWUpICsgXCJ9XCIpIC8vIGlubGluZSBzdGF0ZW1lbnRcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29kZSA9ICcnO1xuICAgIHZhciBnZW5Nb2RpZmllckNvZGUgPSAnJztcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgaWYgKG1vZGlmaWVyQ29kZVtrZXldKSB7XG4gICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBtb2RpZmllckNvZGVba2V5XTtcbiAgICAgICAgLy8gbGVmdC9yaWdodFxuICAgICAgICBpZiAoa2V5Q29kZXNba2V5XSkge1xuICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2V4YWN0Jykge1xuICAgICAgICB2YXIgbW9kaWZpZXJzID0gKGhhbmRsZXIubW9kaWZpZXJzKTtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IGdlbkd1YXJkKFxuICAgICAgICAgIFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gIW1vZGlmaWVyc1trZXlNb2RpZmllcl07IH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gKFwiJGV2ZW50LlwiICsga2V5TW9kaWZpZXIgKyBcIktleVwiKTsgfSlcbiAgICAgICAgICAgIC5qb2luKCd8fCcpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICBjb2RlICs9IGdlbktleUZpbHRlcihrZXlzKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIG1vZGlmaWVycyBsaWtlIHByZXZlbnQgYW5kIHN0b3AgZ2V0IGV4ZWN1dGVkIGFmdGVyIGtleSBmaWx0ZXJpbmdcbiAgICBpZiAoZ2VuTW9kaWZpZXJDb2RlKSB7XG4gICAgICBjb2RlICs9IGdlbk1vZGlmaWVyQ29kZTtcbiAgICB9XG4gICAgdmFyIGhhbmRsZXJDb2RlID0gaXNNZXRob2RQYXRoXG4gICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKCRldmVudClcIilcbiAgICAgIDogaXNGdW5jdGlvbkV4cHJlc3Npb25cbiAgICAgICAgPyAoXCJyZXR1cm4gKFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIpKCRldmVudClcIilcbiAgICAgICAgOiBpc0Z1bmN0aW9uSW52b2NhdGlvblxuICAgICAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpKVxuICAgICAgICAgIDogaGFuZGxlci52YWx1ZTtcbiAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIGNvZGUgKyBoYW5kbGVyQ29kZSArIFwifVwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbktleUZpbHRlciAoa2V5cykge1xuICByZXR1cm4gKFxuICAgIC8vIG1ha2Ugc3VyZSB0aGUga2V5IGZpbHRlcnMgb25seSBhcHBseSB0byBLZXlib2FyZEV2ZW50c1xuICAgIC8vICM5NDQxOiBjYW4ndCB1c2UgJ2tleUNvZGUnIGluICRldmVudCBiZWNhdXNlIENocm9tZSBhdXRvZmlsbCBmaXJlcyBmYWtlXG4gICAgLy8ga2V5IGV2ZW50cyB0aGF0IGRvIG5vdCBoYXZlIGtleUNvZGUgcHJvcGVydHkuLi5cbiAgICBcImlmKCEkZXZlbnQudHlwZS5pbmRleE9mKCdrZXknKSYmXCIgK1xuICAgIChrZXlzLm1hcChnZW5GaWx0ZXJDb2RlKS5qb2luKCcmJicpKSArIFwiKXJldHVybiBudWxsO1wiXG4gIClcbn1cblxuZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gIHZhciBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcbiAgaWYgKGtleVZhbCkge1xuICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICB9XG4gIHZhciBrZXlDb2RlID0ga2V5Q29kZXNba2V5XTtcbiAgdmFyIGtleU5hbWUgPSBrZXlOYW1lc1trZXldO1xuICByZXR1cm4gKFxuICAgIFwiX2soJGV2ZW50LmtleUNvZGUsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXkpKSArIFwiLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5Q29kZSkpICsgXCIsXCIgK1xuICAgIFwiJGV2ZW50LmtleSxcIiArXG4gICAgXCJcIiArIChKU09OLnN0cmluZ2lmeShrZXlOYW1lKSkgK1xuICAgIFwiKVwiXG4gIClcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG9uIChlbCwgZGlyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRpci5tb2RpZmllcnMpIHtcbiAgICB3YXJuKFwidi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLlwiKTtcbiAgfVxuICBlbC53cmFwTGlzdGVuZXJzID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcIl9nKFwiICsgY29kZSArIFwiLFwiICsgKGRpci52YWx1ZSkgKyBcIilcIik7IH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDEgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoXCJfYihcIiArIGNvZGUgKyBcIiwnXCIgKyAoZWwudGFnKSArIFwiJyxcIiArIChkaXIudmFsdWUpICsgXCIsXCIgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnByb3AgPyAndHJ1ZScgOiAnZmFsc2UnKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMuc3luYyA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBiYXNlRGlyZWN0aXZlcyA9IHtcbiAgb246IG9uLFxuICBiaW5kOiBiaW5kJDEsXG4gIGNsb2FrOiBub29wXG59O1xuXG4vKiAgKi9cblxuXG5cblxuXG52YXIgQ29kZWdlblN0YXRlID0gZnVuY3Rpb24gQ29kZWdlblN0YXRlIChvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMud2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdGhpcy50cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Db2RlJyk7XG4gIHRoaXMuZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICB0aGlzLmRpcmVjdGl2ZXMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiYXNlRGlyZWN0aXZlcyksIG9wdGlvbnMuZGlyZWN0aXZlcyk7XG4gIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICB0aGlzLm1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuICB0aGlzLm9uY2VJZCA9IDA7XG4gIHRoaXMuc3RhdGljUmVuZGVyRm5zID0gW107XG4gIHRoaXMucHJlID0gZmFsc2U7XG59O1xuXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGUgKFxuICBhc3QsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgc3RhdGUgPSBuZXcgQ29kZWdlblN0YXRlKG9wdGlvbnMpO1xuICB2YXIgY29kZSA9IGFzdCA/IGdlbkVsZW1lbnQoYXN0LCBzdGF0ZSkgOiAnX2MoXCJkaXZcIiknO1xuICByZXR1cm4ge1xuICAgIHJlbmRlcjogKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyBjb2RlICsgXCJ9XCIpLFxuICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRWxlbWVudCAoZWwsIHN0YXRlKSB7XG4gIGlmIChlbC5wYXJlbnQpIHtcbiAgICBlbC5wcmUgPSBlbC5wcmUgfHwgZWwucGFyZW50LnByZTtcbiAgfVxuXG4gIGlmIChlbC5zdGF0aWNSb290ICYmICFlbC5zdGF0aWNQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbk9uY2UoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQgJiYgIXN0YXRlLnByZSkge1xuICAgIHJldHVybiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd2b2lkIDAnXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICByZXR1cm4gZ2VuU2xvdChlbCwgc3RhdGUpXG4gIH0gZWxzZSB7XG4gICAgLy8gY29tcG9uZW50IG9yIGVsZW1lbnRcbiAgICB2YXIgY29kZTtcbiAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICBjb2RlID0gZ2VuQ29tcG9uZW50KGVsLmNvbXBvbmVudCwgZWwsIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRhdGE7XG4gICAgICBpZiAoIWVsLnBsYWluIHx8IChlbC5wcmUgJiYgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpKSkge1xuICAgICAgICBkYXRhID0gZ2VuRGF0YShlbCwgc3RhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICAgICAgY29kZSA9IFwiX2MoJ1wiICsgKGVsLnRhZykgKyBcIidcIiArIChkYXRhID8gKFwiLFwiICsgZGF0YSkgOiAnJykgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLnRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS50cmFuc2Zvcm1zW2ldKGVsLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVcbiAgfVxufVxuXG4vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgLy8gU29tZSBlbGVtZW50cyAodGVtcGxhdGVzKSBuZWVkIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSBpbnNpZGUgb2YgYSB2LXByZVxuICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0b1xuICAvLyB3cmFwIGEgc3RhdGUgY2hhbmdlIGFuZCByZXNldCBpdCB1cG9uIGV4aXRpbmcgdGhlIHByZSBub2RlLlxuICB2YXIgb3JpZ2luYWxQcmVTdGF0ZSA9IHN0YXRlLnByZTtcbiAgaWYgKGVsLnByZSkge1xuICAgIHN0YXRlLnByZSA9IGVsLnByZTtcbiAgfVxuICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgc3RhdGUucHJlID0gb3JpZ2luYWxQcmVTdGF0ZTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRlLnN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRlLndhcm4oXG4gICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ11cbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gICAgfVxuICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCIsXCIgKyAoc3RhdGUub25jZUlkKyspICsgXCIsXCIgKyBrZXkgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICBjb25kaXRpb25zLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gIH1cblxuICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgIHJldHVybiAoXCIoXCIgKyAoY29uZGl0aW9uLmV4cCkgKyBcIik/XCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSArIFwiOlwiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBhbHRHZW5cbiAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgIDogZWwub25jZVxuICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKVxuICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRIZWxwZXJcbikge1xuICB2YXIgZXhwID0gZWwuZm9yO1xuICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkgJiZcbiAgICBlbC50YWcgIT09ICdzbG90JyAmJlxuICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICFlbC5rZXlcbiAgKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyBhbGlhcyArIFwiIGluIFwiICsgZXhwICsgXCJcXFwiPjogY29tcG9uZW50IGxpc3RzIHJlbmRlcmVkIHdpdGggXCIgK1xuICAgICAgXCJ2LWZvciBzaG91bGQgaGF2ZSBleHBsaWNpdCBrZXlzLiBcIiArXG4gICAgICBcIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uXCIsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXSxcbiAgICAgIHRydWUgLyogdGlwICovXG4gICAgKTtcbiAgfVxuXG4gIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gKGFsdEhlbHBlciB8fCAnX2wnKSArIFwiKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKChhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKSkgK1xuICAgICd9KSdcbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSAoZWwsIHN0YXRlKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCwgc3RhdGUpO1xuICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAvLyBrZXlcbiAgaWYgKGVsLmtleSkge1xuICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICB9XG4gIC8vIHJlZlxuICBpZiAoZWwucmVmKSB7XG4gICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gIH1cbiAgLy8gcHJlXG4gIGlmIChlbC5wcmUpIHtcbiAgICBkYXRhICs9IFwicHJlOnRydWUsXCI7XG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gIH1cbiAgLy8gbW9kdWxlIGRhdGEgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTtcbiAgfVxuICAvLyBhdHRyaWJ1dGVzXG4gIGlmIChlbC5hdHRycykge1xuICAgIGRhdGEgKz0gXCJhdHRyczpcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCIsXCI7XG4gIH1cbiAgLy8gRE9NIHByb3BzXG4gIGlmIChlbC5wcm9wcykge1xuICAgIGRhdGEgKz0gXCJkb21Qcm9wczpcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCIsXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UpKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUpKSArIFwiLFwiO1xuICB9XG4gIC8vIHNsb3QgdGFyZ2V0XG4gIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNsb3RUYXJnZXQgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgIGRhdGEgKz0gKGdlblNjb3BlZFNsb3RzKGVsLCBlbC5zY29wZWRTbG90cywgc3RhdGUpKSArIFwiLFwiO1xuICB9XG4gIC8vIGNvbXBvbmVudCB2LW1vZGVsXG4gIGlmIChlbC5tb2RlbCkge1xuICAgIGRhdGEgKz0gXCJtb2RlbDp7dmFsdWU6XCIgKyAoZWwubW9kZWwudmFsdWUpICsgXCIsY2FsbGJhY2s6XCIgKyAoZWwubW9kZWwuY2FsbGJhY2spICsgXCIsZXhwcmVzc2lvbjpcIiArIChlbC5tb2RlbC5leHByZXNzaW9uKSArIFwifSxcIjtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkeW5hbWljIGFyZ3VtZW50IHdyYXBcbiAgLy8gdi1iaW5kIHdpdGggZHluYW1pYyBhcmd1bWVudHMgbXVzdCBiZSBhcHBsaWVkIHVzaW5nIHRoZSBzYW1lIHYtYmluZCBvYmplY3RcbiAgLy8gbWVyZ2UgaGVscGVyIHNvIHRoYXQgY2xhc3Mvc3R5bGUvbXVzdFVzZVByb3AgYXR0cnMgYXJlIGhhbmRsZWQgY29ycmVjdGx5LlxuICBpZiAoZWwuZHluYW1pY0F0dHJzKSB7XG4gICAgZGF0YSA9IFwiX2IoXCIgKyBkYXRhICsgXCIsXFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCIgKyAoZ2VuUHJvcHMoZWwuZHluYW1pY0F0dHJzKSkgKyBcIilcIjtcbiAgfVxuICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwRGF0YSkge1xuICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcbiAgfVxuICAvLyB2LW9uIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcExpc3RlbmVycykge1xuICAgIGRhdGEgPSBlbC53cmFwTGlzdGVuZXJzKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG4gIGlmICghZGlycykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG4gIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICB2YXIgZ2VuID0gc3RhdGUuZGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgaWYgKGdlbikge1xuICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgIG5lZWRSdW50aW1lID0gISFnZW4oZWwsIGRpciwgc3RhdGUud2Fybik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcIiArIChkaXIuaXNEeW5hbWljQXJnID8gZGlyLmFyZyA6IChcIlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSkpIDogJycpICsgKGRpci5tb2RpZmllcnMgPyAoXCIsbW9kaWZpZXJzOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyBcIn0sXCI7XG4gICAgfVxuICB9XG4gIGlmIChoYXNSdW50aW1lKSB7XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnXSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwsIHN0YXRlKSB7XG4gIHZhciBhc3QgPSBlbC5jaGlsZHJlblswXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKFxuICAgIGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMVxuICApKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgICdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nLFxuICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICk7XG4gIH1cbiAgaWYgKGFzdCAmJiBhc3QudHlwZSA9PT0gMSkge1xuICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKFxuICBlbCxcbiAgc2xvdHMsXG4gIHN0YXRlXG4pIHtcbiAgLy8gYnkgZGVmYXVsdCBzY29wZWQgc2xvdHMgYXJlIGNvbnNpZGVyZWQgXCJzdGFibGVcIiwgdGhpcyBhbGxvd3MgY2hpbGRcbiAgLy8gY29tcG9uZW50cyB3aXRoIG9ubHkgc2NvcGVkIHNsb3RzIHRvIHNraXAgZm9yY2VkIHVwZGF0ZXMgZnJvbSBwYXJlbnQuXG4gIC8vIGJ1dCBpbiBzb21lIGNhc2VzIHdlIGhhdmUgdG8gYmFpbC1vdXQgb2YgdGhpcyBvcHRpbWl6YXRpb25cbiAgLy8gZm9yIGV4YW1wbGUgaWYgdGhlIHNsb3QgY29udGFpbnMgZHluYW1pYyBuYW1lcywgaGFzIHYtaWYgb3Igdi1mb3Igb24gdGhlbS4uLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9IGVsLmZvciB8fCBPYmplY3Qua2V5cyhzbG90cykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHNsb3QgPSBzbG90c1trZXldO1xuICAgIHJldHVybiAoXG4gICAgICBzbG90LnNsb3RUYXJnZXREeW5hbWljIHx8XG4gICAgICBzbG90LmlmIHx8XG4gICAgICBzbG90LmZvciB8fFxuICAgICAgY29udGFpbnNTbG90Q2hpbGQoc2xvdCkgLy8gaXMgcGFzc2luZyBkb3duIHNsb3QgZnJvbSBwYXJlbnQgd2hpY2ggbWF5IGJlIGR5bmFtaWNcbiAgICApXG4gIH0pO1xuXG4gIC8vICM5NTM0OiBpZiBhIGNvbXBvbmVudCB3aXRoIHNjb3BlZCBzbG90cyBpcyBpbnNpZGUgYSBjb25kaXRpb25hbCBicmFuY2gsXG4gIC8vIGl0J3MgcG9zc2libGUgZm9yIHRoZSBzYW1lIGNvbXBvbmVudCB0byBiZSByZXVzZWQgYnV0IHdpdGggZGlmZmVyZW50XG4gIC8vIGNvbXBpbGVkIHNsb3QgY29udGVudC4gVG8gYXZvaWQgdGhhdCwgd2UgZ2VuZXJhdGUgYSB1bmlxdWUga2V5IGJhc2VkIG9uXG4gIC8vIHRoZSBnZW5lcmF0ZWQgY29kZSBvZiBhbGwgdGhlIHNsb3QgY29udGVudHMuXG4gIHZhciBuZWVkc0tleSA9ICEhZWwuaWY7XG5cbiAgLy8gT1Igd2hlbiBpdCBpcyBpbnNpZGUgYW5vdGhlciBzY29wZWQgc2xvdCBvciB2LWZvciAodGhlIHJlYWN0aXZpdHkgbWF5IGJlXG4gIC8vIGRpc2Nvbm5lY3RlZCBkdWUgdG8gdGhlIGludGVybWVkaWF0ZSBzY29wZSB2YXJpYWJsZSlcbiAgLy8gIzk0MzgsICM5NTA2XG4gIC8vIFRPRE86IHRoaXMgY2FuIGJlIGZ1cnRoZXIgb3B0aW1pemVkIGJ5IHByb3Blcmx5IGFuYWx5emluZyBpbi1zY29wZSBiaW5kaW5nc1xuICAvLyBhbmQgc2tpcCBmb3JjZSB1cGRhdGluZyBvbmVzIHRoYXQgZG8gbm90IGFjdHVhbGx5IHVzZSBzY29wZSB2YXJpYWJsZXMuXG4gIGlmICghbmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKFxuICAgICAgICAocGFyZW50LnNsb3RTY29wZSAmJiBwYXJlbnQuc2xvdFNjb3BlICE9PSBlbXB0eVNsb3RTY29wZVRva2VuKSB8fFxuICAgICAgICBwYXJlbnQuZm9yXG4gICAgICApIHtcbiAgICAgICAgbmVlZHNGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LmlmKSB7XG4gICAgICAgIG5lZWRzS2V5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGdlbmVyYXRlZFNsb3RzID0gT2JqZWN0LmtleXMoc2xvdHMpXG4gICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KHNsb3RzW2tleV0sIHN0YXRlKTsgfSlcbiAgICAuam9pbignLCcpO1xuXG4gIHJldHVybiAoXCJzY29wZWRTbG90czpfdShbXCIgKyBnZW5lcmF0ZWRTbG90cyArIFwiXVwiICsgKG5lZWRzRm9yY2VVcGRhdGUgPyBcIixudWxsLHRydWVcIiA6IFwiXCIpICsgKCFuZWVkc0ZvcmNlVXBkYXRlICYmIG5lZWRzS2V5ID8gKFwiLG51bGwsZmFsc2UsXCIgKyAoaGFzaChnZW5lcmF0ZWRTbG90cykpKSA6IFwiXCIpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MTtcbiAgdmFyIGkgPSBzdHIubGVuZ3RoO1xuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuICByZXR1cm4gaGFzaCA+Pj4gMFxufVxuXG5mdW5jdGlvbiBjb250YWluc1Nsb3RDaGlsZCAoZWwpIHtcbiAgaWYgKGVsLnR5cGUgPT09IDEpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBlbC5jaGlsZHJlbi5zb21lKGNvbnRhaW5zU2xvdENoaWxkKVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGlzTGVnYWN5U3ludGF4ID0gZWwuYXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCAmJiAhaXNMZWdhY3lTeW50YXgpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90LCBcIm51bGxcIilcbiAgfVxuICBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdClcbiAgfVxuICB2YXIgc2xvdFNjb3BlID0gZWwuc2xvdFNjb3BlID09PSBlbXB0eVNsb3RTY29wZVRva2VuXG4gICAgPyBcIlwiXG4gICAgOiBTdHJpbmcoZWwuc2xvdFNjb3BlKTtcbiAgdmFyIGZuID0gXCJmdW5jdGlvbihcIiArIHNsb3RTY29wZSArIFwiKXtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICA/IGVsLmlmICYmIGlzTGVnYWN5U3ludGF4XG4gICAgICAgID8gKFwiKFwiICsgKGVsLmlmKSArIFwiKT9cIiArIChnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnKSArIFwiOnVuZGVmaW5lZFwiKVxuICAgICAgICA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCdcbiAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiO1xuICAvLyByZXZlcnNlIHByb3h5IHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gIHZhciByZXZlcnNlUHJveHkgPSBzbG90U2NvcGUgPyBcIlwiIDogXCIscHJveHk6dHJ1ZVwiO1xuICByZXR1cm4gKFwie2tleTpcIiArIChlbC5zbG90VGFyZ2V0IHx8IFwiXFxcImRlZmF1bHRcXFwiXCIpICsgXCIsZm46XCIgKyBmbiArIHJldmVyc2VQcm94eSArIFwifVwiKVxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgY2hlY2tTa2lwLFxuICBhbHRHZW5FbGVtZW50LFxuICBhbHRHZW5Ob2RlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIGVsJDEuZm9yICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgZWwkMS50YWcgIT09ICdzbG90J1xuICAgICkge1xuICAgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gY2hlY2tTa2lwXG4gICAgICAgID8gc3RhdGUubWF5YmVDb21wb25lbnQoZWwkMSkgPyBcIiwxXCIgOiBcIiwwXCJcbiAgICAgICAgOiBcIlwiO1xuICAgICAgcmV0dXJuIChcIlwiICsgKChhbHRHZW5FbGVtZW50IHx8IGdlbkVsZW1lbnQpKGVsJDEsIHN0YXRlKSkgKyBub3JtYWxpemF0aW9uVHlwZSlcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlJDEgPSBjaGVja1NraXBcbiAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgOiAwO1xuICAgIHZhciBnZW4gPSBhbHRHZW5Ob2RlIHx8IGdlbk5vZGU7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyBcIl1cIiArIChub3JtYWxpemF0aW9uVHlwZSQxID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUkMSkgOiAnJykpXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChcbiAgY2hpbGRyZW4sXG4gIG1heWJlQ29tcG9uZW50XG4pIHtcbiAgdmFyIHJlcyA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWwgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDI7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobWF5YmVDb21wb25lbnQoZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbmVlZHNOb3JtYWxpemF0aW9uIChlbCkge1xuICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnXG59XG5cbmZ1bmN0aW9uIGdlbk5vZGUgKG5vZGUsIHN0YXRlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDMgJiYgbm9kZS5pc0NvbW1lbnQpIHtcbiAgICByZXR1cm4gZ2VuQ29tbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Db21tZW50IChjb21tZW50KSB7XG4gIHJldHVybiAoXCJfZShcIiArIChKU09OLnN0cmluZ2lmeShjb21tZW50LnRleHQpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCwgc3RhdGUpIHtcbiAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKTtcbiAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcbiAgdmFyIGF0dHJzID0gZWwuYXR0cnMgfHwgZWwuZHluYW1pY0F0dHJzXG4gICAgPyBnZW5Qcm9wcygoZWwuYXR0cnMgfHwgW10pLmNvbmNhdChlbC5keW5hbWljQXR0cnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKHtcbiAgICAgICAgLy8gc2xvdCBwcm9wcyBhcmUgY2FtZWxpemVkXG4gICAgICAgIG5hbWU6IGNhbWVsaXplKGF0dHIubmFtZSksXG4gICAgICAgIHZhbHVlOiBhdHRyLnZhbHVlLFxuICAgICAgICBkeW5hbWljOiBhdHRyLmR5bmFtaWNcbiAgICAgIH0pOyB9KSlcbiAgICA6IG51bGw7XG4gIHZhciBiaW5kID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICBpZiAoKGF0dHJzIHx8IGJpbmQpICYmICFjaGlsZHJlbikge1xuICAgIHJlcyArPSBcIixudWxsXCI7XG4gIH1cbiAgaWYgKGF0dHJzKSB7XG4gICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gIH1cbiAgaWYgKGJpbmQpIHtcbiAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZDtcbiAgfVxuICByZXR1cm4gcmVzICsgJyknXG59XG5cbi8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbmZ1bmN0aW9uIGdlbkNvbXBvbmVudCAoXG4gIGNvbXBvbmVudE5hbWUsXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gIHJldHVybiAoXCJfYyhcIiArIGNvbXBvbmVudE5hbWUgKyBcIixcIiArIChnZW5EYXRhKGVsLCBzdGF0ZSkpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblByb3BzIChwcm9wcykge1xuICB2YXIgc3RhdGljUHJvcHMgPSBcIlwiO1xuICB2YXIgZHluYW1pY1Byb3BzID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgdmFyIHZhbHVlID0gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKHByb3AudmFsdWUpO1xuICAgIGlmIChwcm9wLmR5bmFtaWMpIHtcbiAgICAgIGR5bmFtaWNQcm9wcyArPSAocHJvcC5uYW1lKSArIFwiLFwiICsgdmFsdWUgKyBcIixcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljUHJvcHMgKz0gXCJcXFwiXCIgKyAocHJvcC5uYW1lKSArIFwiXFxcIjpcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHN0YXRpY1Byb3BzID0gXCJ7XCIgKyAoc3RhdGljUHJvcHMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICBpZiAoZHluYW1pY1Byb3BzKSB7XG4gICAgcmV0dXJuIChcIl9kKFwiICsgc3RhdGljUHJvcHMgKyBcIixbXCIgKyAoZHluYW1pY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YXRpY1Byb3BzXG4gIH1cbn1cblxuLy8gIzM4OTUsICM0MjY4XG5mdW5jdGlvbiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMgKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JylcbiAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jylcbn1cblxuLyogICovXG5cblxuXG4vLyB0aGVzZSBrZXl3b3JkcyBzaG91bGQgbm90IGFwcGVhciBpbnNpZGUgZXhwcmVzc2lvbnMsIGJ1dCBvcGVyYXRvcnMgbGlrZVxuLy8gdHlwZW9mLCBpbnN0YW5jZW9mIGFuZCBpbiBhcmUgYWxsb3dlZFxudmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xuICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbikuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG5cbi8vIHRoZXNlIHVuYXJ5IG9wZXJhdG9ycyBzaG91bGQgbm90IGJlIHVzZWQgYXMgcHJvcGVydHkvbWV0aG9kIG5hbWVzXG52YXIgdW5hcnlPcGVyYXRvcnNSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RlbGV0ZSx0eXBlb2Ysdm9pZCdcbikuc3BsaXQoJywnKS5qb2luKCdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpfFxcXFxiJykgKyAnXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKScpO1xuXG4vLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG52YXIgc3RyaXBTdHJpbmdSRSA9IC8nKD86W14nXFxcXF18XFxcXC4pKid8XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifGAoPzpbXmBcXFxcXXxcXFxcLikqXFwkXFx7fFxcfSg/OlteYFxcXFxdfFxcXFwuKSpgfGAoPzpbXmBcXFxcXXxcXFxcLikqYC9nO1xuXG4vLyBkZXRlY3QgcHJvYmxlbWF0aWMgZXhwcmVzc2lvbnMgaW4gYSB0ZW1wbGF0ZVxuZnVuY3Rpb24gZGV0ZWN0RXJyb3JzIChhc3QsIHdhcm4pIHtcbiAgaWYgKGFzdCkge1xuICAgIGNoZWNrTm9kZShhc3QsIHdhcm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrTm9kZSAobm9kZSwgd2Fybikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmF0dHJzTWFwW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBub2RlLnJhd0F0dHJzTWFwW25hbWVdO1xuICAgICAgICAgIGlmIChuYW1lID09PSAndi1mb3InKSB7XG4gICAgICAgICAgICBjaGVja0Zvcihub2RlLCAoXCJ2LWZvcj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICBjaGVja0V2ZW50KHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoZWNrTm9kZShub2RlLmNoaWxkcmVuW2ldLCB3YXJuKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCB3YXJuLCBub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V2ZW50IChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHZhciBzdGlwcGVkID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpO1xuICB2YXIga2V5d29yZE1hdGNoID0gc3RpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTtcbiAgaWYgKGtleXdvcmRNYXRjaCAmJiBzdGlwcGVkLmNoYXJBdChrZXl3b3JkTWF0Y2guaW5kZXggLSAxKSAhPT0gJyQnKSB7XG4gICAgd2FybihcbiAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCB1bmFyeSBvcGVyYXRvciBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiIGluIGV4cHJlc3Npb24gXCIgKyAodGV4dC50cmltKCkpLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICB9XG4gIGNoZWNrRXhwcmVzc2lvbihleHAsIHRleHQsIHdhcm4sIHJhbmdlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3IgKG5vZGUsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIGNoZWNrRXhwcmVzc2lvbihub2RlLmZvciB8fCAnJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywgJ3YtZm9yIGFsaWFzJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSWRlbnRpZmllciAoXG4gIGlkZW50LFxuICB0eXBlLFxuICB0ZXh0LFxuICB3YXJuLFxuICByYW5nZVxuKSB7XG4gIGlmICh0eXBlb2YgaWRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGdW5jdGlvbigoXCJ2YXIgXCIgKyBpZGVudCArIFwiPV9cIikpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oKFwiaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkpLCByYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXhwcmVzc2lvbiAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbigoXCJyZXR1cm4gXCIgKyBleHApKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiXFxuICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpLFxuICAgICAgICByYW5nZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihcbiAgICAgICAgXCJpbnZhbGlkIGV4cHJlc3Npb246IFwiICsgKGUubWVzc2FnZSkgKyBcIiBpblxcblxcblwiICtcbiAgICAgICAgXCIgICAgXCIgKyBleHAgKyBcIlxcblxcblwiICtcbiAgICAgICAgXCIgIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkgKyBcIlxcblwiLFxuICAgICAgICByYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciByYW5nZSA9IDI7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lIChcbiAgc291cmNlLFxuICBzdGFydCxcbiAgZW5kXG4pIHtcbiAgaWYgKCBzdGFydCA9PT0gdm9pZCAwICkgc3RhcnQgPSAwO1xuICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gc291cmNlLmxlbmd0aDtcblxuICB2YXIgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY291bnQgKz0gbGluZXNbaV0ubGVuZ3RoICsgMTtcbiAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgIGZvciAodmFyIGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKSB7IGNvbnRpbnVlIH1cbiAgICAgICAgcmVzLnB1c2goKFwiXCIgKyAoaiArIDEpICsgKHJlcGVhdCQxKFwiIFwiLCAzIC0gU3RyaW5nKGogKyAxKS5sZW5ndGgpKSArIFwifCAgXCIgKyAobGluZXNbal0pKSk7XG4gICAgICAgIHZhciBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xuICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXG4gICAgICAgICAgdmFyIHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydDtcbiAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCIgXCIsIHBhZCkgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiA+IGkpIHtcbiAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGgkMSA9IE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoJDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuam9pbignXFxuJylcbn1cblxuZnVuY3Rpb24gcmVwZWF0JDEgKHN0ciwgbikge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmIChuID4gMCkge1xuICAgIHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmIChuICYgMSkgeyByZXN1bHQgKz0gc3RyOyB9XG4gICAgICBuID4+Pj0gMTtcbiAgICAgIGlmIChuIDw9IDApIHsgYnJlYWsgfVxuICAgICAgc3RyICs9IHN0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uIChjb2RlLCBlcnJvcnMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGNvZGUpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9ycy5wdXNoKHsgZXJyOiBlcnIsIGNvZGU6IGNvZGUgfSk7XG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIChjb21waWxlKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoXG4gICAgdGVtcGxhdGUsXG4gICAgb3B0aW9ucyxcbiAgICB2bVxuICApIHtcbiAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICB2YXIgd2FybiQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgZGVsZXRlIG9wdGlvbnMud2FybjtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgJ0l0IHNlZW1zIHlvdSBhcmUgdXNpbmcgdGhlIHN0YW5kYWxvbmUgYnVpbGQgb2YgVnVlLmpzIGluIGFuICcgK1xuICAgICAgICAgICAgJ2Vudmlyb25tZW50IHdpdGggQ29udGVudCBTZWN1cml0eSBQb2xpY3kgdGhhdCBwcm9oaWJpdHMgdW5zYWZlLWV2YWwuICcgK1xuICAgICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcbiAgICAgICAgICAgICdyZWxheGluZyB0aGUgcG9saWN5IHRvIGFsbG93IHVuc2FmZS1ldmFsIG9yIHByZS1jb21waWxpbmcgeW91ciAnICtcbiAgICAgICAgICAgICd0ZW1wbGF0ZXMgaW50byByZW5kZXIgZnVuY3Rpb25zLidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgY2FjaGVcbiAgICB2YXIga2V5ID0gb3B0aW9ucy5kZWxpbWl0ZXJzXG4gICAgICA/IFN0cmluZyhvcHRpb25zLmRlbGltaXRlcnMpICsgdGVtcGxhdGVcbiAgICAgIDogdGVtcGxhdGU7XG4gICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgIHJldHVybiBjYWNoZVtrZXldXG4gICAgfVxuXG4gICAgLy8gY29tcGlsZVxuICAgIHZhciBjb21waWxlZCA9IGNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMpO1xuXG4gICAgLy8gY2hlY2sgY29tcGlsYXRpb24gZXJyb3JzL3RpcHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBpbGVkLmVycm9ycyAmJiBjb21waWxlZC5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgY29tcGlsZWQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyAoZS5tc2cpICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICAgIGdlbmVyYXRlQ29kZUZyYW1lKHRlbXBsYXRlLCBlLnN0YXJ0LCBlLmVuZCksXG4gICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKG1zZykgeyByZXR1cm4gdGlwKG1zZywgdm0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcmVuZGVyIGZ1bmN0aW9uOlxcblxcblwiICtcbiAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGVyciA9IHJlZi5lcnI7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHJlZi5jb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4gKChlcnIudG9TdHJpbmcoKSkgKyBcIiBpblxcblxcblwiICsgY29kZSArIFwiXFxuXCIpO1xuICAgICAgICB9KS5qb2luKCdcXG4nKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXJDcmVhdG9yIChiYXNlQ29tcGlsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXIgKGJhc2VPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gY29tcGlsZSAoXG4gICAgICB0ZW1wbGF0ZSxcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciBmaW5hbE9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zKTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0aXBzID0gW107XG5cbiAgICAgIHZhciB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkge1xuICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChtc2cpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICAgIHZhciBsZWFkaW5nU3BhY2VMZW5ndGggPSB0ZW1wbGF0ZS5tYXRjaCgvXlxccyovKVswXS5sZW5ndGg7XG5cbiAgICAgICAgICB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7IG1zZzogbXNnIH07XG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5lbmQgPSByYW5nZS5lbmQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKGRhdGEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIG1vZHVsZXNcbiAgICAgICAgaWYgKG9wdGlvbnMubW9kdWxlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5tb2R1bGVzID1cbiAgICAgICAgICAgIChiYXNlT3B0aW9ucy5tb2R1bGVzIHx8IFtdKS5jb25jYXQob3B0aW9ucy5tb2R1bGVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBjdXN0b20gZGlyZWN0aXZlc1xuICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLmRpcmVjdGl2ZXMgPSBleHRlbmQoXG4gICAgICAgICAgICBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zLmRpcmVjdGl2ZXMgfHwgbnVsbCksXG4gICAgICAgICAgICBvcHRpb25zLmRpcmVjdGl2ZXNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvcHkgb3RoZXIgb3B0aW9uc1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgICAgIGlmIChrZXkgIT09ICdtb2R1bGVzJyAmJiBrZXkgIT09ICdkaXJlY3RpdmVzJykge1xuICAgICAgICAgICAgZmluYWxPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZpbmFsT3B0aW9ucy53YXJuID0gd2FybjtcblxuICAgICAgdmFyIGNvbXBpbGVkID0gYmFzZUNvbXBpbGUodGVtcGxhdGUudHJpbSgpLCBmaW5hbE9wdGlvbnMpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGV0ZWN0RXJyb3JzKGNvbXBpbGVkLmFzdCwgd2Fybik7XG4gICAgICB9XG4gICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICBjb21waWxlZC50aXBzID0gdGlwcztcbiAgICAgIHJldHVybiBjb21waWxlZFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBjb21waWxlLFxuICAgICAgY29tcGlsZVRvRnVuY3Rpb25zOiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuKGNvbXBpbGUpXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBgY3JlYXRlQ29tcGlsZXJDcmVhdG9yYCBhbGxvd3MgY3JlYXRpbmcgY29tcGlsZXJzIHRoYXQgdXNlIGFsdGVybmF0aXZlXG4vLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuXG4vLyBIZXJlIHdlIGp1c3QgZXhwb3J0IGEgZGVmYXVsdCBjb21waWxlciB1c2luZyB0aGUgZGVmYXVsdCBwYXJ0cy5cbnZhciBjcmVhdGVDb21waWxlciA9IGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcihmdW5jdGlvbiBiYXNlQ29tcGlsZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLm9wdGltaXplICE9PSBmYWxzZSkge1xuICAgIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIH1cbiAgdmFyIGNvZGUgPSBnZW5lcmF0ZShhc3QsIG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIGFzdDogYXN0LFxuICAgIHJlbmRlcjogY29kZS5yZW5kZXIsXG4gICAgc3RhdGljUmVuZGVyRm5zOiBjb2RlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59KTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZShlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY0NsYXNzID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2NsYXNzJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgaWYgKGV4cHJlc3Npb24pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiY2xhc3M9XFxcIlwiICsgc3RhdGljQ2xhc3MgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRpY0NsYXNzKSB7XG4gICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gIH1cbiAgdmFyIGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgZWwuY2xhc3NCaW5kaW5nID0gY2xhc3NCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMShlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcbiAgICBkYXRhICs9IFwic3RhdGljQ2xhc3M6XCIgKyAoZWwuc3RhdGljQ2xhc3MpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJjbGFzczpcIiArIChlbC5jbGFzc0JpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIGNsYXNzXyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxudmFyIG5vcm1hbGl6ZSQxID0gY2FjaGVkKGNhbWVsaXplKTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgdmFyIHJlZiA9IHBhcnNlU3RhdGljU3R5bGUoc3RhdGljU3R5bGUsIG9wdGlvbnMpO1xuICB2YXIgZHluYW1pYyA9IHJlZi5keW5hbWljO1xuICB2YXIgc3R5bGVSZXN1bHQgPSByZWYuc3R5bGVSZXN1bHQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGR5bmFtaWMpIHtcbiAgICB3YXJuKFxuICAgICAgXCJzdHlsZT1cXFwiXCIgKyAoU3RyaW5nKHN0YXRpY1N0eWxlKSkgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuICBpZiAoIWR5bmFtaWMgJiYgc3R5bGVSZXN1bHQpIHtcbiAgICBlbC5zdGF0aWNTdHlsZSA9IHN0eWxlUmVzdWx0O1xuICB9XG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfSBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgZWwuc3R5bGVCaW5kaW5nID0gc3R5bGVSZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQyKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOlwiICsgKGVsLnN0eWxlQmluZGluZykgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwYXJzZVN0YXRpY1N0eWxlKHN0YXRpY1N0eWxlLCBvcHRpb25zKSB7XG4gIC8vIFwid2lkdGg6IDIwMHB4OyBoZWlnaHQ6IDIwMHB4O1wiIC0+IHt3aWR0aDogMjAwLCBoZWlnaHQ6IDIwMH1cbiAgLy8gXCJ3aWR0aDogMjAwcHg7IGhlaWdodDoge3t5fX1cIiAtPiB7d2lkdGg6IDIwMCwgaGVpZ2h0OiB5fVxuICB2YXIgZHluYW1pYyA9IGZhbHNlO1xuICB2YXIgc3R5bGVSZXN1bHQgPSAnJztcbiAgaWYgKHN0YXRpY1N0eWxlKSB7XG4gICAgdmFyIHN0eWxlTGlzdCA9IHN0YXRpY1N0eWxlXG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoJzsnKVxuICAgICAgLm1hcChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHN0eWxlLnRyaW0oKS5zcGxpdCgnOicpO1xuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSBub3JtYWxpemUkMShyZXN1bHRbMF0udHJpbSgpKTtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0WzFdLnRyaW0oKTtcbiAgICAgICAgdmFyIGR5bmFtaWNWYWx1ZSA9IHBhcnNlVGV4dCh2YWx1ZSwgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgaWYgKGR5bmFtaWNWYWx1ZSkge1xuICAgICAgICAgIGR5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBrZXkgKyAnOicgKyBkeW5hbWljVmFsdWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5ICsgJzonICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgICB9KVxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQ7IH0pO1xuICAgIGlmIChzdHlsZUxpc3QubGVuZ3RoKSB7XG4gICAgICBzdHlsZVJlc3VsdCA9ICd7JyArIHN0eWxlTGlzdC5qb2luKCcsJykgKyAnfSc7XG4gICAgfVxuICB9XG4gIHJldHVybiB7IGR5bmFtaWM6IGR5bmFtaWMsIHN0eWxlUmVzdWx0OiBzdHlsZVJlc3VsdCB9XG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQyXG59O1xuXG5mdW5jdGlvbiBwcmVUcmFuc2Zvcm1Ob2RlKGVsKSB7XG4gIHZhciB2Zm9yO1xuXG4gIGlmIChub3JtYWxpemVFbGVtZW50TmFtZShlbC50YWcpID09PSAnbmF0aXZlbGlzdHZpZXcnKSB7XG4gICAgdmZvciA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpO1xuICAgIGRlbGV0ZSBlbC5hdHRyc01hcFsndi1mb3InXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2Zm9yKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIlRoZSB2LWZvciBkaXJlY3RpdmUgaXMgbm90IHN1cHBvcnRlZCBvbiBhIFwiICsgKGVsLnRhZykgKyBcIiwgXCIgK1xuICAgICAgICAgICdVc2UgdGhlIFwiZm9yXCIgYXR0cmlidXRlIGluc3RlYWQuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mICcgK1xuICAgICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyB2Zm9yICsgXCJcXFwiPiB1c2UgPFwiICsgKGVsLnRhZykgKyBcIiBmb3I9XFxcIlwiICsgdmZvciArIFwiXFxcIj4uXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdmb3InKSB8fCB2Zm9yO1xuICBpZiAoIWV4cCkgeyByZXR1cm4gfVxuXG4gIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICBpZiAoIXJlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgZm9yIGV4cHJlc3Npb246IFwiICsgZXhwKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgYWRkUmF3QXR0cihlbCwgJzppdGVtcycsIHJlcy5mb3IpO1xuICBhZGRSYXdBdHRyKGVsLCAnK2FsaWFzJywgcmVzLmFsaWFzKTtcblxuICBpZiAocmVzLml0ZXJhdG9yMSkge1xuICAgIGFkZFJhd0F0dHIoZWwsICcraW5kZXgnLCByZXMuaXRlcmF0b3IxKTtcbiAgfVxufVxuXG52YXIgZm9yXyA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxufTtcblxuZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZSQxKGVsKSB7XG4gIGlmIChlbC50YWcgIT09ICdyb3V0ZXItdmlldycpIHsgcmV0dXJuIH1cbiAgaWYgKG5vcm1hbGl6ZUVsZW1lbnROYW1lKGVsLnBhcmVudC50YWcpID09PSAnbmF0aXZlZnJhbWUnKSB7XG4gICAgYWRkQXR0cihlbC5wYXJlbnQsICdoYXNSb3V0ZXJWaWV3JywgJ3RydWUnKTtcbiAgfVxufVxuXG52YXIgcm91dGVyID0ge1xuICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlJDFcbn07XG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUkMihlbCkge1xuICBpZiAoZWwucGFyZW50ICYmIGVsLnBhcmVudC50YWcgPT09ICd2LXRlbXBsYXRlJykge1xuICAgIHZhciBhbGlhcyA9IGVsLnBhcmVudC5wYXJlbnQuYXR0cnNNYXBbJythbGlhcyddIHx8ICdpdGVtJztcbiAgICB2YXIgaW5kZXggPSBlbC5wYXJlbnQucGFyZW50LmF0dHJzTWFwWycraW5kZXgnXSB8fCAnJGluZGV4JztcbiAgICBlbC5zbG90U2NvcGUgPSBidWlsZFNjb3BlU3RyaW5nKGFsaWFzLCBpbmRleCk7XG4gIH1cbn1cblxudmFyIHZUZW1wbGF0ZSQxID0ge1xuICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlJDJcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkU2NvcGVTdHJpbmcoYWxpYXMsIGluZGV4KSB7XG4gIHJldHVybiAoXCJ7IFwiICsgYWxpYXMgKyBcIiwgXCIgKyBpbmRleCArIFwiLCAkZXZlbiwgJG9kZCB9XCIpXG59XG5cbi8vIHRyYW5zZm9ybXMgfnRlc3QgLT4gdi12aWV3OnRlc3RcbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMihlbCkge1xuICB2YXIgYXR0ciA9IE9iamVjdC5rZXlzKGVsLmF0dHJzTWFwKS5maW5kKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiBhdHRyLnN0YXJ0c1dpdGgoJ34nKTsgfSk7XG5cbiAgaWYgKGF0dHIpIHtcbiAgICB2YXIgYXR0ck5hbWUgPSBhdHRyLnN1YnN0cigxKTtcbiAgICB2YXIgcmVmID0gYXR0ck5hbWUuc3BsaXQoJy4nKTtcbiAgICB2YXIgYXJnID0gcmVmWzBdO1xuICAgIHZhciBtb2RpZmllcnMgPSByZWYuc2xpY2UoMSk7XG4gICAgbW9kaWZpZXJzID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobW9kcywgbW9kKSB7XG4gICAgICBtb2RzW21vZF0gPSB0cnVlO1xuICAgICAgcmV0dXJuIG1vZHNcbiAgICB9LCB7fSk7XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgYXR0ciwgdHJ1ZSk7XG4gICAgYWRkRGlyZWN0aXZlKGVsLCAndmlldycsIChcInYtdmlldzpcIiArIGF0dHJOYW1lKSwgJycsIGFyZywgZmFsc2UsIG1vZGlmaWVycyk7XG4gIH1cbn1cblxudmFyIHZpZXcgPSB7XG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMlxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtjbGFzc18kMSwgc3R5bGUkMSwgdlRlbXBsYXRlJDEsIGZvcl8sIHJvdXRlciwgdmlld107XG5cbmZ1bmN0aW9uIG1vZGVsKGVsLCBkaXIpIHtcbiAgaWYgKGVsLnR5cGUgPT09IDEgJiYgaXNLbm93blZpZXcoZWwudGFnKSkge1xuICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgZGlyLnZhbHVlLCBkaXIubW9kaWZpZXJzKTtcbiAgfSBlbHNlIHtcbiAgICBnZW5Db21wb25lbnRNb2RlbChlbCwgZGlyLnZhbHVlLCBkaXIubW9kaWZpZXJzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpIHtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciByZWYkMSA9IGdldFZpZXdNZXRhKGVsLnRhZykubW9kZWw7XG4gIHZhciBwcm9wID0gcmVmJDEucHJvcDtcbiAgdmFyIGV2ZW50ID0gcmVmJDEuZXZlbnQ7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IFwiJGV2ZW50LnZhbHVlXCIgKyAodHJpbSA/ICcudHJpbSgpJyA6ICcnKTtcblxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICBhZGRBdHRyKGVsLCBwcm9wLCAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbn1cblxudmFyIGRpcmVjdGl2ZXMkMSA9IHtcbiAgbW9kZWw6IG1vZGVsXG59O1xuXG52YXIgYmFzZU9wdGlvbnMgPSB7XG4gIG1vZHVsZXM6IG1vZHVsZXMkMSxcbiAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyQxLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGNhbkJlTGVmdE9wZW5UYWcsXG4gIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2U6IGZhbHNlLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSlcbn07XG5cbnZhciByZWYkMSA9IGNyZWF0ZUNvbXBpbGVyKGJhc2VPcHRpb25zKTtcbnZhciBjb21waWxlVG9GdW5jdGlvbnMgPSByZWYkMS5jb21waWxlVG9GdW5jdGlvbnM7XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwJDEocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEwJztcblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbFZpc2liaWxpdHkgPSAoZWwuX192T3JpZ2luYWxWaXNpYmlsaXR5ID1cbiAgICAgIGVsLmdldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScpID09PSAnbm9uZSdcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IGVsLmdldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScpKTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbikge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsIG9yaWdpbmFsVmlzaWJpbGl0eSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCd2aXNpYmlsaXR5JywgdmFsdWUgPyBvcmlnaW5hbFZpc2liaWxpdHkgOiAnY29sbGFwc2VkJyk7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsIGVsLl9fdk9yaWdpbmFsVmlzaWJpbGl0eSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknLCAnY29sbGFwc2VkJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICd2aXNpYmlsaXR5JyxcbiAgICAgICAgdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbFZpc2liaWxpdHkgOiAnY29sbGFwc2VkJ1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsIGVsLl9fdk9yaWdpbmFsVmlzaWJpbGl0eSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmlldyQxID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQoZWwsIHJlZikge1xuICAgIHZhciBhcmcgPSByZWYuYXJnO1xuICAgIHZhciBtb2RpZmllcnMgPSByZWYubW9kaWZpZXJzO1xuXG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGUubmF0aXZlVmlldztcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChtb2RpZmllcnMuYXJyYXkpIHtcbiAgICAgICAgcGFyZW50W2FyZ10gPSAocGFyZW50W2FyZ10gfHwgW10pLnB1c2goZWwubmF0aXZlVmlldyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRbYXJnXSA9IGVsLm5hdGl2ZVZpZXc7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBzaG93OiBzaG93LFxuICB2aWV3OiB2aWV3JDFcbn07XG5cbi8vIEVuc3VyZSBgYXBwbGljYXRpb25gIGFuZCBgZnJhbWVgIG1vZHVsZXMgYXJlIGxvYWRlZFxuXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuVnVlLiRkb2N1bWVudCA9IFZ1ZS5wcm90b3R5cGUuJGRvY3VtZW50ID0gbmV3IERvY3VtZW50Tm9kZSgpO1xuXG5WdWUuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblZ1ZS5yZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckVsZW1lbnQ7XG5cbk9iamVjdC5hc3NpZ24oVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBwYXRjaDtcblxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbihlbCwgaHlkcmF0aW5nKSB7XG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlICYmIHR5cGVvZiB0ZW1wbGF0ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOiAnICsgdGVtcGxhdGUsIHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnMoXG4gICAgICAgIHRlbXBsYXRlLFxuICAgICAgICB7XG4gICAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzLFxuICAgICAgICAgIGNvbW1lbnRzOiBvcHRpb25zLmNvbW1lbnRzXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cblZ1ZS5wcm90b3R5cGUuJHN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIEFwcENvbnN0cnVjdG9yID0gVnVlLmV4dGVuZCh0aGlzLiRvcHRpb25zKTtcblxuICAvLyByZWdpc3RlciBOUyBjb21wb25lbnRzIGludG8gVnVlXG4gIE9iamVjdC52YWx1ZXMoZ2V0RWxlbWVudE1hcCgpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIFZ1ZS5jb21wb25lbnQoZW50cnkubWV0YS5jb21wb25lbnQubmFtZSwgZW50cnkubWV0YS5jb21wb25lbnQpO1xuICB9KTtcblxuICBhcHBsaWNhdGlvbi5vbihhcHBsaWNhdGlvbi5sYXVuY2hFdmVudCwgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoc2VsZi4kZWwpIHtcbiAgICAgIHNlbGYuJGRlc3Ryb3koKTtcbiAgICAgIHNlbGYgPSBuZXcgQXBwQ29uc3RydWN0b3IoKTtcbiAgICB9XG5cbiAgICBzZWxmLiRtb3VudCgpO1xuICAgIGFyZ3Mucm9vdCA9IHNlbGYuJGVsLm5hdGl2ZVZpZXc7XG4gIH0pO1xuXG4gIGFwcGxpY2F0aW9uLnJ1bigpO1xufTtcblxuLy8gRGVmaW5lIGEgYG5hdGl2ZVZpZXdgIGdldHRlciBpbiBldmVyeSBOUyB2dWUgaW5zdGFuY2Vcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnbmF0aXZlVmlldycsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLm5hdGl2ZVZpZXdcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIF9maW5kUGFyZW50TW9kYWxFbnRyeSh2bSkge1xuICBpZiAoIXZtKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgZW50cnkgPSB2bS4kcGFyZW50O1xuICB3aGlsZSAoZW50cnkgJiYgZW50cnkuJG9wdGlvbnMubmFtZSAhPT0gJ01vZGFsRW50cnknKSB7XG4gICAgZW50cnkgPSBlbnRyeS4kcGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5XG59XG5cbnZhciBNb2RhbFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICBWdWUubWl4aW4oe1xuICAgICAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLiRtb2RhbCA9IHtcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoZGF0YSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2ZpbmRQYXJlbnRNb2RhbEVudHJ5KHNlbGYpO1xuXG4gICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgZW50cnkuY2xvc2VDYihkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBWdWUucHJvdG90eXBlLiRzaG93TW9kYWwgPSBmdW5jdGlvbihjb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBjbG9zZUNiID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBpZiAocmVzb2x2ZWQpIHsgcmV0dXJuIH1cblxuICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgIG1vZGFsUGFnZS5jbG9zZU1vZGFsKCk7XG5cbiAgICAgICAgICAvLyBlbWl0dGVkIHRvIHNob3cgdXAgaW4gZGV2dG9vbHNcbiAgICAgICAgICAvLyBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG4gICAgICAgICAgbmF2RW50cnlJbnN0YW5jZS4kZW1pdCgnbW9kYWw6Y2xvc2UnLCBkYXRhKTtcbiAgICAgICAgICBuYXZFbnRyeUluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gYnVpbGQgb3B0aW9ucyBvYmplY3Qgd2l0aCBkZWZhdWx0c1xuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgICAgY2xvc2VDYWxsYmFjazogY2xvc2VDYlxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbmF2RW50cnlJbnN0YW5jZSA9IG5ldyBWdWUoe1xuICAgICAgICAgIG5hbWU6ICdNb2RhbEVudHJ5JyxcbiAgICAgICAgICBwYXJlbnQ6IHRoaXMkMS4kcm9vdCxcbiAgICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICBjbG9zZUNiOiBjbG9zZUNiXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChoKSB7IHJldHVybiBoKGNvbXBvbmVudCwge1xuICAgICAgICAgICAgICBwcm9wczogb3B0aW9ucy5wcm9wc1xuICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtb2RhbFBhZ2UgPSBuYXZFbnRyeUluc3RhbmNlLiRtb3VudCgpLiRlbC5uYXRpdmVWaWV3O1xuXG4gICAgICAgIHRoaXMkMS4kZWwubmF0aXZlVmlldy5zaG93TW9kYWwobW9kYWxQYWdlLCBvcHRpb25zKTtcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxufTtcblxuVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuXG5zZXRWdWUoVnVlKTtcblxuVnVlLnVzZShNb2RhbFBsdWdpbik7XG5WdWUudXNlKE5hdmlnYXRvclBsdWdpbik7XG5cbnZhciBuZXdMaW5lUmVnRXhwID0gL1xcXFxuL2c7XG5cbmNvbnNvbGUubG9nID0gKGZ1bmN0aW9uKGxvZywgaW5zcGVjdCwgVnVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICByZXR1cm4gbG9nLmNhbGwuYXBwbHkoXG4gICAgICBsb2csIFsgdGhpcyBdLmNvbmNhdCggQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFyZ3MsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gaW5zcGVjdChhcmcsIHtcbiAgICAgICAgICBkZXB0aDogMixcbiAgICAgICAgICBjb2xvcnM6IFZ1ZS5jb25maWcuZGVidWcsXG4gICAgICAgICAgc2hvd0hpZGRlbjogdHJ1ZVxuICAgICAgICB9KS5yZXBsYWNlKG5ld0xpbmVSZWdFeHAsICdcXG4nKVxuICAgICAgfSkgKVxuICAgIClcbiAgfVxufSkoY29uc29sZS5sb2csIHV0aWxJbnNwZWN0LCBWdWUpO1xuXG5nbG9iYWwuX19vbkxpdmVTeW5jQ29yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZyYW1lID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9mcmFtZScpLnRvcG1vc3QoKTtcbiAgaWYgKGZyYW1lKSB7XG4gICAgaWYgKGZyYW1lLmN1cnJlbnRQYWdlICYmIGZyYW1lLmN1cnJlbnRQYWdlLm1vZGFsKSB7XG4gICAgICBmcmFtZS5jdXJyZW50UGFnZS5tb2RhbC5jbG9zZU1vZGFsKCk7XG4gICAgfVxuXG4gICAgaWYgKGZyYW1lLmN1cnJlbnRQYWdlKSB7XG4gICAgICBmcmFtZS5jdXJyZW50UGFnZS5hZGRDc3NGaWxlKFxuICAgICAgICByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uJykuZ2V0Q3NzRmlsZU5hbWUoKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIEZpeCBhIHJvbGx1cCBwcm9ibGVtIHdoaWNoIGRvZXMgbm90IGRlZmluZVxuLy8gbW9kdWxlLmV4cG9ydC5kZWZhdWx0ID0gVnVlXG4vLyBzbyBhIGBpbXBvcnQgVnVlIGZyb20gJ25hdGl2ZXNjcmlwdC12dWUnYCB3aWxsXG4vLyBmYWlsIGZyb20gYSBUeXBlc2NyaXB0IGZpbGVcblZ1ZS5kZWZhdWx0ID0gVnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZ1ZTtcbiIsInZhciBWdWUgLy8gbGF0ZSBiaW5kXG52YXIgdmVyc2lvblxudmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbClcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cuX19WVUVfSE9UX01BUF9fID0gbWFwXG59XG52YXIgaW5zdGFsbGVkID0gZmFsc2VcbnZhciBpc0Jyb3dzZXJpZnkgPSBmYWxzZVxudmFyIGluaXRIb29rTmFtZSA9ICdiZWZvcmVDcmVhdGUnXG5cbmV4cG9ydHMuaW5zdGFsbCA9IGZ1bmN0aW9uICh2dWUsIGJyb3dzZXJpZnkpIHtcbiAgaWYgKGluc3RhbGxlZCkgeyByZXR1cm4gfVxuICBpbnN0YWxsZWQgPSB0cnVlXG5cbiAgVnVlID0gdnVlLl9fZXNNb2R1bGUgPyB2dWUuZGVmYXVsdCA6IHZ1ZVxuICB2ZXJzaW9uID0gVnVlLnZlcnNpb24uc3BsaXQoJy4nKS5tYXAoTnVtYmVyKVxuICBpc0Jyb3dzZXJpZnkgPSBicm93c2VyaWZ5XG5cbiAgLy8gY29tcGF0IHdpdGggPCAyLjAuMC1hbHBoYS43XG4gIGlmIChWdWUuY29uZmlnLl9saWZlY3ljbGVIb29rcy5pbmRleE9mKCdpbml0JykgPiAtMSkge1xuICAgIGluaXRIb29rTmFtZSA9ICdpbml0J1xuICB9XG5cbiAgZXhwb3J0cy5jb21wYXRpYmxlID0gdmVyc2lvblswXSA+PSAyXG4gIGlmICghZXhwb3J0cy5jb21wYXRpYmxlKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tITVJdIFlvdSBhcmUgdXNpbmcgYSB2ZXJzaW9uIG9mIHZ1ZS1ob3QtcmVsb2FkLWFwaSB0aGF0IGlzICcgK1xuICAgICAgICAnb25seSBjb21wYXRpYmxlIHdpdGggVnVlLmpzIGNvcmUgXjIuMC4wLidcbiAgICApXG4gICAgcmV0dXJuXG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSByZWNvcmQgZm9yIGEgaG90IG1vZHVsZSwgd2hpY2gga2VlcHMgdHJhY2sgb2YgaXRzIGNvbnN0cnVjdG9yXG4gKiBhbmQgaW5zdGFuY2VzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmV4cG9ydHMuY3JlYXRlUmVjb3JkID0gZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIGlmKG1hcFtpZF0pIHsgcmV0dXJuIH1cblxuICB2YXIgQ3RvciA9IG51bGxcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgQ3RvciA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zXG4gIH1cbiAgbWFrZU9wdGlvbnNIb3QoaWQsIG9wdGlvbnMpXG4gIG1hcFtpZF0gPSB7XG4gICAgQ3RvcjogQ3RvcixcbiAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIGluc3RhbmNlczogW11cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIG1vZHVsZSBpcyByZWNvcmRlZFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICovXG5cbmV4cG9ydHMuaXNSZWNvcmRlZCA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gdHlwZW9mIG1hcFtpZF0gIT09ICd1bmRlZmluZWQnXG59XG5cbi8qKlxuICogTWFrZSBhIENvbXBvbmVudCBvcHRpb25zIG9iamVjdCBob3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmZ1bmN0aW9uIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICB2YXIgcmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIChoLCBjdHgpIHtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBtYXBbaWRdLmluc3RhbmNlc1xuICAgICAgaWYgKGN0eCAmJiBpbnN0YW5jZXMuaW5kZXhPZihjdHgucGFyZW50KSA8IDApIHtcbiAgICAgICAgaW5zdGFuY2VzLnB1c2goY3R4LnBhcmVudClcbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIoaCwgY3R4KVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbmplY3RIb29rKG9wdGlvbnMsIGluaXRIb29rTmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbWFwW2lkXVxuICAgICAgaWYgKCFyZWNvcmQuQ3Rvcikge1xuICAgICAgICByZWNvcmQuQ3RvciA9IHRoaXMuY29uc3RydWN0b3JcbiAgICAgIH1cbiAgICAgIHJlY29yZC5pbnN0YW5jZXMucHVzaCh0aGlzKVxuICAgIH0pXG4gICAgaW5qZWN0SG9vayhvcHRpb25zLCAnYmVmb3JlRGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluc3RhbmNlcyA9IG1hcFtpZF0uaW5zdGFuY2VzXG4gICAgICBpbnN0YW5jZXMuc3BsaWNlKGluc3RhbmNlcy5pbmRleE9mKHRoaXMpLCAxKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBJbmplY3QgYSBob29rIHRvIGEgaG90IHJlbG9hZGFibGUgY29tcG9uZW50IHNvIHRoYXRcbiAqIHdlIGNhbiBrZWVwIHRyYWNrIG9mIGl0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gaG9va1xuICovXG5cbmZ1bmN0aW9uIGluamVjdEhvb2sob3B0aW9ucywgbmFtZSwgaG9vaykge1xuICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zW25hbWVdXG4gIG9wdGlvbnNbbmFtZV0gPSBleGlzdGluZ1xuICAgID8gQXJyYXkuaXNBcnJheShleGlzdGluZykgPyBleGlzdGluZy5jb25jYXQoaG9vaykgOiBbZXhpc3RpbmcsIGhvb2tdXG4gICAgOiBbaG9va11cbn1cblxuZnVuY3Rpb24gdHJ5V3JhcChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGlkLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgZm4oaWQsIGFyZylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nXG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMgKG9sZE9wdGlvbnMsIG5ld09wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9sZE9wdGlvbnMpIHtcbiAgICBpZiAoIShrZXkgaW4gbmV3T3B0aW9ucykpIHtcbiAgICAgIGRlbGV0ZSBvbGRPcHRpb25zW2tleV1cbiAgICB9XG4gIH1cbiAgZm9yICh2YXIga2V5JDEgaW4gbmV3T3B0aW9ucykge1xuICAgIG9sZE9wdGlvbnNba2V5JDFdID0gbmV3T3B0aW9uc1trZXkkMV1cbiAgfVxufVxuXG5leHBvcnRzLnJlcmVuZGVyID0gdHJ5V3JhcChmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS4kZm9yY2VVcGRhdGUoKVxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMub3B0aW9uc1xuICB9XG4gIGlmIChyZWNvcmQuQ3Rvcikge1xuICAgIHJlY29yZC5DdG9yLm9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICByZWNvcmQuQ3Rvci5vcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG4gICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS4kb3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgaW5zdGFuY2UuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNcbiAgICAgIC8vIHJlc2V0IHN0YXRpYyB0cmVlc1xuICAgICAgLy8gcHJlIDIuNSwgYWxsIHN0YXRpYyB0cmVlcyBhcmUgY2FjaGVkIHRvZ2V0aGVyIG9uIHRoZSBpbnN0YW5jZVxuICAgICAgaWYgKGluc3RhbmNlLl9zdGF0aWNUcmVlcykge1xuICAgICAgICBpbnN0YW5jZS5fc3RhdGljVHJlZXMgPSBbXVxuICAgICAgfVxuICAgICAgLy8gMi41LjBcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZC5DdG9yLm9wdGlvbnMuY2FjaGVkKSkge1xuICAgICAgICByZWNvcmQuQ3Rvci5vcHRpb25zLmNhY2hlZCA9IFtdXG4gICAgICB9XG4gICAgICAvLyAyLjUuM1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5zdGFuY2UuJG9wdGlvbnMuY2FjaGVkKSkge1xuICAgICAgICBpbnN0YW5jZS4kb3B0aW9ucy5jYWNoZWQgPSBbXVxuICAgICAgfVxuXG4gICAgICAvLyBwb3N0IDIuNS40OiB2LW9uY2UgdHJlZXMgYXJlIGNhY2hlZCBvbiBpbnN0YW5jZS5fc3RhdGljVHJlZXMuXG4gICAgICAvLyBQdXJlIHN0YXRpYyB0cmVlcyBhcmUgY2FjaGVkIG9uIHRoZSBzdGF0aWNSZW5kZXJGbnMgYXJyYXlcbiAgICAgIC8vIChib3RoIGFscmVhZHkgcmVzZXQgYWJvdmUpXG5cbiAgICAgIC8vIDIuNjogdGVtcG9yYXJpbHkgbWFyayByZW5kZXJlZCBzY29wZWQgc2xvdHMgYXMgdW5zdGFibGUgc28gdGhhdFxuICAgICAgLy8gY2hpbGQgY29tcG9uZW50cyBjYW4gYmUgZm9yY2VkIHRvIHVwZGF0ZVxuICAgICAgdmFyIHJlc3RvcmUgPSBwYXRjaFNjb3BlZFNsb3RzKGluc3RhbmNlKVxuICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICAgIGluc3RhbmNlLiRuZXh0VGljayhyZXN0b3JlKVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgLy8gZnVuY3Rpb25hbCBvciBubyBpbnN0YW5jZSBjcmVhdGVkIHlldFxuICAgIHJlY29yZC5vcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgcmVjb3JkLm9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNcblxuICAgIC8vIGhhbmRsZSBmdW5jdGlvbmFsIGNvbXBvbmVudCByZS1yZW5kZXJcbiAgICBpZiAocmVjb3JkLm9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gcmVyZW5kZXIgd2l0aCBmdWxsIG9wdGlvbnNcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnMocmVjb3JkLm9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0ZW1wbGF0ZS1vbmx5IHJlcmVuZGVyLlxuICAgICAgICAvLyBuZWVkIHRvIGluamVjdCB0aGUgc3R5bGUgaW5qZWN0aW9uIGNvZGUgZm9yIENTUyBtb2R1bGVzXG4gICAgICAgIC8vIHRvIHdvcmsgcHJvcGVybHkuXG4gICAgICAgIHZhciBpbmplY3RTdHlsZXMgPSByZWNvcmQub3B0aW9ucy5faW5qZWN0U3R5bGVzXG4gICAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgICB2YXIgcmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgICAgICByZWNvcmQub3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiAoaCwgY3R4KSB7XG4gICAgICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChjdHgpXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyKGgsIGN0eClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlY29yZC5vcHRpb25zLl9DdG9yID0gbnVsbFxuICAgICAgLy8gMi41LjNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZC5vcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgcmVjb3JkLm9wdGlvbnMuY2FjaGVkID0gW11cbiAgICAgIH1cbiAgICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS4kZm9yY2VVcGRhdGUoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pXG5cbmV4cG9ydHMucmVsb2FkID0gdHJ5V3JhcChmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnNcbiAgICB9XG4gICAgbWFrZU9wdGlvbnNIb3QoaWQsIG9wdGlvbnMpXG4gICAgaWYgKHJlY29yZC5DdG9yKSB7XG4gICAgICBpZiAodmVyc2lvblsxXSA8IDIpIHtcbiAgICAgICAgLy8gcHJlc2VydmUgcHJlIDIuMiBiZWhhdmlvciBmb3IgZ2xvYmFsIG1peGluIGhhbmRsaW5nXG4gICAgICAgIHJlY29yZC5DdG9yLmV4dGVuZE9wdGlvbnMgPSBvcHRpb25zXG4gICAgICB9XG4gICAgICB2YXIgbmV3Q3RvciA9IHJlY29yZC5DdG9yLnN1cGVyLmV4dGVuZChvcHRpb25zKVxuICAgICAgcmVjb3JkLkN0b3Iub3B0aW9ucyA9IG5ld0N0b3Iub3B0aW9uc1xuICAgICAgcmVjb3JkLkN0b3IuY2lkID0gbmV3Q3Rvci5jaWRcbiAgICAgIHJlY29yZC5DdG9yLnByb3RvdHlwZSA9IG5ld0N0b3IucHJvdG90eXBlXG4gICAgICBpZiAobmV3Q3Rvci5yZWxlYXNlKSB7XG4gICAgICAgIC8vIHRlbXBvcmFyeSBnbG9iYWwgbWl4aW4gc3RyYXRlZ3kgdXNlZCBpbiA8IDIuMC4wLWFscGhhLjZcbiAgICAgICAgbmV3Q3Rvci5yZWxlYXNlKClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlT3B0aW9ucyhyZWNvcmQub3B0aW9ucywgb3B0aW9ucylcbiAgICB9XG4gIH1cbiAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgaWYgKGluc3RhbmNlLiR2bm9kZSAmJiBpbnN0YW5jZS4kdm5vZGUuY29udGV4dCkge1xuICAgICAgaW5zdGFuY2UuJHZub2RlLmNvbnRleHQuJGZvcmNlVXBkYXRlKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnUm9vdCBvciBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlIG1vZGlmaWVkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nXG4gICAgICApXG4gICAgfVxuICB9KVxufSlcblxuLy8gMi42IG9wdGltaXplcyB0ZW1wbGF0ZS1jb21waWxlZCBzY29wZWQgc2xvdHMgYW5kIHNraXBzIHVwZGF0ZXMgaWYgY2hpbGRcbi8vIG9ubHkgdXNlcyBzY29wZWQgc2xvdHMuIFdlIG5lZWQgdG8gcGF0Y2ggdGhlIHNjb3BlZCBzbG90cyByZXNvbHZpbmcgaGVscGVyXG4vLyB0byB0ZW1wb3JhcmlseSBtYXJrIGFsbCBzY29wZWQgc2xvdHMgYXMgdW5zdGFibGUgaW4gb3JkZXIgdG8gZm9yY2UgY2hpbGRcbi8vIHVwZGF0ZXMuXG5mdW5jdGlvbiBwYXRjaFNjb3BlZFNsb3RzIChpbnN0YW5jZSkge1xuICBpZiAoIWluc3RhbmNlLl91KSB7IHJldHVybiB9XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvYmxvYi9kZXYvc3JjL2NvcmUvaW5zdGFuY2UvcmVuZGVyLWhlbHBlcnMvcmVzb2x2ZS1zY29wZWQtc2xvdHMuanNcbiAgdmFyIG9yaWdpbmFsID0gaW5zdGFuY2UuX3VcbiAgaW5zdGFuY2UuX3UgPSBmdW5jdGlvbiAoc2xvdHMpIHtcbiAgICB0cnkge1xuICAgICAgLy8gMi42LjQgfiAyLjYuNlxuICAgICAgcmV0dXJuIG9yaWdpbmFsKHNsb3RzLCB0cnVlKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIDIuNSAvID49IDIuNi43XG4gICAgICByZXR1cm4gb3JpZ2luYWwoc2xvdHMsIG51bGwsIHRydWUpXG4gICAgfVxuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW5zdGFuY2UuX3UgPSBvcmlnaW5hbFxuICB9XG59XG4iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==